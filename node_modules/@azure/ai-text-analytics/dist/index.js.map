{"version":3,"file":"index.js","sources":["../src/constants.ts","../src/generated/models/mappers.ts","../src/generated/models/parameters.ts","../src/generated/generatedClientContext.ts","../src/generated/generatedClient.ts","../src/logger.ts","../src/util.ts","../src/textAnalyticsResult.ts","../src/detectLanguageResult.ts","../src/detectLanguageResultArray.ts","../src/recognizeCategorizedEntitiesResult.ts","../src/recognizeCategorizedEntitiesResultArray.ts","../src/analyzeSentimentResult.ts","../src/analyzeSentimentResultArray.ts","../src/extractKeyPhrasesResult.ts","../src/extractKeyPhrasesResultArray.ts","../src/recognizePiiEntitiesResult.ts","../src/recognizePiiEntitiesResultArray.ts","../src/recognizeLinkedEntitiesResult.ts","../src/recognizeLinkedEntitiesResultArray.ts","../src/tracing.ts","../src/azureKeyCredentialPolicy.ts","../src/lro/poller.ts","../src/lro/health/operation.ts","../src/lro/health/poller.ts","../src/lro/analyze/operation.ts","../src/lro/analyze/poller.ts","../src/textAnalyticsClient.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nexport const SDK_VERSION: string = \"5.1.0-beta.3\";\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\n\nexport const MultiLanguageBatchInput: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"MultiLanguageBatchInput\",\n    modelProperties: {\n      documents: {\n        serializedName: \"documents\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"TextDocumentInput\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const TextDocumentInput: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TextDocumentInput\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      text: {\n        serializedName: \"text\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      language: {\n        serializedName: \"language\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const JobDescriptor: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"JobDescriptor\",\n    modelProperties: {\n      displayName: {\n        serializedName: \"displayName\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const JobManifest: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"JobManifest\",\n    modelProperties: {\n      tasks: {\n        serializedName: \"tasks\",\n        type: {\n          name: \"Composite\",\n          className: \"JobManifestTasks\"\n        }\n      }\n    }\n  }\n};\n\nexport const JobManifestTasks: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"JobManifestTasks\",\n    modelProperties: {\n      entityRecognitionTasks: {\n        serializedName: \"entityRecognitionTasks\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"EntitiesTask\"\n            }\n          }\n        }\n      },\n      entityRecognitionPiiTasks: {\n        serializedName: \"entityRecognitionPiiTasks\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"PiiTask\"\n            }\n          }\n        }\n      },\n      keyPhraseExtractionTasks: {\n        serializedName: \"keyPhraseExtractionTasks\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"KeyPhrasesTask\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const EntitiesTask: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"EntitiesTask\",\n    modelProperties: {\n      parameters: {\n        serializedName: \"parameters\",\n        type: {\n          name: \"Composite\",\n          className: \"EntitiesTaskParameters\"\n        }\n      }\n    }\n  }\n};\n\nexport const EntitiesTaskParameters: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"EntitiesTaskParameters\",\n    modelProperties: {\n      modelVersion: {\n        defaultValue: \"latest\",\n        serializedName: \"model-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      stringIndexType: {\n        defaultValue: \"TextElements_v8\",\n        serializedName: \"stringIndexType\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"TextElements_v8\",\n            \"UnicodeCodePoint\",\n            \"Utf16CodeUnit\"\n          ]\n        }\n      }\n    }\n  }\n};\n\nexport const PiiTask: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PiiTask\",\n    modelProperties: {\n      parameters: {\n        serializedName: \"parameters\",\n        type: {\n          name: \"Composite\",\n          className: \"PiiTaskParameters\"\n        }\n      }\n    }\n  }\n};\n\nexport const PiiTaskParameters: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PiiTaskParameters\",\n    modelProperties: {\n      domain: {\n        defaultValue: \"none\",\n        serializedName: \"domain\",\n        type: {\n          name: \"String\"\n        }\n      },\n      modelVersion: {\n        defaultValue: \"latest\",\n        serializedName: \"model-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      stringIndexType: {\n        defaultValue: \"TextElements_v8\",\n        serializedName: \"stringIndexType\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"TextElements_v8\",\n            \"UnicodeCodePoint\",\n            \"Utf16CodeUnit\"\n          ]\n        }\n      }\n    }\n  }\n};\n\nexport const KeyPhrasesTask: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"KeyPhrasesTask\",\n    modelProperties: {\n      parameters: {\n        serializedName: \"parameters\",\n        type: {\n          name: \"Composite\",\n          className: \"KeyPhrasesTaskParameters\"\n        }\n      }\n    }\n  }\n};\n\nexport const KeyPhrasesTaskParameters: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"KeyPhrasesTaskParameters\",\n    modelProperties: {\n      modelVersion: {\n        defaultValue: \"latest\",\n        serializedName: \"model-version\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ErrorResponse: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorResponse\",\n    modelProperties: {\n      error: {\n        serializedName: \"error\",\n        type: {\n          name: \"Composite\",\n          className: \"TextAnalyticsError\"\n        }\n      }\n    }\n  }\n};\n\nexport const TextAnalyticsError: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TextAnalyticsError\",\n    modelProperties: {\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"InvalidRequest\",\n            \"InvalidArgument\",\n            \"InternalServerError\",\n            \"ServiceUnavailable\",\n            \"NotFound\"\n          ]\n        }\n      },\n      message: {\n        serializedName: \"message\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      target: {\n        serializedName: \"target\",\n        type: {\n          name: \"String\"\n        }\n      },\n      innererror: {\n        serializedName: \"innererror\",\n        type: {\n          name: \"Composite\",\n          className: \"InnerError\"\n        }\n      },\n      details: {\n        serializedName: \"details\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"TextAnalyticsError\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const InnerError: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"InnerError\",\n    modelProperties: {\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      message: {\n        serializedName: \"message\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      details: {\n        serializedName: \"details\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"String\" } }\n        }\n      },\n      target: {\n        serializedName: \"target\",\n        type: {\n          name: \"String\"\n        }\n      },\n      innererror: {\n        serializedName: \"innererror\",\n        type: {\n          name: \"Composite\",\n          className: \"InnerError\"\n        }\n      }\n    }\n  }\n};\n\nexport const TextDocumentBatchStatistics: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TextDocumentBatchStatistics\",\n    modelProperties: {\n      documentCount: {\n        serializedName: \"documentsCount\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      validDocumentCount: {\n        serializedName: \"validDocumentsCount\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      erroneousDocumentCount: {\n        serializedName: \"erroneousDocumentsCount\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      transactionCount: {\n        serializedName: \"transactionsCount\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const JobMetadata: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"JobMetadata\",\n    modelProperties: {\n      createdDateTime: {\n        serializedName: \"createdDateTime\",\n        required: true,\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      displayName: {\n        serializedName: \"displayName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      expirationDateTime: {\n        serializedName: \"expirationDateTime\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      jobId: {\n        serializedName: \"jobId\",\n        required: true,\n        type: {\n          name: \"Uuid\"\n        }\n      },\n      lastUpdateDateTime: {\n        serializedName: \"lastUpdateDateTime\",\n        required: true,\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      status: {\n        serializedName: \"status\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"notStarted\",\n            \"running\",\n            \"succeeded\",\n            \"failed\",\n            \"rejected\",\n            \"cancelled\",\n            \"cancelling\",\n            \"partiallyCompleted\",\n            \"partiallySucceeded\"\n          ]\n        }\n      }\n    }\n  }\n};\n\nexport const TasksState: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TasksState\",\n    modelProperties: {\n      tasks: {\n        serializedName: \"tasks\",\n        type: {\n          name: \"Composite\",\n          className: \"TasksStateTasks\"\n        }\n      }\n    }\n  }\n};\n\nexport const TasksStateTasks: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TasksStateTasks\",\n    modelProperties: {\n      details: {\n        serializedName: \"details\",\n        type: {\n          name: \"Composite\",\n          className: \"TaskState\"\n        }\n      },\n      completed: {\n        serializedName: \"completed\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      failed: {\n        serializedName: \"failed\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      inProgress: {\n        serializedName: \"inProgress\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      total: {\n        serializedName: \"total\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      entityRecognitionTasks: {\n        serializedName: \"entityRecognitionTasks\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"TasksStateTasksEntityRecognitionTasksItem\"\n            }\n          }\n        }\n      },\n      entityRecognitionPiiTasks: {\n        serializedName: \"entityRecognitionPiiTasks\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"TasksStateTasksEntityRecognitionPiiTasksItem\"\n            }\n          }\n        }\n      },\n      keyPhraseExtractionTasks: {\n        serializedName: \"keyPhraseExtractionTasks\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"TasksStateTasksKeyPhraseExtractionTasksItem\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const TaskState: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TaskState\",\n    modelProperties: {\n      lastUpdateDateTime: {\n        serializedName: \"lastUpdateDateTime\",\n        required: true,\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      status: {\n        serializedName: \"status\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"notStarted\",\n            \"running\",\n            \"succeeded\",\n            \"failed\",\n            \"rejected\",\n            \"cancelled\",\n            \"cancelling\",\n            \"partiallyCompleted\",\n            \"partiallySucceeded\"\n          ]\n        }\n      }\n    }\n  }\n};\n\nexport const Components15Gvwi3SchemasTasksstatePropertiesTasksPropertiesEntityrecognitiontasksItemsAllof1: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className:\n      \"Components15Gvwi3SchemasTasksstatePropertiesTasksPropertiesEntityrecognitiontasksItemsAllof1\",\n    modelProperties: {\n      results: {\n        serializedName: \"results\",\n        type: {\n          name: \"Composite\",\n          className: \"EntitiesResult\"\n        }\n      }\n    }\n  }\n};\n\nexport const EntitiesResult: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"EntitiesResult\",\n    modelProperties: {\n      documents: {\n        serializedName: \"documents\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentEntities\"\n            }\n          }\n        }\n      },\n      errors: {\n        serializedName: \"errors\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentError\"\n            }\n          }\n        }\n      },\n      statistics: {\n        serializedName: \"statistics\",\n        type: {\n          name: \"Composite\",\n          className: \"TextDocumentBatchStatistics\"\n        }\n      },\n      modelVersion: {\n        serializedName: \"modelVersion\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DocumentEntities: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DocumentEntities\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      entities: {\n        serializedName: \"entities\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Entity\"\n            }\n          }\n        }\n      },\n      warnings: {\n        serializedName: \"warnings\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"TextAnalyticsWarning\"\n            }\n          }\n        }\n      },\n      statistics: {\n        serializedName: \"statistics\",\n        type: {\n          name: \"Composite\",\n          className: \"TextDocumentStatistics\"\n        }\n      }\n    }\n  }\n};\n\nexport const Entity: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Entity\",\n    modelProperties: {\n      text: {\n        serializedName: \"text\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      category: {\n        serializedName: \"category\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      subCategory: {\n        serializedName: \"subcategory\",\n        type: {\n          name: \"String\"\n        }\n      },\n      offset: {\n        serializedName: \"offset\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      confidenceScore: {\n        serializedName: \"confidenceScore\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const TextAnalyticsWarning: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TextAnalyticsWarning\",\n    modelProperties: {\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      message: {\n        serializedName: \"message\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TextDocumentStatistics: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TextDocumentStatistics\",\n    modelProperties: {\n      characterCount: {\n        serializedName: \"charactersCount\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      transactionCount: {\n        serializedName: \"transactionsCount\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const DocumentError: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DocumentError\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      error: {\n        serializedName: \"error\",\n        type: {\n          name: \"Composite\",\n          className: \"TextAnalyticsError\"\n        }\n      }\n    }\n  }\n};\n\nexport const Components15X8E9LSchemasTasksstatePropertiesTasksPropertiesEntityrecognitionpiitasksItemsAllof1: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className:\n      \"Components15X8E9LSchemasTasksstatePropertiesTasksPropertiesEntityrecognitionpiitasksItemsAllof1\",\n    modelProperties: {\n      results: {\n        serializedName: \"results\",\n        type: {\n          name: \"Composite\",\n          className: \"PiiResult\"\n        }\n      }\n    }\n  }\n};\n\nexport const PiiResult: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PiiResult\",\n    modelProperties: {\n      documents: {\n        serializedName: \"documents\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"PiiDocumentEntities\"\n            }\n          }\n        }\n      },\n      errors: {\n        serializedName: \"errors\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentError\"\n            }\n          }\n        }\n      },\n      statistics: {\n        serializedName: \"statistics\",\n        type: {\n          name: \"Composite\",\n          className: \"TextDocumentBatchStatistics\"\n        }\n      },\n      modelVersion: {\n        serializedName: \"modelVersion\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PiiDocumentEntities: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PiiDocumentEntities\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      redactedText: {\n        serializedName: \"redactedText\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      entities: {\n        serializedName: \"entities\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Entity\"\n            }\n          }\n        }\n      },\n      warnings: {\n        serializedName: \"warnings\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"TextAnalyticsWarning\"\n            }\n          }\n        }\n      },\n      statistics: {\n        serializedName: \"statistics\",\n        type: {\n          name: \"Composite\",\n          className: \"TextDocumentStatistics\"\n        }\n      }\n    }\n  }\n};\n\nexport const Components1D9IzucSchemasTasksstatePropertiesTasksPropertiesKeyphraseextractiontasksItemsAllof1: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className:\n      \"Components1D9IzucSchemasTasksstatePropertiesTasksPropertiesKeyphraseextractiontasksItemsAllof1\",\n    modelProperties: {\n      results: {\n        serializedName: \"results\",\n        type: {\n          name: \"Composite\",\n          className: \"KeyPhraseResult\"\n        }\n      }\n    }\n  }\n};\n\nexport const KeyPhraseResult: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"KeyPhraseResult\",\n    modelProperties: {\n      documents: {\n        serializedName: \"documents\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentKeyPhrases\"\n            }\n          }\n        }\n      },\n      errors: {\n        serializedName: \"errors\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentError\"\n            }\n          }\n        }\n      },\n      statistics: {\n        serializedName: \"statistics\",\n        type: {\n          name: \"Composite\",\n          className: \"TextDocumentBatchStatistics\"\n        }\n      },\n      modelVersion: {\n        serializedName: \"modelVersion\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DocumentKeyPhrases: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DocumentKeyPhrases\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      keyPhrases: {\n        serializedName: \"keyPhrases\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      warnings: {\n        serializedName: \"warnings\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"TextAnalyticsWarning\"\n            }\n          }\n        }\n      },\n      statistics: {\n        serializedName: \"statistics\",\n        type: {\n          name: \"Composite\",\n          className: \"TextDocumentStatistics\"\n        }\n      }\n    }\n  }\n};\n\nexport const Pagination: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Pagination\",\n    modelProperties: {\n      nextLink: {\n        serializedName: \"@nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const HealthcareResult: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HealthcareResult\",\n    modelProperties: {\n      documents: {\n        serializedName: \"documents\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentHealthcareEntities\"\n            }\n          }\n        }\n      },\n      errors: {\n        serializedName: \"errors\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentError\"\n            }\n          }\n        }\n      },\n      statistics: {\n        serializedName: \"statistics\",\n        type: {\n          name: \"Composite\",\n          className: \"TextDocumentBatchStatistics\"\n        }\n      },\n      modelVersion: {\n        serializedName: \"modelVersion\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DocumentHealthcareEntities: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DocumentHealthcareEntities\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      entities: {\n        serializedName: \"entities\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"HealthcareEntity\"\n            }\n          }\n        }\n      },\n      relations: {\n        serializedName: \"relations\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"HealthcareRelation\"\n            }\n          }\n        }\n      },\n      warnings: {\n        serializedName: \"warnings\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"TextAnalyticsWarning\"\n            }\n          }\n        }\n      },\n      statistics: {\n        serializedName: \"statistics\",\n        type: {\n          name: \"Composite\",\n          className: \"TextDocumentStatistics\"\n        }\n      }\n    }\n  }\n};\n\nexport const HealthcareEntityLink: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HealthcareEntityLink\",\n    modelProperties: {\n      dataSource: {\n        serializedName: \"dataSource\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const HealthcareRelation: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HealthcareRelation\",\n    modelProperties: {\n      relationType: {\n        serializedName: \"relationType\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      bidirectional: {\n        serializedName: \"bidirectional\",\n        required: true,\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      target: {\n        serializedName: \"target\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const EntityLinkingResult: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"EntityLinkingResult\",\n    modelProperties: {\n      documents: {\n        serializedName: \"documents\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentLinkedEntities\"\n            }\n          }\n        }\n      },\n      errors: {\n        serializedName: \"errors\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentError\"\n            }\n          }\n        }\n      },\n      statistics: {\n        serializedName: \"statistics\",\n        type: {\n          name: \"Composite\",\n          className: \"TextDocumentBatchStatistics\"\n        }\n      },\n      modelVersion: {\n        serializedName: \"modelVersion\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DocumentLinkedEntities: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DocumentLinkedEntities\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      entities: {\n        serializedName: \"entities\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"LinkedEntity\"\n            }\n          }\n        }\n      },\n      warnings: {\n        serializedName: \"warnings\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"TextAnalyticsWarning\"\n            }\n          }\n        }\n      },\n      statistics: {\n        serializedName: \"statistics\",\n        type: {\n          name: \"Composite\",\n          className: \"TextDocumentStatistics\"\n        }\n      }\n    }\n  }\n};\n\nexport const LinkedEntity: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"LinkedEntity\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      matches: {\n        serializedName: \"matches\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Match\"\n            }\n          }\n        }\n      },\n      language: {\n        serializedName: \"language\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      dataSourceEntityId: {\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      url: {\n        serializedName: \"url\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      dataSource: {\n        serializedName: \"dataSource\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      bingEntitySearchApiId: {\n        serializedName: \"bingId\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Match: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Match\",\n    modelProperties: {\n      confidenceScore: {\n        serializedName: \"confidenceScore\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      text: {\n        serializedName: \"text\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      offset: {\n        serializedName: \"offset\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const LanguageBatchInput: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"LanguageBatchInput\",\n    modelProperties: {\n      documents: {\n        serializedName: \"documents\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DetectLanguageInput\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const DetectLanguageInput: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DetectLanguageInput\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      text: {\n        serializedName: \"text\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      countryHint: {\n        serializedName: \"countryHint\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const LanguageResult: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"LanguageResult\",\n    modelProperties: {\n      documents: {\n        serializedName: \"documents\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentLanguage\"\n            }\n          }\n        }\n      },\n      errors: {\n        serializedName: \"errors\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentError\"\n            }\n          }\n        }\n      },\n      statistics: {\n        serializedName: \"statistics\",\n        type: {\n          name: \"Composite\",\n          className: \"TextDocumentBatchStatistics\"\n        }\n      },\n      modelVersion: {\n        serializedName: \"modelVersion\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DocumentLanguage: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DocumentLanguage\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      detectedLanguage: {\n        serializedName: \"detectedLanguage\",\n        type: {\n          name: \"Composite\",\n          className: \"DetectedLanguage\"\n        }\n      },\n      warnings: {\n        serializedName: \"warnings\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"TextAnalyticsWarning\"\n            }\n          }\n        }\n      },\n      statistics: {\n        serializedName: \"statistics\",\n        type: {\n          name: \"Composite\",\n          className: \"TextDocumentStatistics\"\n        }\n      }\n    }\n  }\n};\n\nexport const DetectedLanguage: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DetectedLanguage\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      iso6391Name: {\n        serializedName: \"iso6391Name\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      confidenceScore: {\n        serializedName: \"confidenceScore\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const SentimentResponse: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SentimentResponse\",\n    modelProperties: {\n      documents: {\n        serializedName: \"documents\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentSentiment\"\n            }\n          }\n        }\n      },\n      errors: {\n        serializedName: \"errors\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentError\"\n            }\n          }\n        }\n      },\n      statistics: {\n        serializedName: \"statistics\",\n        type: {\n          name: \"Composite\",\n          className: \"TextDocumentBatchStatistics\"\n        }\n      },\n      modelVersion: {\n        serializedName: \"modelVersion\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DocumentSentiment: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DocumentSentiment\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      sentiment: {\n        serializedName: \"sentiment\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"positive\", \"neutral\", \"negative\", \"mixed\"]\n        }\n      },\n      statistics: {\n        serializedName: \"statistics\",\n        type: {\n          name: \"Composite\",\n          className: \"TextDocumentStatistics\"\n        }\n      },\n      confidenceScores: {\n        serializedName: \"confidenceScores\",\n        type: {\n          name: \"Composite\",\n          className: \"SentimentConfidenceScores\"\n        }\n      },\n      sentenceSentiments: {\n        serializedName: \"sentences\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SentenceSentiment\"\n            }\n          }\n        }\n      },\n      warnings: {\n        serializedName: \"warnings\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"TextAnalyticsWarning\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const SentimentConfidenceScores: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SentimentConfidenceScores\",\n    modelProperties: {\n      positive: {\n        serializedName: \"positive\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      neutral: {\n        serializedName: \"neutral\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      negative: {\n        serializedName: \"negative\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const SentenceSentiment: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SentenceSentiment\",\n    modelProperties: {\n      text: {\n        serializedName: \"text\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      sentiment: {\n        serializedName: \"sentiment\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"positive\", \"neutral\", \"negative\"]\n        }\n      },\n      confidenceScores: {\n        serializedName: \"confidenceScores\",\n        type: {\n          name: \"Composite\",\n          className: \"SentimentConfidenceScores\"\n        }\n      },\n      offset: {\n        serializedName: \"offset\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      aspects: {\n        serializedName: \"aspects\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SentenceAspect\"\n            }\n          }\n        }\n      },\n      opinions: {\n        serializedName: \"opinions\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SentenceOpinion\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const SentenceAspect: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SentenceAspect\",\n    modelProperties: {\n      sentiment: {\n        serializedName: \"sentiment\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"positive\", \"mixed\", \"negative\"]\n        }\n      },\n      confidenceScores: {\n        serializedName: \"confidenceScores\",\n        type: {\n          name: \"Composite\",\n          className: \"AspectConfidenceScoreLabel\"\n        }\n      },\n      offset: {\n        serializedName: \"offset\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      text: {\n        serializedName: \"text\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      relations: {\n        serializedName: \"relations\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"AspectRelation\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const AspectConfidenceScoreLabel: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AspectConfidenceScoreLabel\",\n    modelProperties: {\n      positive: {\n        serializedName: \"positive\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      negative: {\n        serializedName: \"negative\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const AspectRelation: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AspectRelation\",\n    modelProperties: {\n      relationType: {\n        serializedName: \"relationType\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"opinion\", \"aspect\"]\n        }\n      },\n      ref: {\n        serializedName: \"ref\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SentenceOpinion: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SentenceOpinion\",\n    modelProperties: {\n      sentiment: {\n        serializedName: \"sentiment\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"positive\", \"mixed\", \"negative\"]\n        }\n      },\n      confidenceScores: {\n        serializedName: \"confidenceScores\",\n        type: {\n          name: \"Composite\",\n          className: \"AspectConfidenceScoreLabel\"\n        }\n      },\n      offset: {\n        serializedName: \"offset\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      text: {\n        serializedName: \"text\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      isNegated: {\n        serializedName: \"isNegated\",\n        required: true,\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const AnalyzeBatchInput: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AnalyzeBatchInput\",\n    modelProperties: {\n      ...JobDescriptor.type.modelProperties,\n      ...JobManifest.type.modelProperties,\n      analysisInput: {\n        serializedName: \"analysisInput\",\n        type: {\n          name: \"Composite\",\n          className: \"MultiLanguageBatchInput\"\n        }\n      }\n    }\n  }\n};\n\nexport const AnalyzeJobState: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AnalyzeJobState\",\n    modelProperties: {\n      ...JobMetadata.type.modelProperties,\n      ...TasksState.type.modelProperties,\n      ...Pagination.type.modelProperties,\n      errors: {\n        serializedName: \"errors\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"TextAnalyticsError\"\n            }\n          }\n        }\n      },\n      statistics: {\n        serializedName: \"statistics\",\n        type: {\n          name: \"Composite\",\n          className: \"TextDocumentBatchStatistics\"\n        }\n      }\n    }\n  }\n};\n\nexport const HealthcareJobState: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HealthcareJobState\",\n    modelProperties: {\n      ...JobMetadata.type.modelProperties,\n      ...Pagination.type.modelProperties,\n      results: {\n        serializedName: \"results\",\n        type: {\n          name: \"Composite\",\n          className: \"HealthcareResult\"\n        }\n      },\n      errors: {\n        serializedName: \"errors\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"TextAnalyticsError\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const TasksStateTasksEntityRecognitionTasksItem: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TasksStateTasksEntityRecognitionTasksItem\",\n    modelProperties: {\n      ...TaskState.type.modelProperties,\n      ...Components15Gvwi3SchemasTasksstatePropertiesTasksPropertiesEntityrecognitiontasksItemsAllof1\n        .type.modelProperties\n    }\n  }\n};\n\nexport const TasksStateTasksEntityRecognitionPiiTasksItem: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TasksStateTasksEntityRecognitionPiiTasksItem\",\n    modelProperties: {\n      ...TaskState.type.modelProperties,\n      ...Components15X8E9LSchemasTasksstatePropertiesTasksPropertiesEntityrecognitionpiitasksItemsAllof1\n        .type.modelProperties\n    }\n  }\n};\n\nexport const TasksStateTasksKeyPhraseExtractionTasksItem: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TasksStateTasksKeyPhraseExtractionTasksItem\",\n    modelProperties: {\n      ...TaskState.type.modelProperties,\n      ...Components1D9IzucSchemasTasksstatePropertiesTasksPropertiesKeyphraseextractiontasksItemsAllof1\n        .type.modelProperties\n    }\n  }\n};\n\nexport const TasksStateTasksDetails: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TasksStateTasksDetails\",\n    modelProperties: {\n      ...TaskState.type.modelProperties\n    }\n  }\n};\n\nexport const HealthcareEntity: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HealthcareEntity\",\n    modelProperties: {\n      ...Entity.type.modelProperties,\n      isNegated: {\n        serializedName: \"isNegated\",\n        required: true,\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      links: {\n        serializedName: \"links\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"HealthcareEntityLink\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const GeneratedClientAnalyzeHeaders: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GeneratedClientAnalyzeHeaders\",\n    modelProperties: {\n      operationLocation: {\n        serializedName: \"operation-location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const GeneratedClientCancelHealthJobHeaders: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GeneratedClientCancelHealthJobHeaders\",\n    modelProperties: {\n      operationLocation: {\n        serializedName: \"operation-location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const GeneratedClientHealthHeaders: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GeneratedClientHealthHeaders\",\n    modelProperties: {\n      operationLocation: {\n        serializedName: \"operation-location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport {\n  OperationParameter,\n  OperationURLParameter,\n  OperationQueryParameter\n} from \"@azure/core-http\";\nimport {\n  AnalyzeBatchInput as AnalyzeBatchInputMapper,\n  MultiLanguageBatchInput as MultiLanguageBatchInputMapper,\n  LanguageBatchInput as LanguageBatchInputMapper\n} from \"../models/mappers\";\n\nexport const contentType: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const body: OperationParameter = {\n  parameterPath: [\"options\", \"body\"],\n  mapper: AnalyzeBatchInputMapper\n};\n\nexport const accept: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/json, text/json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const endpoint: OperationURLParameter = {\n  parameterPath: \"endpoint\",\n  mapper: {\n    serializedName: \"Endpoint\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\n\nexport const accept1: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/json, text/json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const jobId: OperationURLParameter = {\n  parameterPath: \"jobId\",\n  mapper: {\n    serializedName: \"jobId\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const includeStatistics: OperationQueryParameter = {\n  parameterPath: [\"options\", \"includeStatistics\"],\n  mapper: {\n    serializedName: \"showStats\",\n    type: {\n      name: \"Boolean\"\n    }\n  }\n};\n\nexport const top: OperationQueryParameter = {\n  parameterPath: [\"options\", \"top\"],\n  mapper: {\n    defaultValue: 20,\n    constraints: {\n      InclusiveMaximum: 50,\n      InclusiveMinimum: 1\n    },\n    serializedName: \"$top\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\n\nexport const skip: OperationQueryParameter = {\n  parameterPath: [\"options\", \"skip\"],\n  mapper: {\n    constraints: {\n      InclusiveMinimum: 0\n    },\n    serializedName: \"$skip\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\n\nexport const jobId1: OperationURLParameter = {\n  parameterPath: \"jobId\",\n  mapper: {\n    serializedName: \"jobId\",\n    required: true,\n    type: {\n      name: \"Uuid\"\n    }\n  }\n};\n\nexport const input: OperationParameter = {\n  parameterPath: \"input\",\n  mapper: MultiLanguageBatchInputMapper\n};\n\nexport const modelVersion: OperationQueryParameter = {\n  parameterPath: [\"options\", \"modelVersion\"],\n  mapper: {\n    serializedName: \"model-version\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const stringIndexType: OperationQueryParameter = {\n  parameterPath: [\"options\", \"stringIndexType\"],\n  mapper: {\n    defaultValue: \"TextElements_v8\",\n    serializedName: \"stringIndexType\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const domain: OperationQueryParameter = {\n  parameterPath: [\"options\", \"domain\"],\n  mapper: {\n    serializedName: \"domain\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const input1: OperationParameter = {\n  parameterPath: \"input\",\n  mapper: LanguageBatchInputMapper\n};\n\nexport const opinionMining: OperationQueryParameter = {\n  parameterPath: [\"options\", \"opinionMining\"],\n  mapper: {\n    serializedName: \"opinionMining\",\n    type: {\n      name: \"Boolean\"\n    }\n  }\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport { GeneratedClientOptionalParams } from \"./models\";\n\nconst packageName = \"@azure/ai-text-analytics\";\nconst packageVersion = \"5.1.0-beta.3\";\n\nexport class GeneratedClientContext extends coreHttp.ServiceClient {\n  endpoint: string;\n\n  /**\n   * Initializes a new instance of the GeneratedClientContext class.\n   * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:\n   *                 https://westus.api.cognitive.microsoft.com).\n   * @param options The parameter options\n   */\n  constructor(endpoint: string, options?: GeneratedClientOptionalParams) {\n    if (endpoint === undefined) {\n      throw new Error(\"'endpoint' cannot be null\");\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n\n    if (!options.userAgent) {\n      const defaultUserAgent = coreHttp.getDefaultUserAgentValue();\n      options.userAgent = `${packageName}/${packageVersion} ${defaultUserAgent}`;\n    }\n\n    super(undefined, options);\n\n    this.requestContentType = \"application/json; charset=utf-8\";\n\n    this.baseUri =\n      options.endpoint || \"{Endpoint}/text/analytics/v3.1-preview.3\";\n\n    // Parameter assignments\n    this.endpoint = endpoint;\n  }\n}\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Parameters from \"./models/parameters\";\nimport * as Mappers from \"./models/mappers\";\nimport { GeneratedClientContext } from \"./generatedClientContext\";\nimport {\n  GeneratedClientOptionalParams,\n  GeneratedClientAnalyzeOptionalParams,\n  GeneratedClientAnalyzeResponse,\n  GeneratedClientAnalyzeStatusOptionalParams,\n  GeneratedClientAnalyzeStatusResponse,\n  GeneratedClientHealthStatusOptionalParams,\n  GeneratedClientHealthStatusResponse,\n  GeneratedClientCancelHealthJobResponse,\n  MultiLanguageBatchInput,\n  GeneratedClientHealthOptionalParams,\n  GeneratedClientHealthResponse,\n  GeneratedClientEntitiesRecognitionGeneralOptionalParams,\n  GeneratedClientEntitiesRecognitionGeneralResponse,\n  GeneratedClientEntitiesRecognitionPiiOptionalParams,\n  GeneratedClientEntitiesRecognitionPiiResponse,\n  GeneratedClientEntitiesLinkingOptionalParams,\n  GeneratedClientEntitiesLinkingResponse,\n  GeneratedClientKeyPhrasesOptionalParams,\n  GeneratedClientKeyPhrasesResponse,\n  LanguageBatchInput,\n  GeneratedClientLanguagesOptionalParams,\n  GeneratedClientLanguagesResponse,\n  GeneratedClientSentimentOptionalParams,\n  GeneratedClientSentimentResponse\n} from \"./models\";\n\nexport class GeneratedClient extends GeneratedClientContext {\n  /**\n   * Initializes a new instance of the GeneratedClient class.\n   * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:\n   *                 https://westus.api.cognitive.microsoft.com).\n   * @param options The parameter options\n   */\n  constructor(endpoint: string, options?: GeneratedClientOptionalParams) {\n    super(endpoint, options);\n  }\n\n  /**\n   * Submit a collection of text documents for analysis. Specify one or more unique tasks to be executed.\n   * @param options The options parameters.\n   */\n  analyze(\n    options?: GeneratedClientAnalyzeOptionalParams\n  ): Promise<GeneratedClientAnalyzeResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.sendOperationRequest(\n      { options: operationOptions },\n      analyzeOperationSpec\n    ) as Promise<GeneratedClientAnalyzeResponse>;\n  }\n\n  /**\n   * Get the status of an analysis job.  A job may consist of one or more tasks.  Once all tasks are\n   * completed, the job will transition to the completed state and results will be available for each\n   * task.\n   * @param jobId Job ID for Analyze\n   * @param options The options parameters.\n   */\n  analyzeStatus(\n    jobId: string,\n    options?: GeneratedClientAnalyzeStatusOptionalParams\n  ): Promise<GeneratedClientAnalyzeStatusResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.sendOperationRequest(\n      { jobId, options: operationOptions },\n      analyzeStatusOperationSpec\n    ) as Promise<GeneratedClientAnalyzeStatusResponse>;\n  }\n\n  /**\n   * Get details of the healthcare prediction job specified by the jobId.\n   * @param jobId Job ID\n   * @param options The options parameters.\n   */\n  healthStatus(\n    jobId: string,\n    options?: GeneratedClientHealthStatusOptionalParams\n  ): Promise<GeneratedClientHealthStatusResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.sendOperationRequest(\n      { jobId, options: operationOptions },\n      healthStatusOperationSpec\n    ) as Promise<GeneratedClientHealthStatusResponse>;\n  }\n\n  /**\n   * Cancel healthcare prediction job.\n   * @param jobId Job ID\n   * @param options The options parameters.\n   */\n  cancelHealthJob(\n    jobId: string,\n    options?: coreHttp.OperationOptions\n  ): Promise<GeneratedClientCancelHealthJobResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.sendOperationRequest(\n      { jobId, options: operationOptions },\n      cancelHealthJobOperationSpec\n    ) as Promise<GeneratedClientCancelHealthJobResponse>;\n  }\n\n  /**\n   * Start a healthcare analysis job to recognize healthcare related entities (drugs, conditions,\n   * symptoms, etc) and their relations.\n   * @param input Collection of documents to analyze.\n   * @param options The options parameters.\n   */\n  health(\n    input: MultiLanguageBatchInput,\n    options?: GeneratedClientHealthOptionalParams\n  ): Promise<GeneratedClientHealthResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.sendOperationRequest(\n      { input, options: operationOptions },\n      healthOperationSpec\n    ) as Promise<GeneratedClientHealthResponse>;\n  }\n\n  /**\n   * The API returns a list of general named entities in a given document. For the list of supported\n   * entity types, check <a href=\"https://aka.ms/taner\">Supported Entity Types in Text Analytics API</a>.\n   * See the <a href=\"https://aka.ms/talangs\">Supported languages in Text Analytics API</a> for the list\n   * of enabled languages.\n   * @param input Collection of documents to analyze.\n   * @param options The options parameters.\n   */\n  entitiesRecognitionGeneral(\n    input: MultiLanguageBatchInput,\n    options?: GeneratedClientEntitiesRecognitionGeneralOptionalParams\n  ): Promise<GeneratedClientEntitiesRecognitionGeneralResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.sendOperationRequest(\n      { input, options: operationOptions },\n      entitiesRecognitionGeneralOperationSpec\n    ) as Promise<GeneratedClientEntitiesRecognitionGeneralResponse>;\n  }\n\n  /**\n   * The API returns a list of entities with personal information (\\\"SSN\\\", \\\"Bank Account\\\" etc) in the\n   * document. For the list of supported entity types, check <a href=\"https://aka.ms/tanerpii\">Supported\n   * Entity Types in Text Analytics API</a>. See the <a href=\"https://aka.ms/talangs\">Supported languages\n   * in Text Analytics API</a> for the list of enabled languages.\n   *\n   * @param input Collection of documents to analyze.\n   * @param options The options parameters.\n   */\n  entitiesRecognitionPii(\n    input: MultiLanguageBatchInput,\n    options?: GeneratedClientEntitiesRecognitionPiiOptionalParams\n  ): Promise<GeneratedClientEntitiesRecognitionPiiResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.sendOperationRequest(\n      { input, options: operationOptions },\n      entitiesRecognitionPiiOperationSpec\n    ) as Promise<GeneratedClientEntitiesRecognitionPiiResponse>;\n  }\n\n  /**\n   * The API returns a list of recognized entities with links to a well-known knowledge base. See the <a\n   * href=\"https://aka.ms/talangs\">Supported languages in Text Analytics API</a> for the list of enabled\n   * languages.\n   * @param input Collection of documents to analyze.\n   * @param options The options parameters.\n   */\n  entitiesLinking(\n    input: MultiLanguageBatchInput,\n    options?: GeneratedClientEntitiesLinkingOptionalParams\n  ): Promise<GeneratedClientEntitiesLinkingResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.sendOperationRequest(\n      { input, options: operationOptions },\n      entitiesLinkingOperationSpec\n    ) as Promise<GeneratedClientEntitiesLinkingResponse>;\n  }\n\n  /**\n   * The API returns a list of strings denoting the key phrases in the input text. See the <a\n   * href=\"https://aka.ms/talangs\">Supported languages in Text Analytics API</a> for the list of enabled\n   * languages.\n   * @param input Collection of documents to analyze.\n   * @param options The options parameters.\n   */\n  keyPhrases(\n    input: MultiLanguageBatchInput,\n    options?: GeneratedClientKeyPhrasesOptionalParams\n  ): Promise<GeneratedClientKeyPhrasesResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.sendOperationRequest(\n      { input, options: operationOptions },\n      keyPhrasesOperationSpec\n    ) as Promise<GeneratedClientKeyPhrasesResponse>;\n  }\n\n  /**\n   * The API returns the detected language and a numeric score between 0 and 1. Scores close to 1\n   * indicate 100% certainty that the identified language is true. See the <a\n   * href=\"https://aka.ms/talangs\">Supported languages in Text Analytics API</a> for the list of enabled\n   * languages.\n   * @param input Collection of documents to analyze for language endpoint.\n   * @param options The options parameters.\n   */\n  languages(\n    input: LanguageBatchInput,\n    options?: GeneratedClientLanguagesOptionalParams\n  ): Promise<GeneratedClientLanguagesResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.sendOperationRequest(\n      { input, options: operationOptions },\n      languagesOperationSpec\n    ) as Promise<GeneratedClientLanguagesResponse>;\n  }\n\n  /**\n   * The API returns a detailed sentiment analysis for the input text. The analysis is done in multiple\n   * levels of granularity, start from the a document level, down to sentence and key terms (aspects) and\n   * opinions.\n   * @param input Collection of documents to analyze.\n   * @param options The options parameters.\n   */\n  sentiment(\n    input: MultiLanguageBatchInput,\n    options?: GeneratedClientSentimentOptionalParams\n  ): Promise<GeneratedClientSentimentResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.sendOperationRequest(\n      { input, options: operationOptions },\n      sentimentOperationSpec\n    ) as Promise<GeneratedClientSentimentResponse>;\n  }\n}\n// Operation Specifications\n\nconst serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);\n\nconst analyzeOperationSpec: coreHttp.OperationSpec = {\n  path: \"/analyze\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {\n      headersMapper: Mappers.GeneratedClientAnalyzeHeaders\n    },\n    400: {\n      bodyMapper: Mappers.ErrorResponse,\n      isError: true\n    },\n    500: {\n      bodyMapper: Mappers.ErrorResponse,\n      isError: true\n    }\n  },\n  requestBody: Parameters.body,\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst analyzeStatusOperationSpec: coreHttp.OperationSpec = {\n  path: \"/analyze/jobs/{jobId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AnalyzeJobState\n    },\n    404: {\n      bodyMapper: Mappers.ErrorResponse,\n      isError: true\n    },\n    500: {\n      bodyMapper: Mappers.ErrorResponse,\n      isError: true\n    }\n  },\n  queryParameters: [\n    Parameters.includeStatistics,\n    Parameters.top,\n    Parameters.skip\n  ],\n  urlParameters: [Parameters.endpoint, Parameters.jobId],\n  headerParameters: [Parameters.accept1],\n  serializer\n};\nconst healthStatusOperationSpec: coreHttp.OperationSpec = {\n  path: \"/entities/health/jobs/{jobId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.HealthcareJobState\n    },\n    404: {\n      bodyMapper: Mappers.ErrorResponse,\n      isError: true\n    },\n    500: {\n      bodyMapper: Mappers.ErrorResponse,\n      isError: true\n    }\n  },\n  queryParameters: [\n    Parameters.includeStatistics,\n    Parameters.top,\n    Parameters.skip\n  ],\n  urlParameters: [Parameters.endpoint, Parameters.jobId1],\n  headerParameters: [Parameters.accept1],\n  serializer\n};\nconst cancelHealthJobOperationSpec: coreHttp.OperationSpec = {\n  path: \"/entities/health/jobs/{jobId}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    202: {\n      headersMapper: Mappers.GeneratedClientCancelHealthJobHeaders\n    },\n    404: {\n      bodyMapper: Mappers.ErrorResponse,\n      isError: true\n    },\n    500: {\n      bodyMapper: Mappers.ErrorResponse,\n      isError: true\n    }\n  },\n  urlParameters: [Parameters.endpoint, Parameters.jobId1],\n  headerParameters: [Parameters.accept1],\n  serializer\n};\nconst healthOperationSpec: coreHttp.OperationSpec = {\n  path: \"/entities/health/jobs\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {\n      headersMapper: Mappers.GeneratedClientHealthHeaders\n    },\n    400: {\n      bodyMapper: Mappers.ErrorResponse,\n      isError: true\n    },\n    500: {\n      bodyMapper: Mappers.ErrorResponse,\n      isError: true\n    }\n  },\n  requestBody: Parameters.input,\n  queryParameters: [Parameters.modelVersion, Parameters.stringIndexType],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst entitiesRecognitionGeneralOperationSpec: coreHttp.OperationSpec = {\n  path: \"/entities/recognition/general\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EntitiesResult\n    },\n    400: {\n      bodyMapper: Mappers.ErrorResponse,\n      isError: true\n    },\n    500: {\n      bodyMapper: Mappers.ErrorResponse,\n      isError: true\n    }\n  },\n  requestBody: Parameters.input,\n  queryParameters: [\n    Parameters.includeStatistics,\n    Parameters.modelVersion,\n    Parameters.stringIndexType\n  ],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst entitiesRecognitionPiiOperationSpec: coreHttp.OperationSpec = {\n  path: \"/entities/recognition/pii\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PiiResult\n    },\n    400: {\n      bodyMapper: Mappers.ErrorResponse,\n      isError: true\n    },\n    500: {\n      bodyMapper: Mappers.ErrorResponse,\n      isError: true\n    }\n  },\n  requestBody: Parameters.input,\n  queryParameters: [\n    Parameters.includeStatistics,\n    Parameters.modelVersion,\n    Parameters.stringIndexType,\n    Parameters.domain\n  ],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst entitiesLinkingOperationSpec: coreHttp.OperationSpec = {\n  path: \"/entities/linking\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EntityLinkingResult\n    },\n    400: {\n      bodyMapper: Mappers.ErrorResponse,\n      isError: true\n    },\n    500: {\n      bodyMapper: Mappers.ErrorResponse,\n      isError: true\n    }\n  },\n  requestBody: Parameters.input,\n  queryParameters: [\n    Parameters.includeStatistics,\n    Parameters.modelVersion,\n    Parameters.stringIndexType\n  ],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst keyPhrasesOperationSpec: coreHttp.OperationSpec = {\n  path: \"/keyPhrases\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyPhraseResult\n    },\n    400: {\n      bodyMapper: Mappers.ErrorResponse,\n      isError: true\n    },\n    500: {\n      bodyMapper: Mappers.ErrorResponse,\n      isError: true\n    }\n  },\n  requestBody: Parameters.input,\n  queryParameters: [Parameters.includeStatistics, Parameters.modelVersion],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst languagesOperationSpec: coreHttp.OperationSpec = {\n  path: \"/languages\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.LanguageResult\n    },\n    400: {\n      bodyMapper: Mappers.ErrorResponse,\n      isError: true\n    },\n    500: {\n      bodyMapper: Mappers.ErrorResponse,\n      isError: true\n    }\n  },\n  requestBody: Parameters.input1,\n  queryParameters: [Parameters.includeStatistics, Parameters.modelVersion],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst sentimentOperationSpec: coreHttp.OperationSpec = {\n  path: \"/sentiment\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SentimentResponse\n    },\n    400: {\n      bodyMapper: Mappers.ErrorResponse,\n      isError: true\n    },\n    500: {\n      bodyMapper: Mappers.ErrorResponse,\n      isError: true\n    }\n  },\n  requestBody: Parameters.input,\n  queryParameters: [\n    Parameters.includeStatistics,\n    Parameters.modelVersion,\n    Parameters.stringIndexType,\n    Parameters.opinionMining\n  ],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { createClientLogger } from \"@azure/logger\";\n\n/**\n * The @azure/logger configuration for this package.\n */\nexport const logger = createClientLogger(\"ai-text-analytics\");\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { RestError } from \"@azure/core-http\";\nimport { URL, URLSearchParams } from \"./utils/url\";\nimport { StringIndexType, StringIndexTypeResponse } from \"./generated/models\";\nimport { logger } from \"./logger\";\n\nexport interface IdObject {\n  id: string;\n}\n\n/**\n * Given a sorted array of input objects (with a unique ID) and an unsorted array of results,\n * return a sorted array of results.\n *\n * @ignore\n * @param sortedArray An array of entries sorted by `id`\n * @param unsortedArray An array of entries that contain `id` but are not sorted\n */\nexport function sortResponseIdObjects<T extends IdObject, U extends IdObject>(\n  sortedArray: T[],\n  unsortedArray: U[]\n): U[] {\n  const unsortedMap = new Map<string, U>();\n  for (const item of unsortedArray) {\n    unsortedMap.set(item.id, item);\n  }\n\n  if (unsortedArray.length !== sortedArray.length) {\n    const ordinal = unsortedArray.length > sortedArray.length ? \"more\" : \"fewer\";\n    logger.warning(\n      `The service returned ${ordinal} responses than inputs. Some errors may be treated as fatal.`\n    );\n  }\n\n  const result: U[] = [];\n  for (const sortedItem of sortedArray) {\n    const item = unsortedMap.get(sortedItem.id);\n    if (item) {\n      result.push(item);\n    }\n  }\n  return result;\n}\n\nexport interface OpinionIndex {\n  document: number;\n  sentence: number;\n  opinion: number;\n}\n\nexport function findOpinionIndex(pointer: string): OpinionIndex {\n  const regex = new RegExp(/#\\/documents\\/(\\d+)\\/sentences\\/(\\d+)\\/opinions\\/(\\d+)/);\n  const res = regex.exec(pointer);\n  if (res !== null) {\n    const opinionIndex: OpinionIndex = {\n      document: parseInt(res[1]),\n      sentence: parseInt(res[2]),\n      opinion: parseInt(res[3])\n    };\n    return opinionIndex;\n  } else {\n    throw new Error(`Pointer \"${pointer}\" is not a valid opinion pointer`);\n  }\n}\n\nconst jsEncodingUnit = \"Utf16CodeUnit\";\n\nexport function addStrEncodingParam<T>(options: T): T & { stringIndexType: StringIndexType } {\n  return { ...options, stringIndexType: jsEncodingUnit };\n}\n\nexport function addEncodingParamToTask<X>(\n  task: X & { stringIndexType?: StringIndexTypeResponse }\n): X & { stringIndexType?: StringIndexTypeResponse } {\n  task.stringIndexType = jsEncodingUnit;\n  return task;\n}\n\nexport function AddParamsToTask<X>(task: X): { parameters?: X } {\n  return { parameters: task };\n}\n\nexport interface PageParam {\n  top: number;\n  skip: number;\n}\n\nexport function nextLinkToTopAndSkip(nextLink: string): PageParam {\n  const url = new URL(nextLink);\n  const searchParams = new URLSearchParams(url.searchParams);\n  let top: number;\n  if (searchParams.has(\"$top\")) {\n    top = parseInt(searchParams.get(\"$top\")!);\n  } else {\n    throw new Error(`nextLink URL does not have the $top param: ${nextLink}`);\n  }\n  let skip: number;\n  if (searchParams.has(\"$skip\")) {\n    skip = parseInt(searchParams.get(\"$skip\")!);\n  } else {\n    throw new Error(`nextLink URL does not have the $skip param: ${nextLink}`);\n  }\n  return {\n    skip: skip,\n    top: top\n  };\n}\n\nexport function getJobID(operationLocation: string): string {\n  const lastSlashIndex = operationLocation.lastIndexOf(\"/\");\n  return operationLocation.substring(lastSlashIndex + 1);\n}\n\n/**\n * parses incoming errors from the service and if the inner error code is\n * InvalidDocumentBatch, it exposes that as the statusCode instead.\n * @param error the incoming error\n */\nexport function handleInvalidDocumentBatch(error: any): any {\n  const innerCode = error.response?.parsedBody?.error?.innererror?.code;\n  const innerMessage = error.response?.parsedBody?.error?.innererror?.message;\n  return innerCode === \"InvalidDocumentBatch\"\n    ? new RestError(innerMessage, innerCode, error.statusCode)\n    : error;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  TextDocumentStatistics,\n  TextAnalyticsError as GeneratedTextAnalyticsErrorModel,\n  InnerError,\n  ErrorCodeValue,\n  InnerErrorCodeValue,\n  TextAnalyticsWarning,\n  DocumentError,\n  TextDocumentBatchStatistics,\n  TextDocumentInput\n} from \"./generated/models\";\nimport { sortResponseIdObjects } from \"./util\";\n\n/**\n * The result of a text analytics operation on a single input document.\n */\nexport type TextAnalyticsResult = TextAnalyticsSuccessResult | TextAnalyticsErrorResult;\n\n/**\n * An Error Code returned from the Text Analytics service. Possible\n * values include:\n *\n * For more information about the error, see the `message` property of the associated error.\n */\nexport type ErrorCode = ErrorCodeValue | InnerErrorCodeValue;\n\n/**\n * Type describing an error from the Text Analytics service\n */\nexport interface TextAnalyticsError {\n  /**\n   * A code describing the kind of error produced\n   */\n  readonly code: ErrorCode;\n  /**\n   * A message from the service explaining the error\n   */\n  readonly message: string;\n  /**\n   * The target of the particular error (for example, the name of an invalid parameter)\n   */\n  readonly target?: string;\n}\n\n/**\n * Base type for results of text analytics operations corresponding to a single\n * input document.\n */\nexport interface TextAnalyticsSuccessResult {\n  /**\n   * Unique, non-empty document identifier.\n   */\n  readonly id: string;\n\n  /**\n   * Statistics about the input document and how it was processed\n   * by the service. This property will have a value when includeStatistics is set to true\n   * in the client call.\n   */\n  readonly statistics?: TextDocumentStatistics;\n\n  /**\n   * An array of warning data corresponding to this document.\n   *\n   * If no warnings were returned, this array will be empty.\n   */\n  readonly warnings: TextAnalyticsWarning[];\n\n  /**\n   * Discriminant to determine if that this is an error result.\n   */\n  readonly error?: undefined;\n}\n\n/**\n * Base type for error results of text analytics operations corresponding to a\n * single document.\n */\nexport interface TextAnalyticsErrorResult {\n  /**\n   * Unique, non-empty document identifier.\n   */\n  readonly id: string;\n\n  /**\n   * The Error for this document result.\n   */\n  readonly error: TextAnalyticsError;\n}\n\nexport interface TextAnalyticsResultArray<T1 extends TextAnalyticsSuccessResult>\n  extends Array<T1 | TextAnalyticsErrorResult> {\n  /**\n   * Statistics about the input document batch and how it was processed\n   * by the service. This property will have a value when includeStatistics is set to true\n   * in the client call.\n   */\n  statistics?: TextDocumentBatchStatistics;\n  /**\n   * The version of the text analytics model used by this operation on this\n   * batch of input documents.\n   */\n  modelVersion: string;\n}\n\nexport interface TextAnalyticsResponse<T1 extends TextAnalyticsSuccessResult> {\n  /**\n   * Response by document\n   */\n  documents: T1[];\n  /**\n   * Errors by document id.\n   */\n  errors: DocumentError[];\n  /**\n   * if includeStatistics=true was specified in the request this field will contain information about the request payload.\n   */\n  statistics?: TextDocumentBatchStatistics;\n  /**\n   * This field indicates which model is used for scoring.\n   */\n  modelVersion: string;\n}\n\n/**\n * Helper function for converting nested service error into\n * the unified TextAnalyticsError\n */\nfunction intoTextAnalyticsError(\n  errorModel: GeneratedTextAnalyticsErrorModel | InnerError\n): TextAnalyticsError {\n  // Return the deepest error. This will always be at most\n  // one level for TextAnalytics\n  if (errorModel.innererror !== undefined) {\n    return intoTextAnalyticsError(errorModel.innererror);\n  }\n\n  return {\n    code: errorModel.code,\n    message: errorModel.message,\n    target: errorModel.target\n  };\n}\n\nexport function makeTextAnalyticsSuccessResult(\n  id: string,\n  warnings: TextAnalyticsWarning[],\n  statistics?: TextDocumentStatistics\n): TextAnalyticsSuccessResult {\n  return {\n    id,\n    statistics,\n    warnings\n  };\n}\n\nexport function makeTextAnalyticsErrorResult(\n  id: string,\n  error: GeneratedTextAnalyticsErrorModel\n): TextAnalyticsErrorResult {\n  return {\n    id,\n    error: intoTextAnalyticsError(error)\n  };\n}\n\n/**\n * combines successful and erroneous results into a single array of results and\n * sort them so that the IDs order match that of the input documents array.\n * @param input the array of documents sent to the service for processing.\n * @param response the response received from the service.\n */\nexport function combineSuccessfulAndErroneousDocuments<TSuccess extends TextAnalyticsSuccessResult>(\n  input: TextDocumentInput[],\n  response: TextAnalyticsResponse<TSuccess>\n): (TSuccess | TextAnalyticsErrorResult)[] {\n  return processAndCombineSuccessfulAndErroneousDocuments(input, response, (x) => x);\n}\n\n/**\n * combines successful and erroneous results into a single array of results and\n * sort them so that the IDs order match that of the input documents array.\n * @param input the array of documents sent to the service for processing.\n * @param response the response received from the service.\n * @param process a function to convert the results from one type to another.\n */\nexport function processAndCombineSuccessfulAndErroneousDocuments<\n  TSuccess extends TextAnalyticsSuccessResult,\n  T extends TextAnalyticsSuccessResult\n>(\n  input: TextDocumentInput[],\n  response: TextAnalyticsResponse<TSuccess>,\n  process: (doc: TSuccess) => T\n): (T | TextAnalyticsErrorResult)[] {\n  const unsortedResult = response.documents\n    .map((document): T | TextAnalyticsErrorResult => process(document))\n    .concat(\n      response.errors.map((error) => {\n        return makeTextAnalyticsErrorResult(error.id, error.error);\n      })\n    );\n  return sortResponseIdObjects(input, unsortedResult);\n}\n\n/**\n * combines successful and erroneous results into a single array of results and\n * sort them so that the IDs order match that of the input documents array. It\n * also attaches statistics and modelVersion to the returned array.\n * @param input the array of documents sent to the service for processing.\n * @param response the response received from the service.\n */\nexport function combineSuccessfulAndErroneousDocumentsWithStatisticsAndModelVersion<\n  TSuccess extends TextAnalyticsSuccessResult\n>(\n  input: TextDocumentInput[],\n  response: TextAnalyticsResponse<TSuccess>\n): TextAnalyticsResultArray<TSuccess> {\n  const sorted = combineSuccessfulAndErroneousDocuments(input, response);\n  return Object.assign(sorted, {\n    statistics: response.statistics,\n    modelVersion: response.modelVersion\n  });\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  makeTextAnalyticsSuccessResult,\n  TextAnalyticsSuccessResult,\n  TextAnalyticsErrorResult,\n  makeTextAnalyticsErrorResult\n} from \"./textAnalyticsResult\";\nimport {\n  DetectedLanguage,\n  TextDocumentStatistics,\n  TextAnalyticsError,\n  TextAnalyticsWarning\n} from \"./generated/models\";\n\n/**\n * The result of the detect language operation on a single document.\n */\nexport type DetectLanguageResult = DetectLanguageSuccessResult | DetectLanguageErrorResult;\n\n/**\n * The result of the detect language operation on a single document,\n * containing a prediction of what language the document is written in.\n */\nexport interface DetectLanguageSuccessResult extends TextAnalyticsSuccessResult {\n  /**\n   * The top detected language by confidence score.\n   */\n  readonly primaryLanguage: DetectedLanguage;\n}\n\n/**\n * An error result from the detect languge operation on a single document.\n */\nexport type DetectLanguageErrorResult = TextAnalyticsErrorResult;\n\nexport function makeDetectLanguageResult(\n  id: string,\n  detectedLanguage: DetectedLanguage,\n  warnings: TextAnalyticsWarning[],\n  statistics?: TextDocumentStatistics\n): DetectLanguageSuccessResult {\n  return {\n    ...makeTextAnalyticsSuccessResult(id, warnings, statistics),\n    primaryLanguage: detectedLanguage\n  };\n}\n\nexport function makeDetectLanguageErrorResult(\n  id: string,\n  error: TextAnalyticsError\n): DetectLanguageErrorResult {\n  return makeTextAnalyticsErrorResult(id, error);\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  TextDocumentBatchStatistics,\n  DocumentLanguage,\n  DocumentError,\n  DetectLanguageInput\n} from \"./generated/models\";\nimport {\n  DetectLanguageResult,\n  makeDetectLanguageResult,\n  makeDetectLanguageErrorResult\n} from \"./detectLanguageResult\";\nimport { sortResponseIdObjects } from \"./util\";\n\n/**\n * Array of `DetectLanguageResult` objects corresponding to a batch of input documents, and\n * annotated with information about the batch operation.\n */\nexport interface DetectLanguageResultArray extends Array<DetectLanguageResult> {\n  /**\n   * Statistics about the input document batch and how it was processed\n   * by the service. This property will have a value when includeStatistics is set to true\n   * in the client call.\n   */\n  statistics?: TextDocumentBatchStatistics;\n  /**\n   * The version of the text analytics model used by this operation on this\n   * batch of input documents.\n   */\n  modelVersion: string;\n}\n\nexport function makeDetectLanguageResultArray(\n  input: DetectLanguageInput[],\n  documents: DocumentLanguage[],\n  errors: DocumentError[],\n  modelVersion: string,\n  statistics?: TextDocumentBatchStatistics\n): DetectLanguageResultArray {\n  const unsortedResult = documents\n    .map(\n      (document): DetectLanguageResult => {\n        return makeDetectLanguageResult(\n          document.id,\n          document.detectedLanguage,\n          document.warnings,\n          document.statistics\n        );\n      }\n    )\n    .concat(\n      errors.map(\n        (error): DetectLanguageResult => {\n          return makeDetectLanguageErrorResult(error.id, error.error);\n        }\n      )\n    );\n  const result = sortResponseIdObjects(input, unsortedResult);\n  return Object.assign(result, {\n    statistics,\n    modelVersion\n  });\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  makeTextAnalyticsSuccessResult,\n  TextAnalyticsSuccessResult,\n  TextAnalyticsErrorResult,\n  makeTextAnalyticsErrorResult\n} from \"./textAnalyticsResult\";\nimport {\n  Entity,\n  TextDocumentStatistics,\n  TextAnalyticsError,\n  TextAnalyticsWarning\n} from \"./generated/models\";\n\n/**\n * An entity from text analysis with information about its categorical\n * classification.\n */\nexport interface CategorizedEntity extends Entity {}\n\n/**\n * The result of the recognize entities operation on a single document.\n */\nexport type RecognizeCategorizedEntitiesResult =\n  | RecognizeCategorizedEntitiesSuccessResult\n  | RecognizeCategorizedEntitiesErrorResult;\n\n/**\n * The result of the recognize entities operation on a single document, containing the collection of\n * `Entity` objects identified in that document.\n */\nexport interface RecognizeCategorizedEntitiesSuccessResult extends TextAnalyticsSuccessResult {\n  /**\n   * The collection of entities identified in the input document.\n   */\n  readonly entities: CategorizedEntity[];\n}\n\n/**\n * An error result from the recognize entities operation on a single document.\n */\nexport type RecognizeCategorizedEntitiesErrorResult = TextAnalyticsErrorResult;\n\nexport function makeRecognizeCategorizedEntitiesResult(\n  id: string,\n  entities: CategorizedEntity[],\n  warnings: TextAnalyticsWarning[],\n  statistics?: TextDocumentStatistics\n): RecognizeCategorizedEntitiesSuccessResult {\n  return {\n    ...makeTextAnalyticsSuccessResult(id, warnings, statistics),\n    entities\n  };\n}\n\nexport function makeRecognizeCategorizedEntitiesErrorResult(\n  id: string,\n  error: TextAnalyticsError\n): RecognizeCategorizedEntitiesErrorResult {\n  return makeTextAnalyticsErrorResult(id, error);\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  TextDocumentBatchStatistics,\n  DocumentError,\n  DocumentEntities,\n  TextDocumentInput\n} from \"./generated/models\";\nimport {\n  RecognizeCategorizedEntitiesResult,\n  makeRecognizeCategorizedEntitiesResult,\n  makeRecognizeCategorizedEntitiesErrorResult\n} from \"./recognizeCategorizedEntitiesResult\";\nimport { sortResponseIdObjects } from \"./util\";\n\n/**\n * Array of `RecognizeCategorizedEntitiesResult` objects corresponding to a batch of input documents, and\n * annotated with information about the batch operation.\n */\nexport interface RecognizeCategorizedEntitiesResultArray\n  extends Array<RecognizeCategorizedEntitiesResult> {\n  /**\n   * Statistics about the input document batch and how it was processed\n   * by the service. This property will have a value when includeStatistics is set to true\n   * in the client call.\n   */\n  statistics?: TextDocumentBatchStatistics;\n  /**\n   * The version of the text analytics model used by this operation on this\n   * batch of input documents.\n   */\n  modelVersion: string;\n}\n\nexport function makeRecognizeCategorizedEntitiesResultArray(\n  input: TextDocumentInput[],\n  documents: DocumentEntities[],\n  errors: DocumentError[],\n  modelVersion: string,\n  statistics?: TextDocumentBatchStatistics\n): RecognizeCategorizedEntitiesResultArray {\n  const unsortedResult = documents\n    .map(\n      (document): RecognizeCategorizedEntitiesResult => {\n        return makeRecognizeCategorizedEntitiesResult(\n          document.id,\n          document.entities,\n          document.warnings,\n          document.statistics\n        );\n      }\n    )\n    .concat(\n      errors.map(\n        (error): RecognizeCategorizedEntitiesResult => {\n          return makeRecognizeCategorizedEntitiesErrorResult(error.id, error.error);\n        }\n      )\n    );\n  const result = sortResponseIdObjects(input, unsortedResult);\n  return Object.assign(result, {\n    statistics,\n    modelVersion\n  });\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  makeTextAnalyticsSuccessResult,\n  TextAnalyticsSuccessResult,\n  TextAnalyticsErrorResult,\n  makeTextAnalyticsErrorResult\n} from \"./textAnalyticsResult\";\nimport {\n  TextAnalyticsError,\n  DocumentSentimentLabel,\n  SentimentConfidenceScores,\n  SentenceSentiment as GeneratedSentenceSentiment,\n  SentenceSentimentLabel,\n  DocumentSentiment,\n  SentenceAspect,\n  AspectRelation,\n  SentenceOpinion,\n  TokenSentimentValue as SentenceAspectSentiment,\n  AspectConfidenceScoreLabel\n} from \"./generated/models\";\nimport { findOpinionIndex, OpinionIndex } from \"./util\";\n\n/**\n * The result of the analyze sentiment operation on a single document.\n */\nexport type AnalyzeSentimentResult = AnalyzeSentimentSuccessResult | AnalyzeSentimentErrorResult;\n\n/**\n *  The result of the analyze sentiment operation on a single document,\n *  containing the predicted sentiment for each sentence as well as for the full document.\n */\nexport interface AnalyzeSentimentSuccessResult extends TextAnalyticsSuccessResult {\n  /**\n   * Predicted sentiment for document. Possible values\n   * include: 'positive', 'neutral', 'negative', 'mixed'\n   */\n  sentiment: DocumentSentimentLabel;\n  /**\n   * Document level sentiment confidence scores between 0 and 1 for each sentiment class.\n   */\n  confidenceScores: SentimentConfidenceScores;\n  /**\n   * The predicted sentiment for each sentence in the corresponding document.\n   */\n  sentences: SentenceSentiment[];\n}\n\n/**\n * The predicted sentiment for a given span of text. For more information regarding text sentiment, see https://docs.microsoft.com/azure/cognitive-services/Text-Analytics/how-tos/text-analytics-how-to-sentiment-analysis.\n */\nexport interface SentenceSentiment {\n  /**\n   * The sentence text.\n   */\n  text: string;\n  /**\n   * The predicted Sentiment for the sentence.\n   */\n  sentiment: SentenceSentimentLabel;\n  /**\n   * The sentiment confidence score between 0 and 1 for the sentence for all classes.\n   */\n  confidenceScores: SentimentConfidenceScores;\n  /**\n   * The sentence text offset from the start of the document.\n   */\n  offset: number;\n  /**\n   * The list of opinions mined from this sentence. For example in \"The food is\n   * good, but the service is bad\", we would mind these two opinions \"food is\n   * good\", \"service is bad\". Only returned if `show_opinion_mining` is set to\n   * True in the call to `analyze_sentiment`.\n   */\n  minedOpinions: MinedOpinion[];\n}\n\n/**\n * AspectSentiment contains the related opinions, predicted sentiment,\n * confidence scores and other information about an aspect of a product.\n * An aspect of a product/service is a key component of that product/service.\n * For example in \"The food at Hotel Foo is good\", \"food\" is an aspect of\n * \"Hotel Foo\".\n */\nexport interface AspectSentiment {\n  /**\n   * The sentiment confidence score between 0 and 1 for the aspect for\n   * 'positive' and 'negative' labels.\n   */\n  confidenceScores: AspectConfidenceScoreLabel;\n  /**\n   * The predicted Sentiment for the aspect. Possible values include 'positive',\n   * 'mixed', and 'negative'.\n   */\n  sentiment: SentenceAspectSentiment;\n  /**\n   * The aspect text.\n   */\n  text: string;\n  /**\n   * The aspect text offset from the start of the sentence.\n   */\n  offset: number;\n}\n\n/**\n * OpinionSentiment contains the predicted sentiment, confidence scores and\n * other information about an opinion of an aspect. For example, in the sentence\n * \"The food is good\", the opinion of the aspect 'food' is 'good'.\n */\nexport interface OpinionSentiment extends SentenceOpinion {}\n\n/**\n * A mined opinion object represents an opinion we've extracted from a sentence.\n * It consists of both an aspect that these opinions are about, and the actual\n * opinions themselves.\n */\nexport interface MinedOpinion {\n  /**\n   * The aspect of a product/service that this opinion is about.\n   */\n  aspect: AspectSentiment;\n  /**\n   * The actual opinions of the aspect.\n   */\n  opinions: OpinionSentiment[];\n}\n\n/**\n * An error result from the analyze sentiment operation on a single document.\n */\nexport type AnalyzeSentimentErrorResult = TextAnalyticsErrorResult;\n\nexport function makeAnalyzeSentimentResult(\n  document: DocumentSentiment\n): AnalyzeSentimentSuccessResult {\n  const {\n    id,\n    sentiment,\n    confidenceScores,\n    sentenceSentiments: sentences,\n    warnings,\n    statistics\n  } = document;\n  return {\n    ...makeTextAnalyticsSuccessResult(id, warnings, statistics),\n    sentiment,\n    confidenceScores,\n    sentences: sentences.map((sentence) => convertGeneratedSentenceSentiment(sentence, document))\n  };\n}\n\nexport function makeAnalyzeSentimentErrorResult(\n  id: string,\n  error: TextAnalyticsError\n): AnalyzeSentimentErrorResult {\n  return makeTextAnalyticsErrorResult(id, error);\n}\n\n/**\n * Converts a sentence sentiment object returned by the service to another that\n * is user-friendly.\n *\n * @param sentence - The sentence sentiment object to be converted.\n * @param response - The entire response returned by the service.\n * @returns The user-friendly sentence sentiment object.\n */\nfunction convertGeneratedSentenceSentiment(\n  sentence: GeneratedSentenceSentiment,\n  document: DocumentSentiment\n): SentenceSentiment {\n  return {\n    confidenceScores: sentence.confidenceScores,\n    sentiment: sentence.sentiment,\n    text: sentence.text,\n    offset: sentence.offset,\n    minedOpinions: sentence.aspects\n      ? sentence.aspects.map(\n          (aspect: SentenceAspect): MinedOpinion => ({\n            aspect: {\n              confidenceScores: aspect.confidenceScores,\n              sentiment: aspect.sentiment,\n              text: aspect.text,\n              offset: aspect.offset\n            },\n            opinions: aspect.relations\n              .filter((relation) => relation.relationType === \"opinion\")\n              .map((relation) => convertAspectRelationToOpinionSentiment(relation, document))\n          })\n        )\n      : []\n  };\n}\n\n/**\n * Converts an aspect relation object returned by the service to an opinion\n * sentiment object where JSON pointers in the former are realized in the\n * latter.\n *\n * @param aspectRelation - The aspect relation object to be converted.\n * @param response - The entire response returned by the service.\n * @returns The user-friendly opinion sentiment object.\n */\nfunction convertAspectRelationToOpinionSentiment(\n  aspectRelation: AspectRelation,\n  document: DocumentSentiment\n): OpinionSentiment {\n  const opinionPtr = aspectRelation.ref;\n  const opinionIndex: OpinionIndex = findOpinionIndex(opinionPtr);\n  const opinion: SentenceOpinion | undefined =\n    document.sentenceSentiments?.[opinionIndex.sentence].opinions?.[opinionIndex.opinion];\n  if (opinion !== undefined) {\n    return opinion;\n  } else {\n    throw new Error(`Pointer \"${opinionPtr}\" is not a valid opinion pointer`);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  TextDocumentBatchStatistics,\n  TextDocumentInput,\n  GeneratedClientSentimentResponse\n} from \"./generated/models\";\nimport {\n  AnalyzeSentimentResult,\n  makeAnalyzeSentimentResult,\n  makeAnalyzeSentimentErrorResult\n} from \"./analyzeSentimentResult\";\nimport { sortResponseIdObjects } from \"./util\";\n\n/**\n * Array of `AnalyzeSentimentResult` objects corresponding to a batch of input documents, and\n * annotated with information about the batch operation.\n */\nexport interface AnalyzeSentimentResultArray extends Array<AnalyzeSentimentResult> {\n  /**\n   * Statistics about the input document batch and how it was processed\n   * by the service. This property will have a value when includeStatistics is set to true\n   * in the client call.\n   */\n  statistics?: TextDocumentBatchStatistics;\n  /**\n   * The version of the text analytics model used by this operation on this\n   * batch of input documents.\n   */\n  modelVersion: string;\n}\n\nexport function makeAnalyzeSentimentResultArray(\n  input: TextDocumentInput[],\n  response: GeneratedClientSentimentResponse\n): AnalyzeSentimentResultArray {\n  const { documents, errors, modelVersion, statistics } = response;\n  const unsortedResult = documents\n    .map(\n      (document): AnalyzeSentimentResult => {\n        return makeAnalyzeSentimentResult(document);\n      }\n    )\n    .concat(\n      errors.map(\n        (error): AnalyzeSentimentResult => {\n          return makeAnalyzeSentimentErrorResult(error.id, error.error);\n        }\n      )\n    );\n  const result = sortResponseIdObjects(input, unsortedResult);\n  return Object.assign(result, {\n    statistics,\n    modelVersion\n  });\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  makeTextAnalyticsSuccessResult,\n  TextAnalyticsSuccessResult,\n  TextAnalyticsErrorResult,\n  makeTextAnalyticsErrorResult\n} from \"./textAnalyticsResult\";\nimport {\n  TextDocumentStatistics,\n  TextAnalyticsError,\n  TextAnalyticsWarning\n} from \"./generated/models\";\n\n/**\n * The result of the extract key phrases operation on a single document.\n */\nexport type ExtractKeyPhrasesResult = ExtractKeyPhrasesSuccessResult | ExtractKeyPhrasesErrorResult;\n\n/**\n * The result of the extract key phrases operation on a single document,\n * containing a collection of the key phrases identified in that document.\n */\nexport interface ExtractKeyPhrasesSuccessResult extends TextAnalyticsSuccessResult {\n  /**\n   * A list of representative words or phrases. The number of key phrases returned is proportional\n   * to the number of words in the input document.\n   */\n  keyPhrases: string[];\n}\n\n/**\n * An error result from the extract key phrases operation on a single document.\n */\nexport type ExtractKeyPhrasesErrorResult = TextAnalyticsErrorResult;\n\nexport function makeExtractKeyPhrasesResult(\n  id: string,\n  keyPhrases: string[],\n  warnings: TextAnalyticsWarning[],\n  statistics?: TextDocumentStatistics\n): ExtractKeyPhrasesSuccessResult {\n  return {\n    ...makeTextAnalyticsSuccessResult(id, warnings, statistics),\n    keyPhrases\n  };\n}\n\nexport function makeExtractKeyPhrasesErrorResult(\n  id: string,\n  error: TextAnalyticsError\n): ExtractKeyPhrasesErrorResult {\n  return makeTextAnalyticsErrorResult(id, error);\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  TextDocumentBatchStatistics,\n  DocumentError,\n  DocumentKeyPhrases,\n  TextDocumentInput\n} from \"./generated/models\";\nimport {\n  ExtractKeyPhrasesResult,\n  makeExtractKeyPhrasesResult,\n  makeExtractKeyPhrasesErrorResult\n} from \"./extractKeyPhrasesResult\";\nimport { sortResponseIdObjects } from \"./util\";\n\n/**\n * Array of `ExtractKeyPhrasesResult` objects corresponding to a batch of input documents, and\n * annotated with information about the batch operation.\n */\nexport interface ExtractKeyPhrasesResultArray extends Array<ExtractKeyPhrasesResult> {\n  /**\n   * Statistics about the input document batch and how it was processed\n   * by the service. This property will have a value when includeStatistics is set to true\n   * in the client call.\n   */\n  statistics?: TextDocumentBatchStatistics;\n  /**\n   * The version of the text analytics model used by this operation on this\n   * batch of input documents.\n   */\n  modelVersion: string;\n}\n\nexport function makeExtractKeyPhrasesResultArray(\n  input: TextDocumentInput[],\n  documents: DocumentKeyPhrases[],\n  errors: DocumentError[],\n  modelVersion: string,\n  statistics?: TextDocumentBatchStatistics\n): ExtractKeyPhrasesResultArray {\n  const unsortedResult = documents\n    .map(\n      (document): ExtractKeyPhrasesResult => {\n        return makeExtractKeyPhrasesResult(\n          document.id,\n          document.keyPhrases,\n          document.warnings,\n          document.statistics\n        );\n      }\n    )\n    .concat(\n      errors.map(\n        (error): ExtractKeyPhrasesResult => {\n          return makeExtractKeyPhrasesErrorResult(error.id, error.error);\n        }\n      )\n    );\n  const result = sortResponseIdObjects(input, unsortedResult);\n  return Object.assign(result, {\n    statistics,\n    modelVersion\n  });\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  makeTextAnalyticsSuccessResult,\n  TextAnalyticsSuccessResult,\n  TextAnalyticsErrorResult,\n  makeTextAnalyticsErrorResult\n} from \"./textAnalyticsResult\";\nimport { Entity, TextAnalyticsError } from \"./generated/models\";\n\n/**\n * An entity from PII recognition with information about the kind of PII\n * encountered.\n */\nexport interface PiiEntity extends Entity {}\n\n/**\n * The result of the recognize entities operation on a single document.\n */\nexport type RecognizePiiEntitiesResult =\n  | RecognizePiiEntitiesSuccessResult\n  | RecognizePiiEntitiesErrorResult;\n\n/**\n * The result of the recognize entities operation on a single document, containing the collection of\n * `Entity` objects identified in that document.\n */\nexport interface RecognizePiiEntitiesSuccessResult extends TextAnalyticsSuccessResult {\n  /**\n   * The collection of entities identified in the input document.\n   */\n  readonly entities: PiiEntity[];\n  /**\n   * The text redacted.\n   */\n  redactedText: string;\n}\n\n/**\n * An error result from the recognize entities operation on a single document.\n */\nexport type RecognizePiiEntitiesErrorResult = TextAnalyticsErrorResult;\n\nexport function makeRecognizePiiEntitiesResult(\n  document: RecognizePiiEntitiesSuccessResult\n): RecognizePiiEntitiesSuccessResult {\n  const { id, entities, warnings, statistics, redactedText } = document;\n  return {\n    ...makeTextAnalyticsSuccessResult(id, warnings, statistics),\n    entities,\n    redactedText\n  };\n}\n\nexport function makeRecognizePiiEntitiesErrorResult(\n  id: string,\n  error: TextAnalyticsError\n): RecognizePiiEntitiesErrorResult {\n  return makeTextAnalyticsErrorResult(id, error);\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { TextDocumentBatchStatistics, TextDocumentInput, PiiResult } from \"./generated/models\";\nimport {\n  RecognizePiiEntitiesResult,\n  makeRecognizePiiEntitiesResult,\n  makeRecognizePiiEntitiesErrorResult\n} from \"./recognizePiiEntitiesResult\";\nimport { sortResponseIdObjects } from \"./util\";\n\n/**\n * Collection of `RecognizePiiEntitiesResult` objects corresponding to a batch of input documents, and\n * annotated with information about the batch operation.\n */\nexport interface RecognizePiiEntitiesResultArray extends Array<RecognizePiiEntitiesResult> {\n  /**\n   * Statistics about the input document batch and how it was processed\n   * by the service. This property will have a value when includeStatistics is set to true\n   * in the client call.\n   */\n  statistics?: TextDocumentBatchStatistics;\n  /**\n   * The version of the text analytics model used by this operation on this\n   * batch of input documents.\n   */\n  modelVersion: string;\n}\n\nexport function makeRecognizePiiEntitiesResultArray(\n  input: TextDocumentInput[],\n  response: PiiResult\n): RecognizePiiEntitiesResultArray {\n  const { documents, errors, statistics, modelVersion } = response;\n  const unsortedResult = documents\n    .map(\n      (document): RecognizePiiEntitiesResult => {\n        return makeRecognizePiiEntitiesResult(document);\n      }\n    )\n    .concat(\n      errors.map(\n        (error): RecognizePiiEntitiesResult => {\n          return makeRecognizePiiEntitiesErrorResult(error.id, error.error);\n        }\n      )\n    );\n  const result = sortResponseIdObjects(input, unsortedResult);\n  return Object.assign(result, {\n    statistics,\n    modelVersion\n  });\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  makeTextAnalyticsSuccessResult,\n  TextAnalyticsSuccessResult,\n  TextAnalyticsErrorResult,\n  makeTextAnalyticsErrorResult\n} from \"./textAnalyticsResult\";\nimport {\n  TextDocumentStatistics,\n  TextAnalyticsError,\n  LinkedEntity,\n  TextAnalyticsWarning\n} from \"./generated/models\";\n\n/**\n * The result of the recognize linked entities operation on a single document.\n */\nexport type RecognizeLinkedEntitiesResult =\n  | RecognizeLinkedEntitiesSuccessResult\n  | RecognizeLinkedEntitiesErrorResult;\n\n/**\n * The result of the recognize linked entities operation on a single document,\n * containing a collection of the `LinkedEntity` objects identified in that document.\n */\nexport interface RecognizeLinkedEntitiesSuccessResult extends TextAnalyticsSuccessResult {\n  /**\n   * The collection of entities identified in the input document.\n   */\n  readonly entities: LinkedEntity[];\n}\n\n/**\n * An error result from the recognize linked entities operation on a single document.\n */\nexport type RecognizeLinkedEntitiesErrorResult = TextAnalyticsErrorResult;\n\nexport function makeRecognizeLinkedEntitiesResult(\n  id: string,\n  entities: LinkedEntity[],\n  warnings: TextAnalyticsWarning[],\n  statistics?: TextDocumentStatistics\n): RecognizeLinkedEntitiesSuccessResult {\n  return {\n    ...makeTextAnalyticsSuccessResult(id, warnings, statistics),\n    entities\n  };\n}\n\nexport function makeRecognizeLinkedEntitiesErrorResult(\n  id: string,\n  error: TextAnalyticsError\n): RecognizeLinkedEntitiesErrorResult {\n  return makeTextAnalyticsErrorResult(id, error);\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  TextDocumentBatchStatistics,\n  DocumentError,\n  DocumentLinkedEntities,\n  TextDocumentInput\n} from \"./generated/models\";\nimport {\n  RecognizeLinkedEntitiesResult,\n  makeRecognizeLinkedEntitiesResult,\n  makeRecognizeLinkedEntitiesErrorResult\n} from \"./recognizeLinkedEntitiesResult\";\nimport { sortResponseIdObjects } from \"./util\";\n\n/**\n * Array of `RecognizeLinkedEntitiesResult` objects corresponding to a batch of input documents, and\n * annotated with information about the batch operation.\n */\nexport interface RecognizeLinkedEntitiesResultArray extends Array<RecognizeLinkedEntitiesResult> {\n  /**\n   * Statistics about the input document batch and how it was processed\n   * by the service. This property will have a value when includeStatistics is set to true\n   * in the client call.\n   */\n  statistics?: TextDocumentBatchStatistics;\n  /**\n   * The version of the text analytics model used by this operation on this\n   * batch of input documents.\n   */\n  modelVersion: string;\n}\n\nexport function makeRecognizeLinkedEntitiesResultArray(\n  input: TextDocumentInput[],\n  documents: DocumentLinkedEntities[],\n  errors: DocumentError[],\n  modelVersion: string,\n  statistics?: TextDocumentBatchStatistics\n): RecognizeLinkedEntitiesResultArray {\n  const unsortedResult = documents\n    .map(\n      (document): RecognizeLinkedEntitiesResult => {\n        return makeRecognizeLinkedEntitiesResult(\n          document.id,\n          document.entities,\n          document.warnings,\n          document.statistics\n        );\n      }\n    )\n    .concat(\n      errors.map(\n        (error): RecognizeLinkedEntitiesResult => {\n          return makeRecognizeLinkedEntitiesErrorResult(error.id, error.error);\n        }\n      )\n    );\n  const result = sortResponseIdObjects(input, unsortedResult);\n  return Object.assign(result, {\n    statistics,\n    modelVersion\n  });\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { getTracer } from \"@azure/core-tracing\";\nimport { Span, SpanOptions, SpanKind } from \"@opentelemetry/api\";\nimport { OperationOptions } from \"@azure/core-http\";\n\ntype OperationTracingOptions = OperationOptions[\"tracingOptions\"];\n\n/**\n * Creates a span using the global tracer.\n * @ignore\n * @param name The name of the operation being performed.\n * @param tracingOptions The options for the underlying http request.\n */\nexport function createSpan<T extends OperationOptions>(\n  operationName: string,\n  operationOptions: T\n): { span: Span; updatedOptions: T } {\n  const tracer = getTracer();\n  const tracingOptions = operationOptions.tracingOptions || {};\n  const spanOptions: SpanOptions = {\n    ...tracingOptions.spanOptions,\n    kind: SpanKind.INTERNAL\n  };\n\n  const span = tracer.startSpan(\n    `Azure.CognitiveServices.TextAnalytics.${operationName}`,\n    spanOptions\n  );\n\n  span.setAttribute(\"az.namespace\", \"Microsoft.CognitiveServices\");\n\n  let newSpanOptions = tracingOptions.spanOptions || {};\n  if (span.isRecording()) {\n    newSpanOptions = {\n      ...tracingOptions.spanOptions,\n      parent: span.context(),\n      attributes: {\n        ...spanOptions.attributes,\n        \"az.namespace\": \"Microsoft.CognitiveServices\"\n      }\n    };\n  }\n\n  const newTracingOptions: OperationTracingOptions = {\n    ...tracingOptions,\n    spanOptions: newSpanOptions\n  };\n\n  const newOperationOptions: T = {\n    ...operationOptions,\n    tracingOptions: newTracingOptions\n  };\n\n  return {\n    span,\n    updatedOptions: newOperationOptions\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { KeyCredential } from \"@azure/core-auth\";\nimport {\n  RequestPolicyFactory,\n  RequestPolicy,\n  BaseRequestPolicy,\n  WebResourceLike,\n  HttpOperationResponse,\n  RequestPolicyOptionsLike\n} from \"@azure/core-http\";\n\nconst API_KEY_HEADER_NAME = \"Ocp-Apim-Subscription-Key\";\n\n/**\n * Create an HTTP pipeline policy to authenticate a request\n * using an `AzureKeyCredential` for Text Analytics\n */\nexport function createTextAnalyticsAzureKeyCredentialPolicy(\n  credential: KeyCredential\n): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptionsLike) => {\n      return new TextAnalyticsAzureKeyCredentialPolicy(nextPolicy, options, credential);\n    }\n  };\n}\n\n/**\n * A concrete implementation of an AzureKeyCredential policy\n * using the appropriate header for TextAnalytics\n */\nclass TextAnalyticsAzureKeyCredentialPolicy extends BaseRequestPolicy {\n  private credential: KeyCredential;\n\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptionsLike,\n    credential: KeyCredential\n  ) {\n    super(nextPolicy, options);\n    this.credential = credential;\n  }\n\n  public async sendRequest(webResource: WebResourceLike): Promise<HttpOperationResponse> {\n    if (!webResource) {\n      throw new Error(\"webResource cannot be null or undefined\");\n    }\n\n    webResource.headers.set(API_KEY_HEADER_NAME, this.credential.key);\n    return this._nextPolicy.sendRequest(webResource);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { delay, OperationOptions } from \"@azure/core-http\";\nimport { Poller, PollOperation, PollOperationState } from \"@azure/core-lro\";\nimport { GeneratedClient } from \"../generated/generatedClient\";\nimport { TextDocumentInput } from \"../generated/models\";\nimport { TextAnalyticsOperationOptions } from \"../textAnalyticsOperationOptions\";\n\n/**\n * Options for configuring a polling operation.\n */\nexport interface PollingOptions {\n  /**\n   * Delay to wait until next poll, in milliseconds.\n   */\n  updateIntervalInMs?: number;\n  /**\n   * A serialized poller which can be used to resume an existing paused Long-Running-Operation.\n   */\n  resumeFrom?: string;\n}\n\nexport interface TextAnalyticsStatusOperationOptions extends OperationOptions {\n  /**\n   * If set to true, response will contain input and document level statistics.\n   */\n  includeStatistics?: boolean;\n}\n\n/**\n * Common parameters to a Poller.\n */\nexport interface AnalysisPollerOptions {\n  readonly client: GeneratedClient;\n  readonly documents: TextDocumentInput[];\n  readonly analysisOptions?: TextAnalyticsOperationOptions;\n  updateIntervalInMs?: number;\n  resumeFrom?: string;\n}\n\n/**\n * An interface representing the state of an analysis poller operation.\n */\nexport interface AnalysisPollOperationState<TResult> extends PollOperationState<TResult> {\n  /**\n   * The id of the analysis job.\n   */\n  jobId?: string;\n}\n\n/**\n * Common properties and methods of analysis Pollers.\n */\nexport abstract class AnalysisPoller<TState, TResult> extends Poller<TState, TResult> {\n  /**\n   * Defines how much time the poller is going to wait before making a new request to the service.\n   */\n  public updateIntervalInMs: number = 2000;\n\n  /**\n   * The method used by the poller to wait before attempting to update its operation.\n   */\n  async delay(): Promise<void> {\n    return delay(this.updateIntervalInMs);\n  }\n}\n\n/**\n * Common properties and methods of polling operations.\n */\nexport abstract class AnalysisPollOperation<TState, TResult>\n  implements PollOperation<TState, TResult> {\n  constructor(public state: TState) {}\n\n  /**\n   * @summary Meant to reach to the service and update the Poller operation.\n   * @param [options] The optional parameters, which is only an abortSignal from @azure/abort-controller\n   */\n  public abstract update(): Promise<PollOperation<TState, TResult>>;\n\n  /**\n   * @summary Meant to reach to the service and cancel the Poller operation.\n   * @param [options] The optional parameters, which is only an abortSignal from @azure/abort-controller\n   */\n  public abstract cancel(): Promise<PollOperation<TState, TResult>>;\n\n  /**\n   * @summary Serializes the Poller operation.\n   */\n  public toString(): string {\n    return JSON.stringify({\n      state: this.state\n    });\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  AbortSignalLike,\n  OperationOptions,\n  operationOptionsToRequestOptionsBase\n} from \"@azure/core-http\";\n\nimport {\n  GeneratedClientHealthResponse as BeginAnalyzeHealthcareResponse,\n  GeneratedClientHealthStatusOptionalParams as HealthcareJobStatusOptions,\n  State,\n  TextDocumentBatchStatistics,\n  TextDocumentInput\n} from \"../../generated/models\";\nimport {\n  HealthcareResult,\n  HealthcareEntitiesArray,\n  PagedAsyncIterableHealthEntities,\n  PaginatedHealthcareEntities\n} from \"../../healthResult\";\nimport { PageSettings } from \"@azure/core-paging\";\nimport {\n  addStrEncodingParam,\n  getJobID,\n  handleInvalidDocumentBatch,\n  nextLinkToTopAndSkip\n} from \"../../util\";\nimport {\n  AnalysisPollOperation,\n  AnalysisPollOperationState,\n  PollingOptions,\n  TextAnalyticsStatusOperationOptions\n} from \"../poller\";\nimport { GeneratedClient as Client } from \"../../generated\";\nimport { combineSuccessfulAndErroneousDocuments } from \"../../textAnalyticsResult\";\nimport { CanonicalCode } from \"@opentelemetry/api\";\nimport { createSpan } from \"../../tracing\";\nimport { TextAnalyticsOperationOptions } from \"../../textAnalyticsOperationOptions\";\nexport { State };\n\ninterface HealthcareResultWithPagination {\n  result: HealthcareEntitiesArray;\n  top?: number;\n  skip?: number;\n}\n\ninterface HealthcareJobStatus {\n  done: boolean;\n  /**\n   * Statistics about the input document batch and how it was processed\n   * by the service. This property will have a value when includeStatistics is set to true\n   * in the client call.\n   */\n  statistics?: TextDocumentBatchStatistics;\n  /**\n   * The version of the text analytics model used by this operation on this\n   * batch of input documents.\n   */\n  modelVersion?: string;\n}\n\ninterface BeginAnalyzeHealthcareInternalOptions extends OperationOptions {\n  /**\n   * This value indicates which model will be used for scoring. If a model-version is\n   * not specified, the API should default to the latest, non-preview version.\n   * For supported model versions, see operation-specific documentation, for example:\n   * https://docs.microsoft.com/azure/cognitive-services/text-analytics/how-tos/text-analytics-how-to-sentiment-analysis#model-versioning\n   */\n  modelVersion?: string;\n}\n\n/**\n * Options for configuring analyze healthcare jobs.\n */\nexport interface HealthcareJobOptions extends TextAnalyticsOperationOptions {}\n\n/**\n * Options for the begin analyze healthcare operation.\n */\nexport interface BeginAnalyzeHealthcareOptions {\n  /**\n   * Options related to polling from the service.\n   */\n  polling?: PollingOptions;\n  /**\n   * Options related to the healthcare job.\n   */\n  health?: HealthcareJobOptions;\n}\n\n/**\n * The state of the begin analyze healthcare polling operation.\n */\nexport interface BeginAnalyzeHealthcarePollState\n  extends AnalysisPollOperationState<PaginatedHealthcareEntities> {}\n\n/**\n * Class that represents a poller that waits for the healthcare results.\n */\nexport class BeginAnalyzeHealthcarePollerOperation extends AnalysisPollOperation<\n  BeginAnalyzeHealthcarePollState,\n  PaginatedHealthcareEntities\n> {\n  constructor(\n    public state: BeginAnalyzeHealthcarePollState,\n    // eslint-disable-next-line @azure/azure-sdk/ts-use-interface-parameters\n    private client: Client,\n    private documents: TextDocumentInput[],\n    private options: BeginAnalyzeHealthcareOptions = {},\n    private statusOptions: TextAnalyticsStatusOperationOptions\n  ) {\n    super(state);\n  }\n\n  /**\n   * should be called only after all the status of the healthcare jobs became\n   * \"succeeded\" and it returns an iterator for the results and provides a\n   * byPage method to return the results paginated.\n   */\n  private listHealthcareEntitiesByPage(\n    jobId: string,\n    options: HealthcareJobStatusOptions = {}\n  ): PagedAsyncIterableHealthEntities {\n    const iter = this._listHealthcareEntities(jobId, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        const pageOptions = { ...options, top: settings?.maxPageSize };\n        return this._listHealthcareEntitiesPaginated(jobId, pageOptions);\n      }\n    };\n  }\n\n  /**\n   * returns an iterator to the results of a healthcare job.\n   */\n  private async *_listHealthcareEntities(\n    jobId: string,\n    options?: HealthcareJobStatusOptions\n  ): AsyncIterableIterator<HealthcareResult> {\n    for await (const page of this._listHealthcareEntitiesPaginated(jobId, options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * returns an iterator to arrays of the results of a healthcare job.\n   */\n  private async *_listHealthcareEntitiesPaginated(\n    jobId: string,\n    options?: HealthcareJobStatusOptions\n  ): AsyncIterableIterator<HealthcareEntitiesArray> {\n    let response = await this._listHealthcareEntitiesSinglePage(jobId, options);\n    yield response.result;\n    while (response.skip) {\n      const optionsWithContinuation: HealthcareJobStatusOptions = {\n        ...options,\n        top: response.top,\n        skip: response.skip\n      };\n      response = await this._listHealthcareEntitiesSinglePage(jobId, optionsWithContinuation);\n      yield response.result;\n    }\n  }\n\n  /**\n   * returns an iterator to arrays of the sorted results of a healthcare job.\n   */\n  private async _listHealthcareEntitiesSinglePage(\n    jobId: string,\n    options?: HealthcareJobStatusOptions\n  ): Promise<HealthcareResultWithPagination> {\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"TextAnalyticsClient-_listHealthcareEntitiesSinglePage\",\n      options || {}\n    );\n    try {\n      const response = await this.client.healthStatus(\n        jobId,\n        operationOptionsToRequestOptionsBase(finalOptions)\n      );\n      if (response.results) {\n        const result = combineSuccessfulAndErroneousDocuments(this.documents, response.results);\n        return response.nextLink\n          ? { result, ...nextLinkToTopAndSkip(response.nextLink) }\n          : { result };\n      } else {\n        throw new Error(\"Healthcare task has succeeded but the there are no results!\");\n      }\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * returns whether the healthcare job is done and if so returns also\n   * statistics and the model version used.\n   */\n  private async getHealthStatus(\n    jobId: string,\n    options?: HealthcareJobStatusOptions\n  ): Promise<HealthcareJobStatus> {\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"TextAnalyticsClient-getHealthStatus\",\n      options || {}\n    );\n    try {\n      const response = await this.client.healthStatus(\n        jobId,\n        operationOptionsToRequestOptionsBase(finalOptions)\n      );\n      switch (response.status) {\n        case \"succeeded\": {\n          if (response.results) {\n            return {\n              done: true,\n              statistics: response.results.statistics,\n              modelVersion: response.results.modelVersion\n            };\n          } else {\n            throw new Error(\"Healthcare task has succeeded but the there are no results!\");\n          }\n        }\n        case \"failed\": {\n          const errors = response.errors\n            ?.map((e) => `  code ${e.code}, message: '${e.message}'`)\n            .join(\"\\n\");\n          const message = `Healthcare analysis failed. Error(s): ${errors || \"\"}`;\n          throw new Error(message);\n        }\n        case \"notStarted\":\n        case \"running\":\n          break;\n        default: {\n          throw new Error(\"Unrecognized state of healthcare job!\");\n        }\n      }\n      return { done: false };\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  private async beginAnalyzeHealthcare(\n    documents: TextDocumentInput[],\n    options?: BeginAnalyzeHealthcareInternalOptions\n  ): Promise<BeginAnalyzeHealthcareResponse> {\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"TextAnalyticsClient-beginAnalyzeHealthcare\",\n      addStrEncodingParam(options)\n    );\n\n    try {\n      return await this.client.health(\n        { documents: documents },\n        operationOptionsToRequestOptionsBase(finalOptions)\n      );\n    } catch (e) {\n      const exception = handleInvalidDocumentBatch(e);\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: exception.message\n      });\n      throw exception;\n    } finally {\n      span.end();\n    }\n  }\n\n  async update(\n    options: {\n      abortSignal?: AbortSignalLike;\n      fireProgress?: (state: BeginAnalyzeHealthcarePollState) => void;\n    } = {}\n  ): Promise<BeginAnalyzeHealthcarePollerOperation> {\n    const state = this.state;\n    const updatedAbortSignal = options.abortSignal;\n    if (!state.isStarted) {\n      state.isStarted = true;\n      const response = await this.beginAnalyzeHealthcare(this.documents, {\n        ...this.options.health,\n        abortSignal: updatedAbortSignal ? updatedAbortSignal : options.abortSignal\n      });\n      if (!response.operationLocation) {\n        throw new Error(\n          \"Expects a valid 'operationLocation' to retrieve health results but did not find any\"\n        );\n      }\n      state.jobId = getJobID(response.operationLocation);\n    }\n    const status = await this.getHealthStatus(state.jobId!, {\n      ...this.statusOptions,\n      abortSignal: updatedAbortSignal ? updatedAbortSignal : options.abortSignal\n    });\n\n    if (!state.isCompleted && status.done) {\n      if (typeof options.fireProgress === \"function\") {\n        options.fireProgress(state);\n      }\n      const pagedIterator = this.listHealthcareEntitiesByPage(\n        state.jobId!,\n        this.options.health || {}\n      );\n      state.result = Object.assign(pagedIterator, {\n        statistics: status.statistics,\n        modelVersion: status.modelVersion!\n      });\n      state.isCompleted = true;\n    }\n    return this;\n  }\n\n  async cancel(): Promise<BeginAnalyzeHealthcarePollerOperation> {\n    const state = this.state;\n    if (state.jobId) {\n      await this.client.cancelHealthJob(state.jobId, this.options.health);\n    }\n    state.isCancelled = true;\n    return this;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { delay } from \"@azure/core-http\";\nimport { PollerLike, PollOperationState } from \"@azure/core-lro\";\nimport { PaginatedHealthcareEntities } from \"../../healthResult\";\n\nimport { AnalysisPoller, AnalysisPollerOptions } from \"../poller\";\nimport {\n  BeginAnalyzeHealthcarePollerOperation,\n  BeginAnalyzeHealthcarePollState\n} from \"./operation\";\n\n/**\n * The status of a health operation\n */\nexport type BeginAnalyzeHealthcareOperationState = PollOperationState<PaginatedHealthcareEntities>;\n\n/**\n * Result type of the Health Long-Running-Operation (LRO)\n */\nexport type HealthPollerLike = PollerLike<\n  BeginAnalyzeHealthcareOperationState,\n  PaginatedHealthcareEntities\n>;\n\n/**\n * Class that represents a poller that waits for the healthcare results.\n */\nexport class BeginAnalyzeHealthcarePoller extends AnalysisPoller<\n  BeginAnalyzeHealthcarePollState,\n  PaginatedHealthcareEntities\n> {\n  // eslint-disable-next-line @azure/azure-sdk/ts-use-interface-parameters\n  constructor(pollerOptions: AnalysisPollerOptions) {\n    const {\n      client,\n      documents,\n      analysisOptions,\n      updateIntervalInMs = 5000,\n      resumeFrom\n    } = pollerOptions;\n\n    let state: BeginAnalyzeHealthcarePollState | undefined;\n\n    if (resumeFrom) {\n      state = JSON.parse(resumeFrom).state;\n    }\n    const { includeStatistics, requestOptions, tracingOptions } = analysisOptions || {};\n    const operation = new BeginAnalyzeHealthcarePollerOperation(\n      state || {},\n      client,\n      documents,\n      {\n        health: analysisOptions,\n        polling: {\n          updateIntervalInMs,\n          resumeFrom\n        }\n      },\n      // take out modelVersion from the options that will be sent to the status\n      // API because it is not applicable.\n      { includeStatistics, requestOptions, tracingOptions }\n    );\n\n    super(operation);\n\n    this.updateIntervalInMs = updateIntervalInMs;\n  }\n\n  public delay(): Promise<void> {\n    return delay(this.updateIntervalInMs);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  AbortSignalLike,\n  OperationOptions,\n  operationOptionsToRequestOptionsBase\n} from \"@azure/core-http\";\n\nimport {\n  GeneratedClientAnalyzeResponse as BeginAnalyzeResponse,\n  GeneratedClientAnalyzeStatusOptionalParams as AnalyzeJobStatusOptions,\n  JobManifestTasks,\n  State,\n  TextDocumentBatchStatistics,\n  TextDocumentInput\n} from \"../../generated/models\";\nimport {\n  AnalyzeResult,\n  PagedAsyncIterableAnalyzeResults,\n  PaginatedAnalyzeResults\n} from \"../../analyzeResult\";\nimport { PageSettings } from \"@azure/core-paging\";\nimport {\n  addStrEncodingParam,\n  getJobID,\n  handleInvalidDocumentBatch,\n  nextLinkToTopAndSkip\n} from \"../../util\";\nimport {\n  AnalysisPollOperation,\n  AnalysisPollOperationState,\n  PollingOptions,\n  TextAnalyticsStatusOperationOptions\n} from \"../poller\";\nimport { GeneratedClient as Client } from \"../../generated\";\nimport { CanonicalCode } from \"@opentelemetry/api\";\nimport { createSpan } from \"../../tracing\";\nimport {\n  makeRecognizeCategorizedEntitiesResultArray,\n  RecognizeCategorizedEntitiesResultArray\n} from \"../../recognizeCategorizedEntitiesResultArray\";\nimport {\n  makeRecognizePiiEntitiesResultArray,\n  RecognizePiiEntitiesResultArray\n} from \"../../recognizePiiEntitiesResultArray\";\nimport {\n  ExtractKeyPhrasesResultArray,\n  makeExtractKeyPhrasesResultArray\n} from \"../../extractKeyPhrasesResultArray\";\nimport { logger } from \"../../logger\";\nexport { State };\n\ninterface AnalyzeResultsWithPagination {\n  result: AnalyzeResult;\n  top?: number;\n  skip?: number;\n}\n\ninterface AnalyzeJobStatus {\n  done: boolean;\n  /**\n   * Statistics about the input document batch and how it was processed\n   * by the service. This property will have a value when includeStatistics is set to true\n   * in the client call.\n   */\n  statistics?: TextDocumentBatchStatistics;\n}\n\ninterface BeginAnalyzeInternalOptions extends OperationOptions {}\n\n/**\n * Options for configuring analyze jobs.\n */\nexport interface AnalyzeJobOptions extends OperationOptions {\n  /**\n   * If set to true, response will contain input and document level statistics.\n   */\n  includeStatistics?: boolean;\n}\n\n/**\n * Options for the begin analyze operation.\n */\nexport interface BeginAnalyzeOptions {\n  /**\n   * Options related to polling from the service.\n   */\n  polling?: PollingOptions;\n  /**\n   * Options related to the analyze job.\n   */\n  analyze?: AnalyzeJobOptions;\n}\n\n/**\n * The state of the begin analyze polling operation.\n */\nexport interface BeginAnalyzePollState\n  extends AnalysisPollOperationState<PaginatedAnalyzeResults> {}\n\n/**\n * Class that represents a poller that waits for results of the analyze\n * operation.\n */\nexport class BeginAnalyzePollerOperation extends AnalysisPollOperation<\n  BeginAnalyzePollState,\n  PaginatedAnalyzeResults\n> {\n  constructor(\n    public state: BeginAnalyzePollState,\n    // eslint-disable-next-line @azure/azure-sdk/ts-use-interface-parameters\n    private client: Client,\n    private documents: TextDocumentInput[],\n    private tasks: JobManifestTasks,\n    private options: BeginAnalyzeOptions = {},\n    private statusOptions: TextAnalyticsStatusOperationOptions = {}\n  ) {\n    super(state);\n  }\n\n  /**\n   * should be called only after all the status of the analyze jobs became\n   * \"succeeded\" and it returns an iterator for the results and provides a\n   * byPage method to return the results paginated.\n   */\n  private listAnalyzeResults(\n    jobId: string,\n    options: AnalyzeJobStatusOptions = {}\n  ): PagedAsyncIterableAnalyzeResults {\n    const iter = this._listAnalyzeResultsPaginated(jobId, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        const pageOptions = { ...options, top: settings?.maxPageSize };\n        return this._listAnalyzeResultsPaginated(jobId, pageOptions);\n      }\n    };\n  }\n\n  /**\n   * returns an iterator to arrays of the results of an analyze job.\n   */\n  private async *_listAnalyzeResultsPaginated(\n    jobId: string,\n    options?: AnalyzeJobStatusOptions\n  ): AsyncIterableIterator<AnalyzeResult> {\n    let response = await this._listAnalyzeResultsSinglePage(jobId, options);\n    yield response.result;\n    while (response.skip) {\n      const optionsWithContinuation: AnalyzeJobStatusOptions = {\n        ...options,\n        top: response.top,\n        skip: response.skip\n      };\n      response = await this._listAnalyzeResultsSinglePage(jobId, optionsWithContinuation);\n      yield response.result;\n    }\n  }\n\n  /**\n   * returns an iterator to arrays of the sorted results of an analyze job.\n   */\n  private async _listAnalyzeResultsSinglePage(\n    jobId: string,\n    options?: AnalyzeJobStatusOptions\n  ): Promise<AnalyzeResultsWithPagination> {\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"TextAnalyticsClient-_listAnalyzeResultsSinglePage\",\n      options || {}\n    );\n    try {\n      const response = await this.client.analyzeStatus(\n        jobId,\n        operationOptionsToRequestOptionsBase(finalOptions)\n      );\n      const result: AnalyzeResult = {\n        entitiesRecognitionResults: response.tasks.entityRecognitionTasks?.map(\n          ({ results }): RecognizeCategorizedEntitiesResultArray =>\n            makeRecognizeCategorizedEntitiesResultArray(\n              this.documents,\n              results?.documents,\n              results?.errors,\n              results?.modelVersion,\n              results?.statistics\n            )\n        ),\n        piiEntitiesRecognitionResults: response.tasks.entityRecognitionPiiTasks?.map(\n          ({ results }): RecognizePiiEntitiesResultArray =>\n            makeRecognizePiiEntitiesResultArray(this.documents, results)\n        ),\n        keyPhrasesExtractionResults: response.tasks.keyPhraseExtractionTasks?.map(\n          ({ results }): ExtractKeyPhrasesResultArray =>\n            makeExtractKeyPhrasesResultArray(\n              this.documents,\n              results?.documents,\n              results?.errors,\n              results?.modelVersion,\n              results?.statistics\n            )\n        )\n      };\n      return response.nextLink\n        ? { result, ...nextLinkToTopAndSkip(response.nextLink) }\n        : { result };\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * returns whether the analyze job is done and if so returns also\n   * statistics.\n   */\n  private async getAnalyzeStatus(\n    jobId: string,\n    options?: AnalyzeJobStatusOptions\n  ): Promise<AnalyzeJobStatus> {\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"TextAnalyticsClient-getAnalyzeStatus\",\n      options || {}\n    );\n    try {\n      const response = await this.client.analyzeStatus(\n        jobId,\n        operationOptionsToRequestOptionsBase(finalOptions)\n      );\n      switch (response.status) {\n        case \"partiallySucceeded\":\n        case \"succeeded\": {\n          return {\n            done: true,\n            statistics: response.statistics\n          };\n        }\n        case \"failed\": {\n          const errors = response.errors\n            ?.map((e) => `  code ${e.code}, message: '${e.message}'`)\n            .join(\"\\n\");\n          const message = `Analysis failed. Error(s): ${errors || \"\"}`;\n          throw new Error(message);\n        }\n        case \"notStarted\":\n        case \"running\":\n          break;\n        default: {\n          throw new Error(`Unrecognized state of the analyze job!: ${response.status}`);\n        }\n      }\n      return { done: false };\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  private async beginAnalyze(\n    documents: TextDocumentInput[],\n    tasks: JobManifestTasks,\n    options?: BeginAnalyzeInternalOptions\n  ): Promise<BeginAnalyzeResponse> {\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"TextAnalyticsClient-beginAnalyze\",\n      addStrEncodingParam(options)\n    );\n\n    try {\n      return await this.client.analyze({\n        body: { analysisInput: { documents: documents }, tasks: tasks },\n        ...operationOptionsToRequestOptionsBase(finalOptions)\n      });\n    } catch (e) {\n      const exception = handleInvalidDocumentBatch(e);\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: exception.message\n      });\n      throw exception;\n    } finally {\n      span.end();\n    }\n  }\n\n  async update(\n    options: {\n      abortSignal?: AbortSignalLike;\n      fireProgress?: (state: BeginAnalyzePollState) => void;\n    } = {}\n  ): Promise<BeginAnalyzePollerOperation> {\n    const state = this.state;\n    const updatedAbortSignal = options.abortSignal;\n    if (!state.isStarted) {\n      state.isStarted = true;\n      const response = await this.beginAnalyze(this.documents, this.tasks, {\n        ...this.options.analyze,\n        abortSignal: updatedAbortSignal ? updatedAbortSignal : this.options.analyze?.abortSignal\n      });\n      if (!response.operationLocation) {\n        throw new Error(\n          \"Expects a valid 'operationLocation' to retrieve analyze results but did not find any\"\n        );\n      }\n      state.jobId = getJobID(response.operationLocation);\n    }\n\n    const status = await this.getAnalyzeStatus(state.jobId!, {\n      ...this.statusOptions,\n      abortSignal: updatedAbortSignal ? updatedAbortSignal : options.abortSignal\n    });\n\n    if (!state.isCompleted && status.done) {\n      if (typeof options.fireProgress === \"function\") {\n        options.fireProgress(state);\n      }\n      const pagedIterator = this.listAnalyzeResults(state.jobId!, this.options.analyze || {});\n      state.result = Object.assign(pagedIterator, {\n        statistics: status.statistics\n      });\n      state.isCompleted = true;\n    }\n    return this;\n  }\n\n  async cancel(): Promise<BeginAnalyzePollerOperation> {\n    const state = this.state;\n    logger.warning(`The service does not yet support cancellation for beginAnalyze.`);\n    state.isCancelled = true;\n    return this;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { delay } from \"@azure/core-http\";\nimport { PollerLike, PollOperationState } from \"@azure/core-lro\";\nimport { PaginatedAnalyzeResults } from \"../../analyzeResult\";\nimport { JobManifestTasks } from \"../../generated/models\";\n\nimport { AnalysisPoller, AnalysisPollerOptions } from \"../poller\";\nimport { BeginAnalyzePollerOperation, BeginAnalyzePollState } from \"./operation\";\n\nexport interface AnalyzePollerOptions extends AnalysisPollerOptions {\n  tasks: JobManifestTasks;\n}\n\n/**\n * The status of an analyze operation\n */\nexport type BeginAnalyzeOperationState = PollOperationState<PaginatedAnalyzeResults>;\n\n/**\n * Result type of the Analyze Long-Running-Operation (LRO)\n */\nexport type AnalyzePollerLike = PollerLike<BeginAnalyzeOperationState, PaginatedAnalyzeResults>;\n\n/**\n * Class that represents a poller that waits for the analyze results.\n */\nexport class BeginAnalyzePoller extends AnalysisPoller<\n  BeginAnalyzePollState,\n  PaginatedAnalyzeResults\n> {\n  // eslint-disable-next-line @azure/azure-sdk/ts-use-interface-parameters\n  constructor(pollerOptions: AnalyzePollerOptions) {\n    const {\n      client,\n      documents,\n      analysisOptions,\n      tasks,\n      updateIntervalInMs = 5000,\n      resumeFrom\n    } = pollerOptions;\n\n    let state: BeginAnalyzePollState | undefined;\n\n    if (resumeFrom) {\n      state = JSON.parse(resumeFrom).state;\n    }\n    const { requestOptions, tracingOptions } = analysisOptions || {};\n    const operation = new BeginAnalyzePollerOperation(\n      state || {},\n      client,\n      documents,\n      tasks,\n      {\n        analyze: { requestOptions, tracingOptions },\n        polling: {\n          updateIntervalInMs,\n          resumeFrom\n        }\n      },\n      analysisOptions\n    );\n\n    super(operation);\n\n    this.updateIntervalInMs = updateIntervalInMs;\n  }\n\n  public delay(): Promise<void> {\n    return delay(this.updateIntervalInMs);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  PipelineOptions,\n  createPipelineFromOptions,\n  InternalPipelineOptions,\n  isTokenCredential,\n  bearerTokenAuthenticationPolicy,\n  operationOptionsToRequestOptionsBase\n} from \"@azure/core-http\";\nimport { TokenCredential, KeyCredential } from \"@azure/core-auth\";\nimport { SDK_VERSION } from \"./constants\";\nimport { GeneratedClient } from \"./generated/generatedClient\";\nimport { logger } from \"./logger\";\nimport {\n  JobManifestTasks as GeneratedJobManifestTasks,\n  DetectLanguageInput,\n  GeneratedClientEntitiesRecognitionPiiOptionalParams,\n  GeneratedClientSentimentOptionalParams,\n  PiiTaskParametersDomain,\n  TextDocumentInput\n} from \"./generated/models\";\nimport {\n  DetectLanguageResultArray,\n  makeDetectLanguageResultArray\n} from \"./detectLanguageResultArray\";\nimport {\n  RecognizeCategorizedEntitiesResultArray,\n  makeRecognizeCategorizedEntitiesResultArray\n} from \"./recognizeCategorizedEntitiesResultArray\";\nimport {\n  AnalyzeSentimentResultArray,\n  makeAnalyzeSentimentResultArray\n} from \"./analyzeSentimentResultArray\";\nimport {\n  makeExtractKeyPhrasesResultArray,\n  ExtractKeyPhrasesResultArray\n} from \"./extractKeyPhrasesResultArray\";\nimport {\n  RecognizePiiEntitiesResultArray,\n  makeRecognizePiiEntitiesResultArray\n} from \"./recognizePiiEntitiesResultArray\";\nimport {\n  RecognizeLinkedEntitiesResultArray,\n  makeRecognizeLinkedEntitiesResultArray\n} from \"./recognizeLinkedEntitiesResultArray\";\nimport { createSpan } from \"./tracing\";\nimport { CanonicalCode } from \"@opentelemetry/api\";\nimport { createTextAnalyticsAzureKeyCredentialPolicy } from \"./azureKeyCredentialPolicy\";\nimport {\n  addEncodingParamToTask,\n  AddParamsToTask,\n  addStrEncodingParam,\n  handleInvalidDocumentBatch\n} from \"./util\";\nimport {\n  BeginAnalyzeHealthcareOperationState,\n  BeginAnalyzeHealthcarePoller,\n  HealthPollerLike\n} from \"./lro/health/poller\";\nimport { BeginAnalyzeHealthcareOptions, HealthcareJobOptions } from \"./lro/health/operation\";\nimport { TextAnalyticsOperationOptions } from \"./textAnalyticsOperationOptions\";\nimport {\n  AnalyzePollerLike,\n  BeginAnalyzeOperationState,\n  BeginAnalyzePoller\n} from \"./lro/analyze/poller\";\nimport { AnalyzeJobOptions, BeginAnalyzeOptions } from \"./lro/analyze/operation\";\nimport { PollingOptions } from \"./lro/poller\";\n\nexport {\n  BeginAnalyzeOptions,\n  AnalyzePollerLike,\n  BeginAnalyzeOperationState,\n  BeginAnalyzeHealthcareOptions,\n  HealthPollerLike,\n  AnalyzeJobOptions,\n  PollingOptions,\n  HealthcareJobOptions,\n  BeginAnalyzeHealthcareOperationState\n};\n\nconst DEFAULT_COGNITIVE_SCOPE = \"https://cognitiveservices.azure.com/.default\";\n\n/**\n * Client options used to configure TextAnalytics API requests.\n */\nexport interface TextAnalyticsClientOptions extends PipelineOptions {\n  /**\n   * The default country hint to use. Defaults to \"us\".\n   */\n  defaultCountryHint?: string;\n\n  /**\n   * The default language to use. Defaults to \"en\".\n   */\n  defaultLanguage?: string;\n}\n\n/**\n * Options for the detect languages operation.\n */\nexport type DetectLanguageOptions = TextAnalyticsOperationOptions;\n\n/**\n * Options for the recognize entities operation.\n */\nexport type RecognizeCategorizedEntitiesOptions = TextAnalyticsOperationOptions;\n\n/**\n * Options for the analyze sentiment operation.\n */\nexport interface AnalyzeSentimentOptions extends TextAnalyticsOperationOptions {\n  /**\n   * Whether to mine the opinions of a sentence and conduct more  granular\n   * analysis around the aspects of a product or service (also known as\n   * aspect-based sentiment analysis). If set to true, the returned\n   * `SentenceSentiment` objects will have property `mined_opinions` containing\n   * the result of this analysis.\n   * More information about the feature can be found here: https://docs.microsoft.com/azure/cognitive-services/text-analytics/how-tos/text-analytics-how-to-sentiment-analysis?tabs=version-3-1#opinion-mining\n   */\n  includeOpinionMining?: boolean;\n}\n\n/**\n * The types of PII domains the user can choose from.\n */\nexport enum PiiEntityDomainType {\n  /**\n   * See https://aka.ms/tanerpii for more information.\n   */\n  PROTECTED_HEALTH_INFORMATION = \"PHI\"\n}\n\n/**\n * Options for the recognize PII entities operation.\n */\nexport interface RecognizePiiEntitiesOptions extends TextAnalyticsOperationOptions {\n  /**\n   * Filters entities to ones only included in the specified domain (e.g., if\n   * set to 'PHI', entities in the Protected Healthcare Information domain will\n   * only be returned). See https://aka.ms/tanerpii for more information.\n   */\n  domainFilter?: PiiEntityDomainType;\n}\n\n/**\n * Options for the extract key phrases operation.\n */\nexport type ExtractKeyPhrasesOptions = TextAnalyticsOperationOptions;\n\n/**\n * Options for the recognize linked entities operation.\n */\nexport type RecognizeLinkedEntitiesOptions = TextAnalyticsOperationOptions;\n\n/**\n * Options for an entities recognition task.\n */\nexport type EntitiesTask = {\n  /**\n   * The version of the text analytics model used by this operation on this\n   * batch of input documents.\n   */\n  modelVersion?: string;\n};\n\n/**\n * Options for a Pii entities recognition task.\n */\nexport type PiiTask = {\n  /**\n   * Filters entities to ones only included in the specified domain (e.g., if\n   * set to 'PHI', entities in the Protected Healthcare Information domain will\n   * only be returned). See https://aka.ms/tanerpii for more information.\n   */\n  domain?: PiiTaskParametersDomain;\n  /**\n   * The version of the text analytics model used by this operation on this\n   * batch of input documents.\n   */\n  modelVersion?: string;\n};\n\n/**\n * Options for a key phrases recognition task.\n */\nexport interface KeyPhrasesTask {\n  /**\n   * The version of the text analytics model used by this operation on this\n   * batch of input documents.\n   */\n  modelVersion?: string;\n}\n\n/**\n * Description of collection of tasks for the analyze API to perform on input documents\n */\nexport interface JobManifestTasks {\n  /**\n   * A collection of descriptions of entities recognition tasks.\n   */\n  entityRecognitionTasks?: EntitiesTask[];\n  /**\n   * A collection of descriptions of Pii entities recognition tasks.\n   */\n  entityRecognitionPiiTasks?: PiiTask[];\n  /**\n   * A collection of descriptions of key phrases recognition tasks.\n   */\n  keyPhraseExtractionTasks?: KeyPhrasesTask[];\n}\n/**\n * Client class for interacting with Azure Text Analytics.\n */\nexport class TextAnalyticsClient {\n  /**\n   * The URL to the TextAnalytics endpoint\n   */\n  public readonly endpointUrl: string;\n\n  /**\n   * The default country hint to use. Defaults to \"us\".\n   */\n  public defaultCountryHint: string;\n\n  /**\n   * The default language to use. Defaults to \"en\".\n   */\n  public defaultLanguage: string;\n\n  /**\n   * @internal\n   * @ignore\n   * A reference to the auto-generated TextAnalytics HTTP client.\n   */\n  private readonly client: GeneratedClient;\n\n  /**\n   * Creates an instance of TextAnalyticsClient.\n   *\n   * Example usage:\n   * ```ts\n   * import { TextAnalyticsClient, AzureKeyCredential } from \"@azure/ai-text-analytics\";\n   *\n   * const client = new TextAnalyticsClient(\n   *    \"<service endpoint>\",\n   *    new AzureKeyCredential(\"<api key>\")\n   * );\n   * ```\n   * @param {string} endpointUrl The URL to the TextAnalytics endpoint\n   * @param {TokenCredential | KeyCredential} credential Used to authenticate requests to the service.\n   * @param {TextAnalyticsClientOptions} [options] Used to configure the TextAnalytics client.\n   */\n  constructor(\n    endpointUrl: string,\n    credential: TokenCredential | KeyCredential,\n    options: TextAnalyticsClientOptions = {}\n  ) {\n    this.endpointUrl = endpointUrl;\n    const { defaultCountryHint = \"us\", defaultLanguage = \"en\", ...pipelineOptions } = options;\n    this.defaultCountryHint = defaultCountryHint;\n    this.defaultLanguage = defaultLanguage;\n\n    const libInfo = `azsdk-js-ai-textanalytics/${SDK_VERSION}`;\n    if (!pipelineOptions.userAgentOptions) {\n      pipelineOptions.userAgentOptions = {};\n    }\n    if (pipelineOptions.userAgentOptions.userAgentPrefix) {\n      pipelineOptions.userAgentOptions.userAgentPrefix = `${pipelineOptions.userAgentOptions.userAgentPrefix} ${libInfo}`;\n    } else {\n      pipelineOptions.userAgentOptions.userAgentPrefix = libInfo;\n    }\n\n    const authPolicy = isTokenCredential(credential)\n      ? bearerTokenAuthenticationPolicy(credential, DEFAULT_COGNITIVE_SCOPE)\n      : createTextAnalyticsAzureKeyCredentialPolicy(credential);\n\n    const internalPipelineOptions: InternalPipelineOptions = {\n      ...pipelineOptions,\n      ...{\n        loggingOptions: {\n          logger: logger.info,\n          allowedHeaderNames: [\"x-ms-correlation-request-id\", \"x-ms-request-id\"]\n        }\n      }\n    };\n\n    const pipeline = createPipelineFromOptions(internalPipelineOptions, authPolicy);\n\n    this.client = new GeneratedClient(this.endpointUrl, pipeline);\n  }\n\n  /**\n   * Runs a predictive model to determine the language that the passed-in\n   * input strings are written in, and returns, for each one, the detected\n   * language as well as a score indicating the model's confidence that the\n   * inferred language is correct.  Scores close to 1 indicate high certainty in\n   * the result.  120 languages are supported.\n   * @param documents A collection of input strings to analyze.\n   * @param countryHint Indicates the country of origin for all of\n   *   the input strings to assist the text analytics model in predicting\n   *   the language they are written in.  If unspecified, this value will be\n   *   set to the default country hint in `TextAnalyticsClientOptions`.\n   *   If set to an empty string, or the string \"none\", the service will apply a\n   *   model where the country is explicitly unset.\n   *   The same country hint is applied to all strings in the input collection.\n   * @param options Optional parameters for the operation.\n   */\n  public async detectLanguage(\n    documents: string[],\n    countryHint?: string,\n    options?: DetectLanguageOptions\n  ): Promise<DetectLanguageResultArray>;\n  /**\n   * Runs a predictive model to determine the language that the passed-in\n   * input document are written in, and returns, for each one, the detected\n   * language as well as a score indicating the model's confidence that the\n   * inferred language is correct.  Scores close to 1 indicate high certainty in\n   * the result.  120 languages are supported.\n   * @param documents A collection of input documents to analyze.\n   * @param options Optional parameters for the operation.\n   */\n  public async detectLanguage(\n    documents: DetectLanguageInput[],\n    options?: DetectLanguageOptions\n  ): Promise<DetectLanguageResultArray>;\n  public async detectLanguage(\n    documents: string[] | DetectLanguageInput[],\n    countryHintOrOptions?: string | DetectLanguageOptions,\n    options?: DetectLanguageOptions\n  ): Promise<DetectLanguageResultArray> {\n    let realOptions: DetectLanguageOptions;\n    let realInputs: DetectLanguageInput[];\n\n    if (!Array.isArray(documents) || documents.length === 0) {\n      throw new Error(\"'documents' must be a non-empty array\");\n    }\n\n    if (isStringArray(documents)) {\n      const countryHint = (countryHintOrOptions as string) || this.defaultCountryHint;\n      realInputs = convertToDetectLanguageInput(documents, countryHint);\n      realOptions = options || {};\n    } else {\n      // Replace \"none\" hints with \"\"\n      realInputs = documents.map((input) => ({\n        ...input,\n        countryHint: input.countryHint === \"none\" ? \"\" : input.countryHint\n      }));\n      realOptions = (countryHintOrOptions as DetectLanguageOptions) || {};\n    }\n\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"TextAnalyticsClient-detectLanguages\",\n      realOptions\n    );\n\n    try {\n      const result = await this.client.languages(\n        {\n          documents: realInputs\n        },\n        operationOptionsToRequestOptionsBase(finalOptions)\n      );\n\n      return makeDetectLanguageResultArray(\n        realInputs,\n        result.documents,\n        result.errors,\n        result.modelVersion,\n        result.statistics\n      );\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Runs a predictive model to identify a collection of named entities\n   * in the passed-in input strings, and categorize those entities into types\n   * such as person, location, or organization.  For more information on \n   * available categories, see\n   * https://docs.microsoft.com/azure/cognitive-services/Text-Analytics/named-entity-types.\n   * For a list of languages supported by this operation, see\n   * https://docs.microsoft.com/azure/cognitive-services/text-analytics/language-support.\n   * @param documents The input strings to analyze.\n   * @param language The language that all the input strings are\n        written in. If unspecified, this value will be set to the default\n        language in `TextAnalyticsClientOptions`.  \n        If set to an empty string, the service will apply a model\n        where the lanuage is explicitly set to \"None\".\n   * @param options Optional parameters for the operation.\n   */\n  public async recognizeEntities(\n    documents: string[],\n    language?: string,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options?: RecognizeCategorizedEntitiesOptions\n  ): Promise<RecognizeCategorizedEntitiesResultArray>;\n  /**\n   * Runs a predictive model to identify a collection of named entities\n   * in the passed-in input documents, and categorize those entities into types\n   * such as person, location, or organization.  For more information on\n   * available categories, see\n   * https://docs.microsoft.com/azure/cognitive-services/Text-Analytics/named-entity-types.\n   * For a list of languages supported by this operation, see\n   * https://docs.microsoft.com/azure/cognitive-services/text-analytics/language-support.\n   * @param documents The input documents to analyze.\n   * @param options Optional parameters for the operation.\n   */\n  public async recognizeEntities(\n    documents: TextDocumentInput[],\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options?: RecognizeCategorizedEntitiesOptions\n  ): Promise<RecognizeCategorizedEntitiesResultArray>;\n  public async recognizeEntities(\n    documents: string[] | TextDocumentInput[],\n    languageOrOptions?: string | RecognizeCategorizedEntitiesOptions,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options?: RecognizeCategorizedEntitiesOptions\n  ): Promise<RecognizeCategorizedEntitiesResultArray> {\n    let realOptions: RecognizeCategorizedEntitiesOptions;\n    let realInputs: TextDocumentInput[];\n\n    if (!Array.isArray(documents) || documents.length === 0) {\n      throw new Error(\"'documents' must be a non-empty array\");\n    }\n\n    if (isStringArray(documents)) {\n      const language = (languageOrOptions as string) || this.defaultLanguage;\n      realInputs = convertToTextDocumentInput(documents, language);\n      realOptions = options || {};\n    } else {\n      realInputs = documents;\n      realOptions = (languageOrOptions as RecognizeCategorizedEntitiesOptions) || {};\n    }\n\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"TextAnalyticsClient-recognizeEntities\",\n      realOptions\n    );\n\n    try {\n      const result = await this.client.entitiesRecognitionGeneral(\n        {\n          documents: realInputs\n        },\n        operationOptionsToRequestOptionsBase(addStrEncodingParam(finalOptions))\n      );\n\n      return makeRecognizeCategorizedEntitiesResultArray(\n        realInputs,\n        result.documents,\n        result.errors,\n        result.modelVersion,\n        result.statistics\n      );\n    } catch (e) {\n      /**\n       * This special logic handles REST exception with code\n       * InvalidDocumentBatch and is needed to maintain backward compatability\n       * with sdk v5.0.0 and earlier. In general, REST exceptions are thrown as\n       * is and include both outer and inner exception codes. However, the\n       * earlier versions were throwing an exception that included the inner\n       * code only.\n       */\n      const backwardCompatibleException = handleInvalidDocumentBatch(e);\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: backwardCompatibleException.message\n      });\n      throw backwardCompatibleException;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Runs a predictive model to identify the positive, negative, neutral, or mixed\n   * sentiment contained in the input strings, as well as scores indicating\n   * the model's confidence in each of the predicted sentiments.\n   * For a list of languages supported by this operation, see\n   * https://docs.microsoft.com/azure/cognitive-services/text-analytics/language-support.\n   * @param documents The input strings to analyze.\n   * @param language The language that all the input strings are\n        written in. If unspecified, this value will be set to the default\n        language in `TextAnalyticsClientOptions`.  \n        If set to an empty string, the service will apply a model\n        where the lanuage is explicitly set to \"None\".\n   * @param options Optional parameters for the operation.\n   */\n  public async analyzeSentiment(\n    documents: string[],\n    language?: string,\n    options?: AnalyzeSentimentOptions\n  ): Promise<AnalyzeSentimentResultArray>;\n  /**\n   * Runs a predictive model to identify the positive, negative or neutral, or mixed\n   * sentiment contained in the input documents, as well as scores indicating\n   * the model's confidence in each of the predicted sentiments.\n   * For a list of languages supported by this operation, see\n   * https://docs.microsoft.com/azure/cognitive-services/text-analytics/language-support.\n   * @param documents The input documents to analyze.\n   * @param options Optional parameters for the operation.\n   */\n  public async analyzeSentiment(\n    documents: TextDocumentInput[],\n    options?: AnalyzeSentimentOptions\n  ): Promise<AnalyzeSentimentResultArray>;\n  public async analyzeSentiment(\n    documents: string[] | TextDocumentInput[],\n    languageOrOptions?: string | AnalyzeSentimentOptions,\n    options?: AnalyzeSentimentOptions\n  ): Promise<AnalyzeSentimentResultArray> {\n    let realOptions: GeneratedClientSentimentOptionalParams;\n    let realInputs: TextDocumentInput[];\n\n    if (!Array.isArray(documents) || documents.length === 0) {\n      throw new Error(\"'documents' must be a non-empty array\");\n    }\n\n    if (isStringArray(documents)) {\n      const language = (languageOrOptions as string) || this.defaultLanguage;\n      realInputs = convertToTextDocumentInput(documents, language);\n      realOptions = {\n        includeStatistics: options?.includeStatistics,\n        modelVersion: options?.modelVersion,\n        opinionMining: options?.includeOpinionMining\n      };\n    } else {\n      realInputs = documents;\n      realOptions = {\n        includeStatistics: (languageOrOptions as AnalyzeSentimentOptions)?.includeStatistics,\n        modelVersion: (languageOrOptions as AnalyzeSentimentOptions)?.modelVersion,\n        opinionMining: (languageOrOptions as AnalyzeSentimentOptions)?.includeOpinionMining\n      };\n    }\n\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"TextAnalyticsClient-analyzeSentiment\",\n      realOptions\n    );\n\n    try {\n      const result = await this.client.sentiment(\n        {\n          documents: realInputs\n        },\n        operationOptionsToRequestOptionsBase(addStrEncodingParam(finalOptions))\n      );\n\n      return makeAnalyzeSentimentResultArray(realInputs, result);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Runs a model to identify a collection of significant phrases\n   * found in the passed-in input strings.\n   * For a list of languages supported by this operation, see\n   * https://docs.microsoft.com/azure/cognitive-services/text-analytics/language-support.\n   * @param documents The input strings to analyze.\n   * @param language The language that all the input strings are\n        written in. If unspecified, this value will be set to the default\n        language in `TextAnalyticsClientOptions`.  \n        If set to an empty string, the service will apply a model\n        where the lanuage is explicitly set to \"None\".\n   * @param options Optional parameters for the operation.\n   */\n  public async extractKeyPhrases(\n    documents: string[],\n    language?: string,\n    options?: ExtractKeyPhrasesOptions\n  ): Promise<ExtractKeyPhrasesResultArray>;\n  /**\n   * Runs a model to identify a collection of significant phrases\n   * found in the passed-in input documents.\n   * For a list of languages supported by this operation, see\n   * https://docs.microsoft.com/azure/cognitive-services/text-analytics/language-support.\n   * @param documents The input documents to analyze.\n   * @param options Optional parameters for the operation.\n   */\n  public async extractKeyPhrases(\n    documents: TextDocumentInput[],\n    options?: ExtractKeyPhrasesOptions\n  ): Promise<ExtractKeyPhrasesResultArray>;\n  public async extractKeyPhrases(\n    documents: string[] | TextDocumentInput[],\n    languageOrOptions?: string | ExtractKeyPhrasesOptions,\n    options?: ExtractKeyPhrasesOptions\n  ): Promise<ExtractKeyPhrasesResultArray> {\n    let realOptions: ExtractKeyPhrasesOptions;\n    let realInputs: TextDocumentInput[];\n\n    if (!Array.isArray(documents) || documents.length === 0) {\n      throw new Error(\"'documents' must be a non-empty array\");\n    }\n\n    if (isStringArray(documents)) {\n      const language = (languageOrOptions as string) || this.defaultLanguage;\n      realInputs = convertToTextDocumentInput(documents, language);\n      realOptions = options || {};\n    } else {\n      realInputs = documents;\n      realOptions = (languageOrOptions as ExtractKeyPhrasesOptions) || {};\n    }\n\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"TextAnalyticsClient-extractKeyPhrases\",\n      realOptions\n    );\n\n    try {\n      const result = await this.client.keyPhrases(\n        {\n          documents: realInputs\n        },\n        operationOptionsToRequestOptionsBase(finalOptions)\n      );\n\n      return makeExtractKeyPhrasesResultArray(\n        realInputs,\n        result.documents,\n        result.errors,\n        result.modelVersion,\n        result.statistics\n      );\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Runs a predictive model to identify a collection of entities containing\n   * personally identifiable information found in the passed-in input strings,\n   * and categorize those entities into types such as US social security\n   * number, drivers license number, or credit card number.\n   * For a list of languages supported by this operation, see\n   * https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/language-support.\n   * @param inputs The input strings to analyze.\n   * @param language The language that all the input strings are\n        written in. If unspecified, this value will be set to the default\n        language in `TextAnalyticsClientOptions`.  \n        If set to an empty string, the service will apply a model\n        where the lanuage is explicitly set to \"None\".\n   * @param options Optional parameters for the operation.\n   */\n  public async recognizePiiEntities(\n    inputs: string[],\n    language?: string,\n    options?: RecognizePiiEntitiesOptions\n  ): Promise<RecognizePiiEntitiesResultArray>;\n  /**\n   * Runs a predictive model to identify a collection of entities containing\n   * personally identifiable information found in the passed-in input documents,\n   * and categorize those entities into types such as US social security\n   * number, drivers license number, or credit card number.\n   * For a list of languages supported by this operation, see\n   * https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/language-support.\n   * @param inputs The input documents to analyze.\n   * @param options Optional parameters for the operation.\n   */\n  public async recognizePiiEntities(\n    inputs: TextDocumentInput[],\n    options?: RecognizePiiEntitiesOptions\n  ): Promise<RecognizePiiEntitiesResultArray>;\n  public async recognizePiiEntities(\n    inputs: string[] | TextDocumentInput[],\n    languageOrOptions?: string | RecognizePiiEntitiesOptions,\n    options?: RecognizePiiEntitiesOptions\n  ): Promise<RecognizePiiEntitiesResultArray> {\n    let realOptions: GeneratedClientEntitiesRecognitionPiiOptionalParams;\n    let realInputs: TextDocumentInput[];\n\n    if (isStringArray(inputs)) {\n      const language = (languageOrOptions as string) || this.defaultLanguage;\n      realInputs = convertToTextDocumentInput(inputs, language);\n      realOptions = options || {};\n      realOptions.domain = options?.domainFilter;\n    } else {\n      realInputs = inputs;\n      realOptions = (languageOrOptions as RecognizePiiEntitiesOptions) || {};\n      realOptions.domain = (languageOrOptions as RecognizePiiEntitiesOptions)?.domainFilter;\n    }\n\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"TextAnalyticsClient-recognizePiiEntities\",\n      realOptions\n    );\n\n    try {\n      const result = await this.client.entitiesRecognitionPii(\n        {\n          documents: realInputs\n        },\n        operationOptionsToRequestOptionsBase(addStrEncodingParam(finalOptions))\n      );\n\n      return makeRecognizePiiEntitiesResultArray(realInputs, result);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Runs a predictive model to identify a collection of entities\n   * found in the passed-in input strings, and include information linking the\n   * entities to their corresponding entries in a well-known knowledge base.\n   * For a list of languages supported by this operation, see\n   * https://docs.microsoft.com/azure/cognitive-services/text-analytics/language-support.\n   * @param documents The input strings to analyze.\n   * @param language The language that all the input strings are\n        written in. If unspecified, this value will be set to the default\n        language in `TextAnalyticsClientOptions`.  \n        If set to an empty string, the service will apply a model\n        where the lanuage is explicitly set to \"None\".\n   * @param options Optional parameters for the operation.\n   */\n  public async recognizeLinkedEntities(\n    documents: string[],\n    language?: string,\n    options?: RecognizeLinkedEntitiesOptions\n  ): Promise<RecognizeLinkedEntitiesResultArray>;\n  /**\n   * Runs a predictive model to identify a collection of entities\n   * found in the passed-in input documents, and include information linking the\n   * entities to their corresponding entries in a well-known knowledge base.\n   * For a list of languages supported by this operation, see\n   * https://docs.microsoft.com/azure/cognitive-services/text-analytics/language-support.\n   * @param documents The input documents to analyze.\n   * @param options Optional parameters for the operation.\n   */\n  public async recognizeLinkedEntities(\n    documents: TextDocumentInput[],\n    options?: RecognizeLinkedEntitiesOptions\n  ): Promise<RecognizeLinkedEntitiesResultArray>;\n  public async recognizeLinkedEntities(\n    documents: string[] | TextDocumentInput[],\n    languageOrOptions?: string | RecognizeLinkedEntitiesOptions,\n    options?: RecognizeLinkedEntitiesOptions\n  ): Promise<RecognizeLinkedEntitiesResultArray> {\n    let realOptions: RecognizeLinkedEntitiesOptions;\n    let realInputs: TextDocumentInput[];\n\n    if (!Array.isArray(documents) || documents.length === 0) {\n      throw new Error(\"'documents' must be a non-empty array\");\n    }\n\n    if (isStringArray(documents)) {\n      const language = (languageOrOptions as string) || this.defaultLanguage;\n      realInputs = convertToTextDocumentInput(documents, language);\n      realOptions = options || {};\n    } else {\n      realInputs = documents;\n      realOptions = (languageOrOptions as RecognizeLinkedEntitiesOptions) || {};\n    }\n\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"TextAnalyticsClient-recognizeLinkedEntities\",\n      realOptions\n    );\n\n    try {\n      const result = await this.client.entitiesLinking(\n        {\n          documents: realInputs\n        },\n        operationOptionsToRequestOptionsBase(addStrEncodingParam(finalOptions))\n      );\n\n      return makeRecognizeLinkedEntitiesResultArray(\n        realInputs,\n        result.documents,\n        result.errors,\n        result.modelVersion,\n        result.statistics\n      );\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Start a healthcare analysis job to recognize healthcare related entities (drugs, conditions,\n   * symptoms, etc) and their relations.\n   * @param documents Collection of documents to analyze.\n   * @param language The language that all the input strings are\n        written in. If unspecified, this value will be set to the default\n        language in `TextAnalyticsClientOptions`.\n        If set to an empty string, the service will apply a model\n        where the lanuage is explicitly set to \"None\".\n   * @param options The options parameters.\n   */\n  async beginAnalyzeHealthcare(\n    documents: string[],\n    language?: string,\n    options?: BeginAnalyzeHealthcareOptions\n  ): Promise<HealthPollerLike>;\n  /**\n   * Start a healthcare analysis job to recognize healthcare related entities (drugs, conditions,\n   * symptoms, etc) and their relations.\n   * @param documents Collection of documents to analyze.\n   * @param options The options parameters.\n   */\n  async beginAnalyzeHealthcare(\n    documents: TextDocumentInput[],\n    options?: BeginAnalyzeHealthcareOptions\n  ): Promise<HealthPollerLike>;\n\n  async beginAnalyzeHealthcare(\n    documents: string[] | TextDocumentInput[],\n    languageOrOptions?: string | BeginAnalyzeHealthcareOptions,\n    options?: BeginAnalyzeHealthcareOptions\n  ): Promise<HealthPollerLike> {\n    let realOptions: BeginAnalyzeHealthcareOptions;\n    let realInputs: TextDocumentInput[];\n    if (isStringArray(documents)) {\n      const language = (languageOrOptions as string) || this.defaultLanguage;\n      realInputs = convertToTextDocumentInput(documents, language);\n      realOptions = options || {};\n    } else {\n      realInputs = documents;\n      realOptions = (languageOrOptions as BeginAnalyzeHealthcareOptions) || {};\n    }\n\n    const poller = new BeginAnalyzeHealthcarePoller({\n      client: this.client,\n      documents: realInputs,\n      analysisOptions: realOptions.health,\n      ...realOptions.polling\n    });\n\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Submit a collection of text documents for analysis. Specify one or more unique tasks to be executed.\n   * @param documents Collection of documents to analyze\n   * @param tasks Tasks to execute.\n   * @param language The language that all the input strings are\n        written in. If unspecified, this value will be set to the default\n        language in `TextAnalyticsClientOptions`.\n        If set to an empty string, the service will apply a model\n        where the lanuage is explicitly set to \"None\".\n   * @param options The options parameters.\n   */\n  public async beginAnalyze(\n    documents: string[],\n    tasks: JobManifestTasks,\n    language?: string,\n    options?: BeginAnalyzeOptions\n  ): Promise<AnalyzePollerLike>;\n  /**\n   * Submit a collection of text documents for analysis. Specify one or more unique tasks to be executed.\n   * @param documents Collection of documents to analyze\n   * @param tasks Tasks to execute.\n   * @param options The options parameters.\n   */\n  public async beginAnalyze(\n    documents: TextDocumentInput[],\n    tasks: JobManifestTasks,\n    options?: BeginAnalyzeOptions\n  ): Promise<AnalyzePollerLike>;\n  public async beginAnalyze(\n    documents: string[] | TextDocumentInput[],\n    tasks: JobManifestTasks,\n    languageOrOptions?: string | BeginAnalyzeOptions,\n    options?: BeginAnalyzeOptions\n  ): Promise<AnalyzePollerLike> {\n    let realOptions: BeginAnalyzeOptions;\n    let realInputs: TextDocumentInput[];\n\n    if (!Array.isArray(documents) || documents.length === 0) {\n      throw new Error(\"'documents' must be a non-empty array\");\n    }\n\n    if (isStringArray(documents)) {\n      const language = (languageOrOptions as string) || this.defaultLanguage;\n      realInputs = convertToTextDocumentInput(documents, language);\n      realOptions = options || {};\n    } else {\n      realInputs = documents;\n      realOptions = (languageOrOptions as BeginAnalyzeOptions) || {};\n    }\n    const compiledTasks = addEncodingParamToAnalyzeInput(tasks);\n    const poller = new BeginAnalyzePoller({\n      client: this.client,\n      documents: realInputs,\n      tasks: compiledTasks,\n      analysisOptions: realOptions.analyze,\n      ...realOptions.polling\n    });\n\n    await poller.poll();\n    return poller;\n  }\n}\n\nfunction addEncodingParamToAnalyzeInput(tasks: JobManifestTasks): GeneratedJobManifestTasks {\n  return {\n    entityRecognitionPiiTasks: tasks.entityRecognitionPiiTasks\n      ?.map(addEncodingParamToTask)\n      .map(AddParamsToTask),\n    entityRecognitionTasks: tasks.entityRecognitionTasks\n      ?.map(addEncodingParamToTask)\n      .map(AddParamsToTask),\n    keyPhraseExtractionTasks: tasks.keyPhraseExtractionTasks?.map(AddParamsToTask)\n  };\n}\n\nfunction isStringArray(documents: any[]): documents is string[] {\n  return typeof documents[0] === \"string\";\n}\n\nfunction convertToDetectLanguageInput(\n  inputs: string[],\n  countryHint: string\n): DetectLanguageInput[] {\n  if (countryHint === \"none\") {\n    countryHint = \"\";\n  }\n  return inputs.map(\n    (text: string, index): DetectLanguageInput => {\n      return {\n        id: String(index),\n        countryHint,\n        text\n      };\n    }\n  );\n}\n\nfunction convertToTextDocumentInput(inputs: string[], language: string): TextDocumentInput[] {\n  return inputs.map(\n    (text: string, index): TextDocumentInput => {\n      return {\n        id: String(index),\n        language,\n        text\n      };\n    }\n  );\n}\n"],"names":["AnalyzeBatchInputMapper","MultiLanguageBatchInputMapper","LanguageBatchInputMapper","coreHttp.ServiceClient","coreHttp.getDefaultUserAgentValue","coreHttp.operationOptionsToRequestOptionsBase","coreHttp.Serializer","Mappers.GeneratedClientAnalyzeHeaders","Mappers.ErrorResponse","Parameters.body","Parameters.endpoint","Parameters.contentType","Parameters.accept","Mappers.AnalyzeJobState","Parameters.includeStatistics","Parameters.top","Parameters.skip","Parameters.jobId","Parameters.accept1","Mappers.HealthcareJobState","Parameters.jobId1","Mappers.GeneratedClientCancelHealthJobHeaders","Mappers.GeneratedClientHealthHeaders","Parameters.input","Parameters.modelVersion","Parameters.stringIndexType","Mappers.EntitiesResult","Mappers.PiiResult","Parameters.domain","Mappers.EntityLinkingResult","Mappers.KeyPhraseResult","Mappers.LanguageResult","Parameters.input1","Mappers.SentimentResponse","Parameters.opinionMining","createClientLogger","url","URL","URLSearchParams","RestError","getTracer","SpanKind","BaseRequestPolicy","Poller","delay","__asyncValues","__asyncDelegator","operationOptionsToRequestOptionsBase","CanonicalCode","PiiEntityDomainType","isTokenCredential","bearerTokenAuthenticationPolicy","createPipelineFromOptions"],"mappings":"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"}