{"version":3,"file":"operation.js","sourceRoot":"","sources":["../../../../src/lro/health/operation.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  AbortSignalLike,\n  OperationOptions,\n  operationOptionsToRequestOptionsBase\n} from \"@azure/core-http\";\n\nimport {\n  GeneratedClientHealthResponse as BeginAnalyzeHealthcareResponse,\n  GeneratedClientHealthStatusOptionalParams as HealthcareJobStatusOptions,\n  State,\n  TextDocumentBatchStatistics,\n  TextDocumentInput\n} from \"../../generated/models\";\nimport {\n  HealthcareResult,\n  HealthcareEntitiesArray,\n  PagedAsyncIterableHealthEntities,\n  PaginatedHealthcareEntities\n} from \"../../healthResult\";\nimport { PageSettings } from \"@azure/core-paging\";\nimport {\n  addStrEncodingParam,\n  getJobID,\n  handleInvalidDocumentBatch,\n  nextLinkToTopAndSkip\n} from \"../../util\";\nimport {\n  AnalysisPollOperation,\n  AnalysisPollOperationState,\n  PollingOptions,\n  TextAnalyticsStatusOperationOptions\n} from \"../poller\";\nimport { GeneratedClient as Client } from \"../../generated\";\nimport { combineSuccessfulAndErroneousDocuments } from \"../../textAnalyticsResult\";\nimport { CanonicalCode } from \"@opentelemetry/api\";\nimport { createSpan } from \"../../tracing\";\nimport { TextAnalyticsOperationOptions } from \"../../textAnalyticsOperationOptions\";\nexport { State };\n\ninterface HealthcareResultWithPagination {\n  result: HealthcareEntitiesArray;\n  top?: number;\n  skip?: number;\n}\n\ninterface HealthcareJobStatus {\n  done: boolean;\n  /**\n   * Statistics about the input document batch and how it was processed\n   * by the service. This property will have a value when includeStatistics is set to true\n   * in the client call.\n   */\n  statistics?: TextDocumentBatchStatistics;\n  /**\n   * The version of the text analytics model used by this operation on this\n   * batch of input documents.\n   */\n  modelVersion?: string;\n}\n\ninterface BeginAnalyzeHealthcareInternalOptions extends OperationOptions {\n  /**\n   * This value indicates which model will be used for scoring. If a model-version is\n   * not specified, the API should default to the latest, non-preview version.\n   * For supported model versions, see operation-specific documentation, for example:\n   * https://docs.microsoft.com/azure/cognitive-services/text-analytics/how-tos/text-analytics-how-to-sentiment-analysis#model-versioning\n   */\n  modelVersion?: string;\n}\n\n/**\n * Options for configuring analyze healthcare jobs.\n */\nexport interface HealthcareJobOptions extends TextAnalyticsOperationOptions {}\n\n/**\n * Options for the begin analyze healthcare operation.\n */\nexport interface BeginAnalyzeHealthcareOptions {\n  /**\n   * Options related to polling from the service.\n   */\n  polling?: PollingOptions;\n  /**\n   * Options related to the healthcare job.\n   */\n  health?: HealthcareJobOptions;\n}\n\n/**\n * The state of the begin analyze healthcare polling operation.\n */\nexport interface BeginAnalyzeHealthcarePollState\n  extends AnalysisPollOperationState<PaginatedHealthcareEntities> {}\n\n/**\n * Class that represents a poller that waits for the healthcare results.\n */\nexport class BeginAnalyzeHealthcarePollerOperation extends AnalysisPollOperation<\n  BeginAnalyzeHealthcarePollState,\n  PaginatedHealthcareEntities\n> {\n  constructor(\n    public state: BeginAnalyzeHealthcarePollState,\n    // eslint-disable-next-line @azure/azure-sdk/ts-use-interface-parameters\n    private client: Client,\n    private documents: TextDocumentInput[],\n    private options: BeginAnalyzeHealthcareOptions = {},\n    private statusOptions: TextAnalyticsStatusOperationOptions\n  ) {\n    super(state);\n  }\n\n  /**\n   * should be called only after all the status of the healthcare jobs became\n   * \"succeeded\" and it returns an iterator for the results and provides a\n   * byPage method to return the results paginated.\n   */\n  private listHealthcareEntitiesByPage(\n    jobId: string,\n    options: HealthcareJobStatusOptions = {}\n  ): PagedAsyncIterableHealthEntities {\n    const iter = this._listHealthcareEntities(jobId, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        const pageOptions = { ...options, top: settings?.maxPageSize };\n        return this._listHealthcareEntitiesPaginated(jobId, pageOptions);\n      }\n    };\n  }\n\n  /**\n   * returns an iterator to the results of a healthcare job.\n   */\n  private async *_listHealthcareEntities(\n    jobId: string,\n    options?: HealthcareJobStatusOptions\n  ): AsyncIterableIterator<HealthcareResult> {\n    for await (const page of this._listHealthcareEntitiesPaginated(jobId, options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * returns an iterator to arrays of the results of a healthcare job.\n   */\n  private async *_listHealthcareEntitiesPaginated(\n    jobId: string,\n    options?: HealthcareJobStatusOptions\n  ): AsyncIterableIterator<HealthcareEntitiesArray> {\n    let response = await this._listHealthcareEntitiesSinglePage(jobId, options);\n    yield response.result;\n    while (response.skip) {\n      const optionsWithContinuation: HealthcareJobStatusOptions = {\n        ...options,\n        top: response.top,\n        skip: response.skip\n      };\n      response = await this._listHealthcareEntitiesSinglePage(jobId, optionsWithContinuation);\n      yield response.result;\n    }\n  }\n\n  /**\n   * returns an iterator to arrays of the sorted results of a healthcare job.\n   */\n  private async _listHealthcareEntitiesSinglePage(\n    jobId: string,\n    options?: HealthcareJobStatusOptions\n  ): Promise<HealthcareResultWithPagination> {\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"TextAnalyticsClient-_listHealthcareEntitiesSinglePage\",\n      options || {}\n    );\n    try {\n      const response = await this.client.healthStatus(\n        jobId,\n        operationOptionsToRequestOptionsBase(finalOptions)\n      );\n      if (response.results) {\n        const result = combineSuccessfulAndErroneousDocuments(this.documents, response.results);\n        return response.nextLink\n          ? { result, ...nextLinkToTopAndSkip(response.nextLink) }\n          : { result };\n      } else {\n        throw new Error(\"Healthcare task has succeeded but the there are no results!\");\n      }\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * returns whether the healthcare job is done and if so returns also\n   * statistics and the model version used.\n   */\n  private async getHealthStatus(\n    jobId: string,\n    options?: HealthcareJobStatusOptions\n  ): Promise<HealthcareJobStatus> {\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"TextAnalyticsClient-getHealthStatus\",\n      options || {}\n    );\n    try {\n      const response = await this.client.healthStatus(\n        jobId,\n        operationOptionsToRequestOptionsBase(finalOptions)\n      );\n      switch (response.status) {\n        case \"succeeded\": {\n          if (response.results) {\n            return {\n              done: true,\n              statistics: response.results.statistics,\n              modelVersion: response.results.modelVersion\n            };\n          } else {\n            throw new Error(\"Healthcare task has succeeded but the there are no results!\");\n          }\n        }\n        case \"failed\": {\n          const errors = response.errors\n            ?.map((e) => `  code ${e.code}, message: '${e.message}'`)\n            .join(\"\\n\");\n          const message = `Healthcare analysis failed. Error(s): ${errors || \"\"}`;\n          throw new Error(message);\n        }\n        case \"notStarted\":\n        case \"running\":\n          break;\n        default: {\n          throw new Error(\"Unrecognized state of healthcare job!\");\n        }\n      }\n      return { done: false };\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  private async beginAnalyzeHealthcare(\n    documents: TextDocumentInput[],\n    options?: BeginAnalyzeHealthcareInternalOptions\n  ): Promise<BeginAnalyzeHealthcareResponse> {\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"TextAnalyticsClient-beginAnalyzeHealthcare\",\n      addStrEncodingParam(options)\n    );\n\n    try {\n      return await this.client.health(\n        { documents: documents },\n        operationOptionsToRequestOptionsBase(finalOptions)\n      );\n    } catch (e) {\n      const exception = handleInvalidDocumentBatch(e);\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: exception.message\n      });\n      throw exception;\n    } finally {\n      span.end();\n    }\n  }\n\n  async update(\n    options: {\n      abortSignal?: AbortSignalLike;\n      fireProgress?: (state: BeginAnalyzeHealthcarePollState) => void;\n    } = {}\n  ): Promise<BeginAnalyzeHealthcarePollerOperation> {\n    const state = this.state;\n    const updatedAbortSignal = options.abortSignal;\n    if (!state.isStarted) {\n      state.isStarted = true;\n      const response = await this.beginAnalyzeHealthcare(this.documents, {\n        ...this.options.health,\n        abortSignal: updatedAbortSignal ? updatedAbortSignal : options.abortSignal\n      });\n      if (!response.operationLocation) {\n        throw new Error(\n          \"Expects a valid 'operationLocation' to retrieve health results but did not find any\"\n        );\n      }\n      state.jobId = getJobID(response.operationLocation);\n    }\n    const status = await this.getHealthStatus(state.jobId!, {\n      ...this.statusOptions,\n      abortSignal: updatedAbortSignal ? updatedAbortSignal : options.abortSignal\n    });\n\n    if (!state.isCompleted && status.done) {\n      if (typeof options.fireProgress === \"function\") {\n        options.fireProgress(state);\n      }\n      const pagedIterator = this.listHealthcareEntitiesByPage(\n        state.jobId!,\n        this.options.health || {}\n      );\n      state.result = Object.assign(pagedIterator, {\n        statistics: status.statistics,\n        modelVersion: status.modelVersion!\n      });\n      state.isCompleted = true;\n    }\n    return this;\n  }\n\n  async cancel(): Promise<BeginAnalyzeHealthcarePollerOperation> {\n    const state = this.state;\n    if (state.jobId) {\n      await this.client.cancelHealthJob(state.jobId, this.options.health);\n    }\n    state.isCancelled = true;\n    return this;\n  }\n}\n"]}