{"version":3,"file":"poller.js","sourceRoot":"","sources":["../../../../src/lro/health/poller.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,EAAE,KAAK,EAAE,MAAM,kBAAkB,CAAC;AAIzC,OAAO,EAAE,cAAc,EAAyB,MAAM,WAAW,CAAC;AAClE,OAAO,EACL,qCAAqC,EAEtC,MAAM,aAAa,CAAC;AAerB;;GAEG;AACH,MAAM,OAAO,4BAA6B,SAAQ,cAGjD;IACC,wEAAwE;IACxE,YAAY,aAAoC;QAC9C,MAAM,EACJ,MAAM,EACN,SAAS,EACT,eAAe,EACf,kBAAkB,GAAG,IAAI,EACzB,UAAU,EACX,GAAG,aAAa,CAAC;QAElB,IAAI,KAAkD,CAAC;QAEvD,IAAI,UAAU,EAAE;YACd,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC;SACtC;QACD,MAAM,EAAE,iBAAiB,EAAE,cAAc,EAAE,cAAc,EAAE,GAAG,eAAe,IAAI,EAAE,CAAC;QACpF,MAAM,SAAS,GAAG,IAAI,qCAAqC,CACzD,KAAK,IAAI,EAAE,EACX,MAAM,EACN,SAAS,EACT;YACE,MAAM,EAAE,eAAe;YACvB,OAAO,EAAE;gBACP,kBAAkB;gBAClB,UAAU;aACX;SACF;QACD,yEAAyE;QACzE,oCAAoC;QACpC,EAAE,iBAAiB,EAAE,cAAc,EAAE,cAAc,EAAE,CACtD,CAAC;QAEF,KAAK,CAAC,SAAS,CAAC,CAAC;QAEjB,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;IAC/C,CAAC;IAEM,KAAK;QACV,OAAO,KAAK,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;IACxC,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { delay } from \"@azure/core-http\";\nimport { PollerLike, PollOperationState } from \"@azure/core-lro\";\nimport { PaginatedHealthcareEntities } from \"../../healthResult\";\n\nimport { AnalysisPoller, AnalysisPollerOptions } from \"../poller\";\nimport {\n  BeginAnalyzeHealthcarePollerOperation,\n  BeginAnalyzeHealthcarePollState\n} from \"./operation\";\n\n/**\n * The status of a health operation\n */\nexport type BeginAnalyzeHealthcareOperationState = PollOperationState<PaginatedHealthcareEntities>;\n\n/**\n * Result type of the Health Long-Running-Operation (LRO)\n */\nexport type HealthPollerLike = PollerLike<\n  BeginAnalyzeHealthcareOperationState,\n  PaginatedHealthcareEntities\n>;\n\n/**\n * Class that represents a poller that waits for the healthcare results.\n */\nexport class BeginAnalyzeHealthcarePoller extends AnalysisPoller<\n  BeginAnalyzeHealthcarePollState,\n  PaginatedHealthcareEntities\n> {\n  // eslint-disable-next-line @azure/azure-sdk/ts-use-interface-parameters\n  constructor(pollerOptions: AnalysisPollerOptions) {\n    const {\n      client,\n      documents,\n      analysisOptions,\n      updateIntervalInMs = 5000,\n      resumeFrom\n    } = pollerOptions;\n\n    let state: BeginAnalyzeHealthcarePollState | undefined;\n\n    if (resumeFrom) {\n      state = JSON.parse(resumeFrom).state;\n    }\n    const { includeStatistics, requestOptions, tracingOptions } = analysisOptions || {};\n    const operation = new BeginAnalyzeHealthcarePollerOperation(\n      state || {},\n      client,\n      documents,\n      {\n        health: analysisOptions,\n        polling: {\n          updateIntervalInMs,\n          resumeFrom\n        }\n      },\n      // take out modelVersion from the options that will be sent to the status\n      // API because it is not applicable.\n      { includeStatistics, requestOptions, tracingOptions }\n    );\n\n    super(operation);\n\n    this.updateIntervalInMs = updateIntervalInMs;\n  }\n\n  public delay(): Promise<void> {\n    return delay(this.updateIntervalInMs);\n  }\n}\n"]}