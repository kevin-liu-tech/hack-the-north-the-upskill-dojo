{"version":3,"file":"poller.js","sourceRoot":"","sources":["../../../src/lro/poller.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;;AAElC,OAAO,EAAE,KAAK,EAAoB,MAAM,kBAAkB,CAAC;AAC3D,OAAO,EAAE,MAAM,EAAqC,MAAM,iBAAiB,CAAC;AA+C5E;;GAEG;AACH,MAAM,OAAgB,cAAgC,SAAQ,MAAuB;IAArF;;QACE;;WAEG;QACI,uBAAkB,GAAW,IAAI,CAAC;IAQ3C,CAAC;IANC;;OAEG;IACG,KAAK;;YACT,OAAO,KAAK,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QACxC,CAAC;KAAA;CACF;AAED;;GAEG;AACH,MAAM,OAAgB,qBAAqB;IAEzC,YAAmB,KAAa;QAAb,UAAK,GAAL,KAAK,CAAQ;IAAG,CAAC;IAcpC;;OAEG;IACI,QAAQ;QACb,OAAO,IAAI,CAAC,SAAS,CAAC;YACpB,KAAK,EAAE,IAAI,CAAC,KAAK;SAClB,CAAC,CAAC;IACL,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { delay, OperationOptions } from \"@azure/core-http\";\nimport { Poller, PollOperation, PollOperationState } from \"@azure/core-lro\";\nimport { GeneratedClient } from \"../generated/generatedClient\";\nimport { TextDocumentInput } from \"../generated/models\";\nimport { TextAnalyticsOperationOptions } from \"../textAnalyticsOperationOptions\";\n\n/**\n * Options for configuring a polling operation.\n */\nexport interface PollingOptions {\n  /**\n   * Delay to wait until next poll, in milliseconds.\n   */\n  updateIntervalInMs?: number;\n  /**\n   * A serialized poller which can be used to resume an existing paused Long-Running-Operation.\n   */\n  resumeFrom?: string;\n}\n\nexport interface TextAnalyticsStatusOperationOptions extends OperationOptions {\n  /**\n   * If set to true, response will contain input and document level statistics.\n   */\n  includeStatistics?: boolean;\n}\n\n/**\n * Common parameters to a Poller.\n */\nexport interface AnalysisPollerOptions {\n  readonly client: GeneratedClient;\n  readonly documents: TextDocumentInput[];\n  readonly analysisOptions?: TextAnalyticsOperationOptions;\n  updateIntervalInMs?: number;\n  resumeFrom?: string;\n}\n\n/**\n * An interface representing the state of an analysis poller operation.\n */\nexport interface AnalysisPollOperationState<TResult> extends PollOperationState<TResult> {\n  /**\n   * The id of the analysis job.\n   */\n  jobId?: string;\n}\n\n/**\n * Common properties and methods of analysis Pollers.\n */\nexport abstract class AnalysisPoller<TState, TResult> extends Poller<TState, TResult> {\n  /**\n   * Defines how much time the poller is going to wait before making a new request to the service.\n   */\n  public updateIntervalInMs: number = 2000;\n\n  /**\n   * The method used by the poller to wait before attempting to update its operation.\n   */\n  async delay(): Promise<void> {\n    return delay(this.updateIntervalInMs);\n  }\n}\n\n/**\n * Common properties and methods of polling operations.\n */\nexport abstract class AnalysisPollOperation<TState, TResult>\n  implements PollOperation<TState, TResult> {\n  constructor(public state: TState) {}\n\n  /**\n   * @summary Meant to reach to the service and update the Poller operation.\n   * @param [options] The optional parameters, which is only an abortSignal from @azure/abort-controller\n   */\n  public abstract update(): Promise<PollOperation<TState, TResult>>;\n\n  /**\n   * @summary Meant to reach to the service and cancel the Poller operation.\n   * @param [options] The optional parameters, which is only an abortSignal from @azure/abort-controller\n   */\n  public abstract cancel(): Promise<PollOperation<TState, TResult>>;\n\n  /**\n   * @summary Serializes the Poller operation.\n   */\n  public toString(): string {\n    return JSON.stringify({\n      state: this.state\n    });\n  }\n}\n"]}