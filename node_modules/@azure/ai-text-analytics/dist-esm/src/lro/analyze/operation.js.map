{"version":3,"file":"operation.js","sourceRoot":"","sources":["../../../../src/lro/analyze/operation.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  AbortSignalLike,\n  OperationOptions,\n  operationOptionsToRequestOptionsBase\n} from \"@azure/core-http\";\n\nimport {\n  GeneratedClientAnalyzeResponse as BeginAnalyzeResponse,\n  GeneratedClientAnalyzeStatusOptionalParams as AnalyzeJobStatusOptions,\n  JobManifestTasks,\n  State,\n  TextDocumentBatchStatistics,\n  TextDocumentInput\n} from \"../../generated/models\";\nimport {\n  AnalyzeResult,\n  PagedAsyncIterableAnalyzeResults,\n  PaginatedAnalyzeResults\n} from \"../../analyzeResult\";\nimport { PageSettings } from \"@azure/core-paging\";\nimport {\n  addStrEncodingParam,\n  getJobID,\n  handleInvalidDocumentBatch,\n  nextLinkToTopAndSkip\n} from \"../../util\";\nimport {\n  AnalysisPollOperation,\n  AnalysisPollOperationState,\n  PollingOptions,\n  TextAnalyticsStatusOperationOptions\n} from \"../poller\";\nimport { GeneratedClient as Client } from \"../../generated\";\nimport { CanonicalCode } from \"@opentelemetry/api\";\nimport { createSpan } from \"../../tracing\";\nimport {\n  makeRecognizeCategorizedEntitiesResultArray,\n  RecognizeCategorizedEntitiesResultArray\n} from \"../../recognizeCategorizedEntitiesResultArray\";\nimport {\n  makeRecognizePiiEntitiesResultArray,\n  RecognizePiiEntitiesResultArray\n} from \"../../recognizePiiEntitiesResultArray\";\nimport {\n  ExtractKeyPhrasesResultArray,\n  makeExtractKeyPhrasesResultArray\n} from \"../../extractKeyPhrasesResultArray\";\nimport { logger } from \"../../logger\";\nexport { State };\n\ninterface AnalyzeResultsWithPagination {\n  result: AnalyzeResult;\n  top?: number;\n  skip?: number;\n}\n\ninterface AnalyzeJobStatus {\n  done: boolean;\n  /**\n   * Statistics about the input document batch and how it was processed\n   * by the service. This property will have a value when includeStatistics is set to true\n   * in the client call.\n   */\n  statistics?: TextDocumentBatchStatistics;\n}\n\ninterface BeginAnalyzeInternalOptions extends OperationOptions {}\n\n/**\n * Options for configuring analyze jobs.\n */\nexport interface AnalyzeJobOptions extends OperationOptions {\n  /**\n   * If set to true, response will contain input and document level statistics.\n   */\n  includeStatistics?: boolean;\n}\n\n/**\n * Options for the begin analyze operation.\n */\nexport interface BeginAnalyzeOptions {\n  /**\n   * Options related to polling from the service.\n   */\n  polling?: PollingOptions;\n  /**\n   * Options related to the analyze job.\n   */\n  analyze?: AnalyzeJobOptions;\n}\n\n/**\n * The state of the begin analyze polling operation.\n */\nexport interface BeginAnalyzePollState\n  extends AnalysisPollOperationState<PaginatedAnalyzeResults> {}\n\n/**\n * Class that represents a poller that waits for results of the analyze\n * operation.\n */\nexport class BeginAnalyzePollerOperation extends AnalysisPollOperation<\n  BeginAnalyzePollState,\n  PaginatedAnalyzeResults\n> {\n  constructor(\n    public state: BeginAnalyzePollState,\n    // eslint-disable-next-line @azure/azure-sdk/ts-use-interface-parameters\n    private client: Client,\n    private documents: TextDocumentInput[],\n    private tasks: JobManifestTasks,\n    private options: BeginAnalyzeOptions = {},\n    private statusOptions: TextAnalyticsStatusOperationOptions = {}\n  ) {\n    super(state);\n  }\n\n  /**\n   * should be called only after all the status of the analyze jobs became\n   * \"succeeded\" and it returns an iterator for the results and provides a\n   * byPage method to return the results paginated.\n   */\n  private listAnalyzeResults(\n    jobId: string,\n    options: AnalyzeJobStatusOptions = {}\n  ): PagedAsyncIterableAnalyzeResults {\n    const iter = this._listAnalyzeResultsPaginated(jobId, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        const pageOptions = { ...options, top: settings?.maxPageSize };\n        return this._listAnalyzeResultsPaginated(jobId, pageOptions);\n      }\n    };\n  }\n\n  /**\n   * returns an iterator to arrays of the results of an analyze job.\n   */\n  private async *_listAnalyzeResultsPaginated(\n    jobId: string,\n    options?: AnalyzeJobStatusOptions\n  ): AsyncIterableIterator<AnalyzeResult> {\n    let response = await this._listAnalyzeResultsSinglePage(jobId, options);\n    yield response.result;\n    while (response.skip) {\n      const optionsWithContinuation: AnalyzeJobStatusOptions = {\n        ...options,\n        top: response.top,\n        skip: response.skip\n      };\n      response = await this._listAnalyzeResultsSinglePage(jobId, optionsWithContinuation);\n      yield response.result;\n    }\n  }\n\n  /**\n   * returns an iterator to arrays of the sorted results of an analyze job.\n   */\n  private async _listAnalyzeResultsSinglePage(\n    jobId: string,\n    options?: AnalyzeJobStatusOptions\n  ): Promise<AnalyzeResultsWithPagination> {\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"TextAnalyticsClient-_listAnalyzeResultsSinglePage\",\n      options || {}\n    );\n    try {\n      const response = await this.client.analyzeStatus(\n        jobId,\n        operationOptionsToRequestOptionsBase(finalOptions)\n      );\n      const result: AnalyzeResult = {\n        entitiesRecognitionResults: response.tasks.entityRecognitionTasks?.map(\n          ({ results }): RecognizeCategorizedEntitiesResultArray =>\n            makeRecognizeCategorizedEntitiesResultArray(\n              this.documents,\n              results?.documents,\n              results?.errors,\n              results?.modelVersion,\n              results?.statistics\n            )\n        ),\n        piiEntitiesRecognitionResults: response.tasks.entityRecognitionPiiTasks?.map(\n          ({ results }): RecognizePiiEntitiesResultArray =>\n            makeRecognizePiiEntitiesResultArray(this.documents, results)\n        ),\n        keyPhrasesExtractionResults: response.tasks.keyPhraseExtractionTasks?.map(\n          ({ results }): ExtractKeyPhrasesResultArray =>\n            makeExtractKeyPhrasesResultArray(\n              this.documents,\n              results?.documents,\n              results?.errors,\n              results?.modelVersion,\n              results?.statistics\n            )\n        )\n      };\n      return response.nextLink\n        ? { result, ...nextLinkToTopAndSkip(response.nextLink) }\n        : { result };\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * returns whether the analyze job is done and if so returns also\n   * statistics.\n   */\n  private async getAnalyzeStatus(\n    jobId: string,\n    options?: AnalyzeJobStatusOptions\n  ): Promise<AnalyzeJobStatus> {\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"TextAnalyticsClient-getAnalyzeStatus\",\n      options || {}\n    );\n    try {\n      const response = await this.client.analyzeStatus(\n        jobId,\n        operationOptionsToRequestOptionsBase(finalOptions)\n      );\n      switch (response.status) {\n        case \"partiallySucceeded\":\n        case \"succeeded\": {\n          return {\n            done: true,\n            statistics: response.statistics\n          };\n        }\n        case \"failed\": {\n          const errors = response.errors\n            ?.map((e) => `  code ${e.code}, message: '${e.message}'`)\n            .join(\"\\n\");\n          const message = `Analysis failed. Error(s): ${errors || \"\"}`;\n          throw new Error(message);\n        }\n        case \"notStarted\":\n        case \"running\":\n          break;\n        default: {\n          throw new Error(`Unrecognized state of the analyze job!: ${response.status}`);\n        }\n      }\n      return { done: false };\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  private async beginAnalyze(\n    documents: TextDocumentInput[],\n    tasks: JobManifestTasks,\n    options?: BeginAnalyzeInternalOptions\n  ): Promise<BeginAnalyzeResponse> {\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"TextAnalyticsClient-beginAnalyze\",\n      addStrEncodingParam(options)\n    );\n\n    try {\n      return await this.client.analyze({\n        body: { analysisInput: { documents: documents }, tasks: tasks },\n        ...operationOptionsToRequestOptionsBase(finalOptions)\n      });\n    } catch (e) {\n      const exception = handleInvalidDocumentBatch(e);\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: exception.message\n      });\n      throw exception;\n    } finally {\n      span.end();\n    }\n  }\n\n  async update(\n    options: {\n      abortSignal?: AbortSignalLike;\n      fireProgress?: (state: BeginAnalyzePollState) => void;\n    } = {}\n  ): Promise<BeginAnalyzePollerOperation> {\n    const state = this.state;\n    const updatedAbortSignal = options.abortSignal;\n    if (!state.isStarted) {\n      state.isStarted = true;\n      const response = await this.beginAnalyze(this.documents, this.tasks, {\n        ...this.options.analyze,\n        abortSignal: updatedAbortSignal ? updatedAbortSignal : this.options.analyze?.abortSignal\n      });\n      if (!response.operationLocation) {\n        throw new Error(\n          \"Expects a valid 'operationLocation' to retrieve analyze results but did not find any\"\n        );\n      }\n      state.jobId = getJobID(response.operationLocation);\n    }\n\n    const status = await this.getAnalyzeStatus(state.jobId!, {\n      ...this.statusOptions,\n      abortSignal: updatedAbortSignal ? updatedAbortSignal : options.abortSignal\n    });\n\n    if (!state.isCompleted && status.done) {\n      if (typeof options.fireProgress === \"function\") {\n        options.fireProgress(state);\n      }\n      const pagedIterator = this.listAnalyzeResults(state.jobId!, this.options.analyze || {});\n      state.result = Object.assign(pagedIterator, {\n        statistics: status.statistics\n      });\n      state.isCompleted = true;\n    }\n    return this;\n  }\n\n  async cancel(): Promise<BeginAnalyzePollerOperation> {\n    const state = this.state;\n    logger.warning(`The service does not yet support cancellation for beginAnalyze.`);\n    state.isCancelled = true;\n    return this;\n  }\n}\n"]}