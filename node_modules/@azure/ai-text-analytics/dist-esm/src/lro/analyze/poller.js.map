{"version":3,"file":"poller.js","sourceRoot":"","sources":["../../../../src/lro/analyze/poller.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,EAAE,KAAK,EAAE,MAAM,kBAAkB,CAAC;AAKzC,OAAO,EAAE,cAAc,EAAyB,MAAM,WAAW,CAAC;AAClE,OAAO,EAAE,2BAA2B,EAAyB,MAAM,aAAa,CAAC;AAgBjF;;GAEG;AACH,MAAM,OAAO,kBAAmB,SAAQ,cAGvC;IACC,wEAAwE;IACxE,YAAY,aAAmC;QAC7C,MAAM,EACJ,MAAM,EACN,SAAS,EACT,eAAe,EACf,KAAK,EACL,kBAAkB,GAAG,IAAI,EACzB,UAAU,EACX,GAAG,aAAa,CAAC;QAElB,IAAI,KAAwC,CAAC;QAE7C,IAAI,UAAU,EAAE;YACd,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC;SACtC;QACD,MAAM,EAAE,cAAc,EAAE,cAAc,EAAE,GAAG,eAAe,IAAI,EAAE,CAAC;QACjE,MAAM,SAAS,GAAG,IAAI,2BAA2B,CAC/C,KAAK,IAAI,EAAE,EACX,MAAM,EACN,SAAS,EACT,KAAK,EACL;YACE,OAAO,EAAE,EAAE,cAAc,EAAE,cAAc,EAAE;YAC3C,OAAO,EAAE;gBACP,kBAAkB;gBAClB,UAAU;aACX;SACF,EACD,eAAe,CAChB,CAAC;QAEF,KAAK,CAAC,SAAS,CAAC,CAAC;QAEjB,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;IAC/C,CAAC;IAEM,KAAK;QACV,OAAO,KAAK,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;IACxC,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { delay } from \"@azure/core-http\";\nimport { PollerLike, PollOperationState } from \"@azure/core-lro\";\nimport { PaginatedAnalyzeResults } from \"../../analyzeResult\";\nimport { JobManifestTasks } from \"../../generated/models\";\n\nimport { AnalysisPoller, AnalysisPollerOptions } from \"../poller\";\nimport { BeginAnalyzePollerOperation, BeginAnalyzePollState } from \"./operation\";\n\nexport interface AnalyzePollerOptions extends AnalysisPollerOptions {\n  tasks: JobManifestTasks;\n}\n\n/**\n * The status of an analyze operation\n */\nexport type BeginAnalyzeOperationState = PollOperationState<PaginatedAnalyzeResults>;\n\n/**\n * Result type of the Analyze Long-Running-Operation (LRO)\n */\nexport type AnalyzePollerLike = PollerLike<BeginAnalyzeOperationState, PaginatedAnalyzeResults>;\n\n/**\n * Class that represents a poller that waits for the analyze results.\n */\nexport class BeginAnalyzePoller extends AnalysisPoller<\n  BeginAnalyzePollState,\n  PaginatedAnalyzeResults\n> {\n  // eslint-disable-next-line @azure/azure-sdk/ts-use-interface-parameters\n  constructor(pollerOptions: AnalyzePollerOptions) {\n    const {\n      client,\n      documents,\n      analysisOptions,\n      tasks,\n      updateIntervalInMs = 5000,\n      resumeFrom\n    } = pollerOptions;\n\n    let state: BeginAnalyzePollState | undefined;\n\n    if (resumeFrom) {\n      state = JSON.parse(resumeFrom).state;\n    }\n    const { requestOptions, tracingOptions } = analysisOptions || {};\n    const operation = new BeginAnalyzePollerOperation(\n      state || {},\n      client,\n      documents,\n      tasks,\n      {\n        analyze: { requestOptions, tracingOptions },\n        polling: {\n          updateIntervalInMs,\n          resumeFrom\n        }\n      },\n      analysisOptions\n    );\n\n    super(operation);\n\n    this.updateIntervalInMs = updateIntervalInMs;\n  }\n\n  public delay(): Promise<void> {\n    return delay(this.updateIntervalInMs);\n  }\n}\n"]}