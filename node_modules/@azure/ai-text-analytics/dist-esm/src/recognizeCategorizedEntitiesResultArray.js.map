{"version":3,"file":"recognizeCategorizedEntitiesResultArray.js","sourceRoot":"","sources":["../../src/recognizeCategorizedEntitiesResultArray.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAQlC,OAAO,EAEL,sCAAsC,EACtC,2CAA2C,EAC5C,MAAM,sCAAsC,CAAC;AAC9C,OAAO,EAAE,qBAAqB,EAAE,MAAM,QAAQ,CAAC;AAqB/C,MAAM,UAAU,2CAA2C,CACzD,KAA0B,EAC1B,SAA6B,EAC7B,MAAuB,EACvB,YAAoB,EACpB,UAAwC;IAExC,MAAM,cAAc,GAAG,SAAS;SAC7B,GAAG,CACF,CAAC,QAAQ,EAAsC,EAAE;QAC/C,OAAO,sCAAsC,CAC3C,QAAQ,CAAC,EAAE,EACX,QAAQ,CAAC,QAAQ,EACjB,QAAQ,CAAC,QAAQ,EACjB,QAAQ,CAAC,UAAU,CACpB,CAAC;IACJ,CAAC,CACF;SACA,MAAM,CACL,MAAM,CAAC,GAAG,CACR,CAAC,KAAK,EAAsC,EAAE;QAC5C,OAAO,2CAA2C,CAAC,KAAK,CAAC,EAAE,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC;IAC5E,CAAC,CACF,CACF,CAAC;IACJ,MAAM,MAAM,GAAG,qBAAqB,CAAC,KAAK,EAAE,cAAc,CAAC,CAAC;IAC5D,OAAO,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE;QAC3B,UAAU;QACV,YAAY;KACb,CAAC,CAAC;AACL,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  TextDocumentBatchStatistics,\n  DocumentError,\n  DocumentEntities,\n  TextDocumentInput\n} from \"./generated/models\";\nimport {\n  RecognizeCategorizedEntitiesResult,\n  makeRecognizeCategorizedEntitiesResult,\n  makeRecognizeCategorizedEntitiesErrorResult\n} from \"./recognizeCategorizedEntitiesResult\";\nimport { sortResponseIdObjects } from \"./util\";\n\n/**\n * Array of `RecognizeCategorizedEntitiesResult` objects corresponding to a batch of input documents, and\n * annotated with information about the batch operation.\n */\nexport interface RecognizeCategorizedEntitiesResultArray\n  extends Array<RecognizeCategorizedEntitiesResult> {\n  /**\n   * Statistics about the input document batch and how it was processed\n   * by the service. This property will have a value when includeStatistics is set to true\n   * in the client call.\n   */\n  statistics?: TextDocumentBatchStatistics;\n  /**\n   * The version of the text analytics model used by this operation on this\n   * batch of input documents.\n   */\n  modelVersion: string;\n}\n\nexport function makeRecognizeCategorizedEntitiesResultArray(\n  input: TextDocumentInput[],\n  documents: DocumentEntities[],\n  errors: DocumentError[],\n  modelVersion: string,\n  statistics?: TextDocumentBatchStatistics\n): RecognizeCategorizedEntitiesResultArray {\n  const unsortedResult = documents\n    .map(\n      (document): RecognizeCategorizedEntitiesResult => {\n        return makeRecognizeCategorizedEntitiesResult(\n          document.id,\n          document.entities,\n          document.warnings,\n          document.statistics\n        );\n      }\n    )\n    .concat(\n      errors.map(\n        (error): RecognizeCategorizedEntitiesResult => {\n          return makeRecognizeCategorizedEntitiesErrorResult(error.id, error.error);\n        }\n      )\n    );\n  const result = sortResponseIdObjects(input, unsortedResult);\n  return Object.assign(result, {\n    statistics,\n    modelVersion\n  });\n}\n"]}