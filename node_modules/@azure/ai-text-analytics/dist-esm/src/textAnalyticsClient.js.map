{"version":3,"file":"textAnalyticsClient.js","sourceRoot":"","sources":["../../src/textAnalyticsClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  PipelineOptions,\n  createPipelineFromOptions,\n  InternalPipelineOptions,\n  isTokenCredential,\n  bearerTokenAuthenticationPolicy,\n  operationOptionsToRequestOptionsBase\n} from \"@azure/core-http\";\nimport { TokenCredential, KeyCredential } from \"@azure/core-auth\";\nimport { SDK_VERSION } from \"./constants\";\nimport { GeneratedClient } from \"./generated/generatedClient\";\nimport { logger } from \"./logger\";\nimport {\n  JobManifestTasks as GeneratedJobManifestTasks,\n  DetectLanguageInput,\n  GeneratedClientEntitiesRecognitionPiiOptionalParams,\n  GeneratedClientSentimentOptionalParams,\n  PiiTaskParametersDomain,\n  TextDocumentInput\n} from \"./generated/models\";\nimport {\n  DetectLanguageResultArray,\n  makeDetectLanguageResultArray\n} from \"./detectLanguageResultArray\";\nimport {\n  RecognizeCategorizedEntitiesResultArray,\n  makeRecognizeCategorizedEntitiesResultArray\n} from \"./recognizeCategorizedEntitiesResultArray\";\nimport {\n  AnalyzeSentimentResultArray,\n  makeAnalyzeSentimentResultArray\n} from \"./analyzeSentimentResultArray\";\nimport {\n  makeExtractKeyPhrasesResultArray,\n  ExtractKeyPhrasesResultArray\n} from \"./extractKeyPhrasesResultArray\";\nimport {\n  RecognizePiiEntitiesResultArray,\n  makeRecognizePiiEntitiesResultArray\n} from \"./recognizePiiEntitiesResultArray\";\nimport {\n  RecognizeLinkedEntitiesResultArray,\n  makeRecognizeLinkedEntitiesResultArray\n} from \"./recognizeLinkedEntitiesResultArray\";\nimport { createSpan } from \"./tracing\";\nimport { CanonicalCode } from \"@opentelemetry/api\";\nimport { createTextAnalyticsAzureKeyCredentialPolicy } from \"./azureKeyCredentialPolicy\";\nimport {\n  addEncodingParamToTask,\n  AddParamsToTask,\n  addStrEncodingParam,\n  handleInvalidDocumentBatch\n} from \"./util\";\nimport {\n  BeginAnalyzeHealthcareOperationState,\n  BeginAnalyzeHealthcarePoller,\n  HealthPollerLike\n} from \"./lro/health/poller\";\nimport { BeginAnalyzeHealthcareOptions, HealthcareJobOptions } from \"./lro/health/operation\";\nimport { TextAnalyticsOperationOptions } from \"./textAnalyticsOperationOptions\";\nimport {\n  AnalyzePollerLike,\n  BeginAnalyzeOperationState,\n  BeginAnalyzePoller\n} from \"./lro/analyze/poller\";\nimport { AnalyzeJobOptions, BeginAnalyzeOptions } from \"./lro/analyze/operation\";\nimport { PollingOptions } from \"./lro/poller\";\n\nexport {\n  BeginAnalyzeOptions,\n  AnalyzePollerLike,\n  BeginAnalyzeOperationState,\n  BeginAnalyzeHealthcareOptions,\n  HealthPollerLike,\n  AnalyzeJobOptions,\n  PollingOptions,\n  HealthcareJobOptions,\n  BeginAnalyzeHealthcareOperationState\n};\n\nconst DEFAULT_COGNITIVE_SCOPE = \"https://cognitiveservices.azure.com/.default\";\n\n/**\n * Client options used to configure TextAnalytics API requests.\n */\nexport interface TextAnalyticsClientOptions extends PipelineOptions {\n  /**\n   * The default country hint to use. Defaults to \"us\".\n   */\n  defaultCountryHint?: string;\n\n  /**\n   * The default language to use. Defaults to \"en\".\n   */\n  defaultLanguage?: string;\n}\n\n/**\n * Options for the detect languages operation.\n */\nexport type DetectLanguageOptions = TextAnalyticsOperationOptions;\n\n/**\n * Options for the recognize entities operation.\n */\nexport type RecognizeCategorizedEntitiesOptions = TextAnalyticsOperationOptions;\n\n/**\n * Options for the analyze sentiment operation.\n */\nexport interface AnalyzeSentimentOptions extends TextAnalyticsOperationOptions {\n  /**\n   * Whether to mine the opinions of a sentence and conduct more  granular\n   * analysis around the aspects of a product or service (also known as\n   * aspect-based sentiment analysis). If set to true, the returned\n   * `SentenceSentiment` objects will have property `mined_opinions` containing\n   * the result of this analysis.\n   * More information about the feature can be found here: https://docs.microsoft.com/azure/cognitive-services/text-analytics/how-tos/text-analytics-how-to-sentiment-analysis?tabs=version-3-1#opinion-mining\n   */\n  includeOpinionMining?: boolean;\n}\n\n/**\n * The types of PII domains the user can choose from.\n */\nexport enum PiiEntityDomainType {\n  /**\n   * See https://aka.ms/tanerpii for more information.\n   */\n  PROTECTED_HEALTH_INFORMATION = \"PHI\"\n}\n\n/**\n * Options for the recognize PII entities operation.\n */\nexport interface RecognizePiiEntitiesOptions extends TextAnalyticsOperationOptions {\n  /**\n   * Filters entities to ones only included in the specified domain (e.g., if\n   * set to 'PHI', entities in the Protected Healthcare Information domain will\n   * only be returned). See https://aka.ms/tanerpii for more information.\n   */\n  domainFilter?: PiiEntityDomainType;\n}\n\n/**\n * Options for the extract key phrases operation.\n */\nexport type ExtractKeyPhrasesOptions = TextAnalyticsOperationOptions;\n\n/**\n * Options for the recognize linked entities operation.\n */\nexport type RecognizeLinkedEntitiesOptions = TextAnalyticsOperationOptions;\n\n/**\n * Options for an entities recognition task.\n */\nexport type EntitiesTask = {\n  /**\n   * The version of the text analytics model used by this operation on this\n   * batch of input documents.\n   */\n  modelVersion?: string;\n};\n\n/**\n * Options for a Pii entities recognition task.\n */\nexport type PiiTask = {\n  /**\n   * Filters entities to ones only included in the specified domain (e.g., if\n   * set to 'PHI', entities in the Protected Healthcare Information domain will\n   * only be returned). See https://aka.ms/tanerpii for more information.\n   */\n  domain?: PiiTaskParametersDomain;\n  /**\n   * The version of the text analytics model used by this operation on this\n   * batch of input documents.\n   */\n  modelVersion?: string;\n};\n\n/**\n * Options for a key phrases recognition task.\n */\nexport interface KeyPhrasesTask {\n  /**\n   * The version of the text analytics model used by this operation on this\n   * batch of input documents.\n   */\n  modelVersion?: string;\n}\n\n/**\n * Description of collection of tasks for the analyze API to perform on input documents\n */\nexport interface JobManifestTasks {\n  /**\n   * A collection of descriptions of entities recognition tasks.\n   */\n  entityRecognitionTasks?: EntitiesTask[];\n  /**\n   * A collection of descriptions of Pii entities recognition tasks.\n   */\n  entityRecognitionPiiTasks?: PiiTask[];\n  /**\n   * A collection of descriptions of key phrases recognition tasks.\n   */\n  keyPhraseExtractionTasks?: KeyPhrasesTask[];\n}\n/**\n * Client class for interacting with Azure Text Analytics.\n */\nexport class TextAnalyticsClient {\n  /**\n   * The URL to the TextAnalytics endpoint\n   */\n  public readonly endpointUrl: string;\n\n  /**\n   * The default country hint to use. Defaults to \"us\".\n   */\n  public defaultCountryHint: string;\n\n  /**\n   * The default language to use. Defaults to \"en\".\n   */\n  public defaultLanguage: string;\n\n  /**\n   * @internal\n   * @ignore\n   * A reference to the auto-generated TextAnalytics HTTP client.\n   */\n  private readonly client: GeneratedClient;\n\n  /**\n   * Creates an instance of TextAnalyticsClient.\n   *\n   * Example usage:\n   * ```ts\n   * import { TextAnalyticsClient, AzureKeyCredential } from \"@azure/ai-text-analytics\";\n   *\n   * const client = new TextAnalyticsClient(\n   *    \"<service endpoint>\",\n   *    new AzureKeyCredential(\"<api key>\")\n   * );\n   * ```\n   * @param {string} endpointUrl The URL to the TextAnalytics endpoint\n   * @param {TokenCredential | KeyCredential} credential Used to authenticate requests to the service.\n   * @param {TextAnalyticsClientOptions} [options] Used to configure the TextAnalytics client.\n   */\n  constructor(\n    endpointUrl: string,\n    credential: TokenCredential | KeyCredential,\n    options: TextAnalyticsClientOptions = {}\n  ) {\n    this.endpointUrl = endpointUrl;\n    const { defaultCountryHint = \"us\", defaultLanguage = \"en\", ...pipelineOptions } = options;\n    this.defaultCountryHint = defaultCountryHint;\n    this.defaultLanguage = defaultLanguage;\n\n    const libInfo = `azsdk-js-ai-textanalytics/${SDK_VERSION}`;\n    if (!pipelineOptions.userAgentOptions) {\n      pipelineOptions.userAgentOptions = {};\n    }\n    if (pipelineOptions.userAgentOptions.userAgentPrefix) {\n      pipelineOptions.userAgentOptions.userAgentPrefix = `${pipelineOptions.userAgentOptions.userAgentPrefix} ${libInfo}`;\n    } else {\n      pipelineOptions.userAgentOptions.userAgentPrefix = libInfo;\n    }\n\n    const authPolicy = isTokenCredential(credential)\n      ? bearerTokenAuthenticationPolicy(credential, DEFAULT_COGNITIVE_SCOPE)\n      : createTextAnalyticsAzureKeyCredentialPolicy(credential);\n\n    const internalPipelineOptions: InternalPipelineOptions = {\n      ...pipelineOptions,\n      ...{\n        loggingOptions: {\n          logger: logger.info,\n          allowedHeaderNames: [\"x-ms-correlation-request-id\", \"x-ms-request-id\"]\n        }\n      }\n    };\n\n    const pipeline = createPipelineFromOptions(internalPipelineOptions, authPolicy);\n\n    this.client = new GeneratedClient(this.endpointUrl, pipeline);\n  }\n\n  /**\n   * Runs a predictive model to determine the language that the passed-in\n   * input strings are written in, and returns, for each one, the detected\n   * language as well as a score indicating the model's confidence that the\n   * inferred language is correct.  Scores close to 1 indicate high certainty in\n   * the result.  120 languages are supported.\n   * @param documents A collection of input strings to analyze.\n   * @param countryHint Indicates the country of origin for all of\n   *   the input strings to assist the text analytics model in predicting\n   *   the language they are written in.  If unspecified, this value will be\n   *   set to the default country hint in `TextAnalyticsClientOptions`.\n   *   If set to an empty string, or the string \"none\", the service will apply a\n   *   model where the country is explicitly unset.\n   *   The same country hint is applied to all strings in the input collection.\n   * @param options Optional parameters for the operation.\n   */\n  public async detectLanguage(\n    documents: string[],\n    countryHint?: string,\n    options?: DetectLanguageOptions\n  ): Promise<DetectLanguageResultArray>;\n  /**\n   * Runs a predictive model to determine the language that the passed-in\n   * input document are written in, and returns, for each one, the detected\n   * language as well as a score indicating the model's confidence that the\n   * inferred language is correct.  Scores close to 1 indicate high certainty in\n   * the result.  120 languages are supported.\n   * @param documents A collection of input documents to analyze.\n   * @param options Optional parameters for the operation.\n   */\n  public async detectLanguage(\n    documents: DetectLanguageInput[],\n    options?: DetectLanguageOptions\n  ): Promise<DetectLanguageResultArray>;\n  public async detectLanguage(\n    documents: string[] | DetectLanguageInput[],\n    countryHintOrOptions?: string | DetectLanguageOptions,\n    options?: DetectLanguageOptions\n  ): Promise<DetectLanguageResultArray> {\n    let realOptions: DetectLanguageOptions;\n    let realInputs: DetectLanguageInput[];\n\n    if (!Array.isArray(documents) || documents.length === 0) {\n      throw new Error(\"'documents' must be a non-empty array\");\n    }\n\n    if (isStringArray(documents)) {\n      const countryHint = (countryHintOrOptions as string) || this.defaultCountryHint;\n      realInputs = convertToDetectLanguageInput(documents, countryHint);\n      realOptions = options || {};\n    } else {\n      // Replace \"none\" hints with \"\"\n      realInputs = documents.map((input) => ({\n        ...input,\n        countryHint: input.countryHint === \"none\" ? \"\" : input.countryHint\n      }));\n      realOptions = (countryHintOrOptions as DetectLanguageOptions) || {};\n    }\n\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"TextAnalyticsClient-detectLanguages\",\n      realOptions\n    );\n\n    try {\n      const result = await this.client.languages(\n        {\n          documents: realInputs\n        },\n        operationOptionsToRequestOptionsBase(finalOptions)\n      );\n\n      return makeDetectLanguageResultArray(\n        realInputs,\n        result.documents,\n        result.errors,\n        result.modelVersion,\n        result.statistics\n      );\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Runs a predictive model to identify a collection of named entities\n   * in the passed-in input strings, and categorize those entities into types\n   * such as person, location, or organization.  For more information on \n   * available categories, see\n   * https://docs.microsoft.com/azure/cognitive-services/Text-Analytics/named-entity-types.\n   * For a list of languages supported by this operation, see\n   * https://docs.microsoft.com/azure/cognitive-services/text-analytics/language-support.\n   * @param documents The input strings to analyze.\n   * @param language The language that all the input strings are\n        written in. If unspecified, this value will be set to the default\n        language in `TextAnalyticsClientOptions`.  \n        If set to an empty string, the service will apply a model\n        where the lanuage is explicitly set to \"None\".\n   * @param options Optional parameters for the operation.\n   */\n  public async recognizeEntities(\n    documents: string[],\n    language?: string,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options?: RecognizeCategorizedEntitiesOptions\n  ): Promise<RecognizeCategorizedEntitiesResultArray>;\n  /**\n   * Runs a predictive model to identify a collection of named entities\n   * in the passed-in input documents, and categorize those entities into types\n   * such as person, location, or organization.  For more information on\n   * available categories, see\n   * https://docs.microsoft.com/azure/cognitive-services/Text-Analytics/named-entity-types.\n   * For a list of languages supported by this operation, see\n   * https://docs.microsoft.com/azure/cognitive-services/text-analytics/language-support.\n   * @param documents The input documents to analyze.\n   * @param options Optional parameters for the operation.\n   */\n  public async recognizeEntities(\n    documents: TextDocumentInput[],\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options?: RecognizeCategorizedEntitiesOptions\n  ): Promise<RecognizeCategorizedEntitiesResultArray>;\n  public async recognizeEntities(\n    documents: string[] | TextDocumentInput[],\n    languageOrOptions?: string | RecognizeCategorizedEntitiesOptions,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options?: RecognizeCategorizedEntitiesOptions\n  ): Promise<RecognizeCategorizedEntitiesResultArray> {\n    let realOptions: RecognizeCategorizedEntitiesOptions;\n    let realInputs: TextDocumentInput[];\n\n    if (!Array.isArray(documents) || documents.length === 0) {\n      throw new Error(\"'documents' must be a non-empty array\");\n    }\n\n    if (isStringArray(documents)) {\n      const language = (languageOrOptions as string) || this.defaultLanguage;\n      realInputs = convertToTextDocumentInput(documents, language);\n      realOptions = options || {};\n    } else {\n      realInputs = documents;\n      realOptions = (languageOrOptions as RecognizeCategorizedEntitiesOptions) || {};\n    }\n\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"TextAnalyticsClient-recognizeEntities\",\n      realOptions\n    );\n\n    try {\n      const result = await this.client.entitiesRecognitionGeneral(\n        {\n          documents: realInputs\n        },\n        operationOptionsToRequestOptionsBase(addStrEncodingParam(finalOptions))\n      );\n\n      return makeRecognizeCategorizedEntitiesResultArray(\n        realInputs,\n        result.documents,\n        result.errors,\n        result.modelVersion,\n        result.statistics\n      );\n    } catch (e) {\n      /**\n       * This special logic handles REST exception with code\n       * InvalidDocumentBatch and is needed to maintain backward compatability\n       * with sdk v5.0.0 and earlier. In general, REST exceptions are thrown as\n       * is and include both outer and inner exception codes. However, the\n       * earlier versions were throwing an exception that included the inner\n       * code only.\n       */\n      const backwardCompatibleException = handleInvalidDocumentBatch(e);\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: backwardCompatibleException.message\n      });\n      throw backwardCompatibleException;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Runs a predictive model to identify the positive, negative, neutral, or mixed\n   * sentiment contained in the input strings, as well as scores indicating\n   * the model's confidence in each of the predicted sentiments.\n   * For a list of languages supported by this operation, see\n   * https://docs.microsoft.com/azure/cognitive-services/text-analytics/language-support.\n   * @param documents The input strings to analyze.\n   * @param language The language that all the input strings are\n        written in. If unspecified, this value will be set to the default\n        language in `TextAnalyticsClientOptions`.  \n        If set to an empty string, the service will apply a model\n        where the lanuage is explicitly set to \"None\".\n   * @param options Optional parameters for the operation.\n   */\n  public async analyzeSentiment(\n    documents: string[],\n    language?: string,\n    options?: AnalyzeSentimentOptions\n  ): Promise<AnalyzeSentimentResultArray>;\n  /**\n   * Runs a predictive model to identify the positive, negative or neutral, or mixed\n   * sentiment contained in the input documents, as well as scores indicating\n   * the model's confidence in each of the predicted sentiments.\n   * For a list of languages supported by this operation, see\n   * https://docs.microsoft.com/azure/cognitive-services/text-analytics/language-support.\n   * @param documents The input documents to analyze.\n   * @param options Optional parameters for the operation.\n   */\n  public async analyzeSentiment(\n    documents: TextDocumentInput[],\n    options?: AnalyzeSentimentOptions\n  ): Promise<AnalyzeSentimentResultArray>;\n  public async analyzeSentiment(\n    documents: string[] | TextDocumentInput[],\n    languageOrOptions?: string | AnalyzeSentimentOptions,\n    options?: AnalyzeSentimentOptions\n  ): Promise<AnalyzeSentimentResultArray> {\n    let realOptions: GeneratedClientSentimentOptionalParams;\n    let realInputs: TextDocumentInput[];\n\n    if (!Array.isArray(documents) || documents.length === 0) {\n      throw new Error(\"'documents' must be a non-empty array\");\n    }\n\n    if (isStringArray(documents)) {\n      const language = (languageOrOptions as string) || this.defaultLanguage;\n      realInputs = convertToTextDocumentInput(documents, language);\n      realOptions = {\n        includeStatistics: options?.includeStatistics,\n        modelVersion: options?.modelVersion,\n        opinionMining: options?.includeOpinionMining\n      };\n    } else {\n      realInputs = documents;\n      realOptions = {\n        includeStatistics: (languageOrOptions as AnalyzeSentimentOptions)?.includeStatistics,\n        modelVersion: (languageOrOptions as AnalyzeSentimentOptions)?.modelVersion,\n        opinionMining: (languageOrOptions as AnalyzeSentimentOptions)?.includeOpinionMining\n      };\n    }\n\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"TextAnalyticsClient-analyzeSentiment\",\n      realOptions\n    );\n\n    try {\n      const result = await this.client.sentiment(\n        {\n          documents: realInputs\n        },\n        operationOptionsToRequestOptionsBase(addStrEncodingParam(finalOptions))\n      );\n\n      return makeAnalyzeSentimentResultArray(realInputs, result);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Runs a model to identify a collection of significant phrases\n   * found in the passed-in input strings.\n   * For a list of languages supported by this operation, see\n   * https://docs.microsoft.com/azure/cognitive-services/text-analytics/language-support.\n   * @param documents The input strings to analyze.\n   * @param language The language that all the input strings are\n        written in. If unspecified, this value will be set to the default\n        language in `TextAnalyticsClientOptions`.  \n        If set to an empty string, the service will apply a model\n        where the lanuage is explicitly set to \"None\".\n   * @param options Optional parameters for the operation.\n   */\n  public async extractKeyPhrases(\n    documents: string[],\n    language?: string,\n    options?: ExtractKeyPhrasesOptions\n  ): Promise<ExtractKeyPhrasesResultArray>;\n  /**\n   * Runs a model to identify a collection of significant phrases\n   * found in the passed-in input documents.\n   * For a list of languages supported by this operation, see\n   * https://docs.microsoft.com/azure/cognitive-services/text-analytics/language-support.\n   * @param documents The input documents to analyze.\n   * @param options Optional parameters for the operation.\n   */\n  public async extractKeyPhrases(\n    documents: TextDocumentInput[],\n    options?: ExtractKeyPhrasesOptions\n  ): Promise<ExtractKeyPhrasesResultArray>;\n  public async extractKeyPhrases(\n    documents: string[] | TextDocumentInput[],\n    languageOrOptions?: string | ExtractKeyPhrasesOptions,\n    options?: ExtractKeyPhrasesOptions\n  ): Promise<ExtractKeyPhrasesResultArray> {\n    let realOptions: ExtractKeyPhrasesOptions;\n    let realInputs: TextDocumentInput[];\n\n    if (!Array.isArray(documents) || documents.length === 0) {\n      throw new Error(\"'documents' must be a non-empty array\");\n    }\n\n    if (isStringArray(documents)) {\n      const language = (languageOrOptions as string) || this.defaultLanguage;\n      realInputs = convertToTextDocumentInput(documents, language);\n      realOptions = options || {};\n    } else {\n      realInputs = documents;\n      realOptions = (languageOrOptions as ExtractKeyPhrasesOptions) || {};\n    }\n\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"TextAnalyticsClient-extractKeyPhrases\",\n      realOptions\n    );\n\n    try {\n      const result = await this.client.keyPhrases(\n        {\n          documents: realInputs\n        },\n        operationOptionsToRequestOptionsBase(finalOptions)\n      );\n\n      return makeExtractKeyPhrasesResultArray(\n        realInputs,\n        result.documents,\n        result.errors,\n        result.modelVersion,\n        result.statistics\n      );\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Runs a predictive model to identify a collection of entities containing\n   * personally identifiable information found in the passed-in input strings,\n   * and categorize those entities into types such as US social security\n   * number, drivers license number, or credit card number.\n   * For a list of languages supported by this operation, see\n   * https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/language-support.\n   * @param inputs The input strings to analyze.\n   * @param language The language that all the input strings are\n        written in. If unspecified, this value will be set to the default\n        language in `TextAnalyticsClientOptions`.  \n        If set to an empty string, the service will apply a model\n        where the lanuage is explicitly set to \"None\".\n   * @param options Optional parameters for the operation.\n   */\n  public async recognizePiiEntities(\n    inputs: string[],\n    language?: string,\n    options?: RecognizePiiEntitiesOptions\n  ): Promise<RecognizePiiEntitiesResultArray>;\n  /**\n   * Runs a predictive model to identify a collection of entities containing\n   * personally identifiable information found in the passed-in input documents,\n   * and categorize those entities into types such as US social security\n   * number, drivers license number, or credit card number.\n   * For a list of languages supported by this operation, see\n   * https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/language-support.\n   * @param inputs The input documents to analyze.\n   * @param options Optional parameters for the operation.\n   */\n  public async recognizePiiEntities(\n    inputs: TextDocumentInput[],\n    options?: RecognizePiiEntitiesOptions\n  ): Promise<RecognizePiiEntitiesResultArray>;\n  public async recognizePiiEntities(\n    inputs: string[] | TextDocumentInput[],\n    languageOrOptions?: string | RecognizePiiEntitiesOptions,\n    options?: RecognizePiiEntitiesOptions\n  ): Promise<RecognizePiiEntitiesResultArray> {\n    let realOptions: GeneratedClientEntitiesRecognitionPiiOptionalParams;\n    let realInputs: TextDocumentInput[];\n\n    if (isStringArray(inputs)) {\n      const language = (languageOrOptions as string) || this.defaultLanguage;\n      realInputs = convertToTextDocumentInput(inputs, language);\n      realOptions = options || {};\n      realOptions.domain = options?.domainFilter;\n    } else {\n      realInputs = inputs;\n      realOptions = (languageOrOptions as RecognizePiiEntitiesOptions) || {};\n      realOptions.domain = (languageOrOptions as RecognizePiiEntitiesOptions)?.domainFilter;\n    }\n\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"TextAnalyticsClient-recognizePiiEntities\",\n      realOptions\n    );\n\n    try {\n      const result = await this.client.entitiesRecognitionPii(\n        {\n          documents: realInputs\n        },\n        operationOptionsToRequestOptionsBase(addStrEncodingParam(finalOptions))\n      );\n\n      return makeRecognizePiiEntitiesResultArray(realInputs, result);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Runs a predictive model to identify a collection of entities\n   * found in the passed-in input strings, and include information linking the\n   * entities to their corresponding entries in a well-known knowledge base.\n   * For a list of languages supported by this operation, see\n   * https://docs.microsoft.com/azure/cognitive-services/text-analytics/language-support.\n   * @param documents The input strings to analyze.\n   * @param language The language that all the input strings are\n        written in. If unspecified, this value will be set to the default\n        language in `TextAnalyticsClientOptions`.  \n        If set to an empty string, the service will apply a model\n        where the lanuage is explicitly set to \"None\".\n   * @param options Optional parameters for the operation.\n   */\n  public async recognizeLinkedEntities(\n    documents: string[],\n    language?: string,\n    options?: RecognizeLinkedEntitiesOptions\n  ): Promise<RecognizeLinkedEntitiesResultArray>;\n  /**\n   * Runs a predictive model to identify a collection of entities\n   * found in the passed-in input documents, and include information linking the\n   * entities to their corresponding entries in a well-known knowledge base.\n   * For a list of languages supported by this operation, see\n   * https://docs.microsoft.com/azure/cognitive-services/text-analytics/language-support.\n   * @param documents The input documents to analyze.\n   * @param options Optional parameters for the operation.\n   */\n  public async recognizeLinkedEntities(\n    documents: TextDocumentInput[],\n    options?: RecognizeLinkedEntitiesOptions\n  ): Promise<RecognizeLinkedEntitiesResultArray>;\n  public async recognizeLinkedEntities(\n    documents: string[] | TextDocumentInput[],\n    languageOrOptions?: string | RecognizeLinkedEntitiesOptions,\n    options?: RecognizeLinkedEntitiesOptions\n  ): Promise<RecognizeLinkedEntitiesResultArray> {\n    let realOptions: RecognizeLinkedEntitiesOptions;\n    let realInputs: TextDocumentInput[];\n\n    if (!Array.isArray(documents) || documents.length === 0) {\n      throw new Error(\"'documents' must be a non-empty array\");\n    }\n\n    if (isStringArray(documents)) {\n      const language = (languageOrOptions as string) || this.defaultLanguage;\n      realInputs = convertToTextDocumentInput(documents, language);\n      realOptions = options || {};\n    } else {\n      realInputs = documents;\n      realOptions = (languageOrOptions as RecognizeLinkedEntitiesOptions) || {};\n    }\n\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"TextAnalyticsClient-recognizeLinkedEntities\",\n      realOptions\n    );\n\n    try {\n      const result = await this.client.entitiesLinking(\n        {\n          documents: realInputs\n        },\n        operationOptionsToRequestOptionsBase(addStrEncodingParam(finalOptions))\n      );\n\n      return makeRecognizeLinkedEntitiesResultArray(\n        realInputs,\n        result.documents,\n        result.errors,\n        result.modelVersion,\n        result.statistics\n      );\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Start a healthcare analysis job to recognize healthcare related entities (drugs, conditions,\n   * symptoms, etc) and their relations.\n   * @param documents Collection of documents to analyze.\n   * @param language The language that all the input strings are\n        written in. If unspecified, this value will be set to the default\n        language in `TextAnalyticsClientOptions`.\n        If set to an empty string, the service will apply a model\n        where the lanuage is explicitly set to \"None\".\n   * @param options The options parameters.\n   */\n  async beginAnalyzeHealthcare(\n    documents: string[],\n    language?: string,\n    options?: BeginAnalyzeHealthcareOptions\n  ): Promise<HealthPollerLike>;\n  /**\n   * Start a healthcare analysis job to recognize healthcare related entities (drugs, conditions,\n   * symptoms, etc) and their relations.\n   * @param documents Collection of documents to analyze.\n   * @param options The options parameters.\n   */\n  async beginAnalyzeHealthcare(\n    documents: TextDocumentInput[],\n    options?: BeginAnalyzeHealthcareOptions\n  ): Promise<HealthPollerLike>;\n\n  async beginAnalyzeHealthcare(\n    documents: string[] | TextDocumentInput[],\n    languageOrOptions?: string | BeginAnalyzeHealthcareOptions,\n    options?: BeginAnalyzeHealthcareOptions\n  ): Promise<HealthPollerLike> {\n    let realOptions: BeginAnalyzeHealthcareOptions;\n    let realInputs: TextDocumentInput[];\n    if (isStringArray(documents)) {\n      const language = (languageOrOptions as string) || this.defaultLanguage;\n      realInputs = convertToTextDocumentInput(documents, language);\n      realOptions = options || {};\n    } else {\n      realInputs = documents;\n      realOptions = (languageOrOptions as BeginAnalyzeHealthcareOptions) || {};\n    }\n\n    const poller = new BeginAnalyzeHealthcarePoller({\n      client: this.client,\n      documents: realInputs,\n      analysisOptions: realOptions.health,\n      ...realOptions.polling\n    });\n\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Submit a collection of text documents for analysis. Specify one or more unique tasks to be executed.\n   * @param documents Collection of documents to analyze\n   * @param tasks Tasks to execute.\n   * @param language The language that all the input strings are\n        written in. If unspecified, this value will be set to the default\n        language in `TextAnalyticsClientOptions`.\n        If set to an empty string, the service will apply a model\n        where the lanuage is explicitly set to \"None\".\n   * @param options The options parameters.\n   */\n  public async beginAnalyze(\n    documents: string[],\n    tasks: JobManifestTasks,\n    language?: string,\n    options?: BeginAnalyzeOptions\n  ): Promise<AnalyzePollerLike>;\n  /**\n   * Submit a collection of text documents for analysis. Specify one or more unique tasks to be executed.\n   * @param documents Collection of documents to analyze\n   * @param tasks Tasks to execute.\n   * @param options The options parameters.\n   */\n  public async beginAnalyze(\n    documents: TextDocumentInput[],\n    tasks: JobManifestTasks,\n    options?: BeginAnalyzeOptions\n  ): Promise<AnalyzePollerLike>;\n  public async beginAnalyze(\n    documents: string[] | TextDocumentInput[],\n    tasks: JobManifestTasks,\n    languageOrOptions?: string | BeginAnalyzeOptions,\n    options?: BeginAnalyzeOptions\n  ): Promise<AnalyzePollerLike> {\n    let realOptions: BeginAnalyzeOptions;\n    let realInputs: TextDocumentInput[];\n\n    if (!Array.isArray(documents) || documents.length === 0) {\n      throw new Error(\"'documents' must be a non-empty array\");\n    }\n\n    if (isStringArray(documents)) {\n      const language = (languageOrOptions as string) || this.defaultLanguage;\n      realInputs = convertToTextDocumentInput(documents, language);\n      realOptions = options || {};\n    } else {\n      realInputs = documents;\n      realOptions = (languageOrOptions as BeginAnalyzeOptions) || {};\n    }\n    const compiledTasks = addEncodingParamToAnalyzeInput(tasks);\n    const poller = new BeginAnalyzePoller({\n      client: this.client,\n      documents: realInputs,\n      tasks: compiledTasks,\n      analysisOptions: realOptions.analyze,\n      ...realOptions.polling\n    });\n\n    await poller.poll();\n    return poller;\n  }\n}\n\nfunction addEncodingParamToAnalyzeInput(tasks: JobManifestTasks): GeneratedJobManifestTasks {\n  return {\n    entityRecognitionPiiTasks: tasks.entityRecognitionPiiTasks\n      ?.map(addEncodingParamToTask)\n      .map(AddParamsToTask),\n    entityRecognitionTasks: tasks.entityRecognitionTasks\n      ?.map(addEncodingParamToTask)\n      .map(AddParamsToTask),\n    keyPhraseExtractionTasks: tasks.keyPhraseExtractionTasks?.map(AddParamsToTask)\n  };\n}\n\nfunction isStringArray(documents: any[]): documents is string[] {\n  return typeof documents[0] === \"string\";\n}\n\nfunction convertToDetectLanguageInput(\n  inputs: string[],\n  countryHint: string\n): DetectLanguageInput[] {\n  if (countryHint === \"none\") {\n    countryHint = \"\";\n  }\n  return inputs.map(\n    (text: string, index): DetectLanguageInput => {\n      return {\n        id: String(index),\n        countryHint,\n        text\n      };\n    }\n  );\n}\n\nfunction convertToTextDocumentInput(inputs: string[], language: string): TextDocumentInput[] {\n  return inputs.map(\n    (text: string, index): TextDocumentInput => {\n      return {\n        id: String(index),\n        language,\n        text\n      };\n    }\n  );\n}\n"]}