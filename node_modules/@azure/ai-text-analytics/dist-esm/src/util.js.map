{"version":3,"file":"util.js","sourceRoot":"","sources":["../../src/util.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { RestError } from \"@azure/core-http\";\nimport { URL, URLSearchParams } from \"./utils/url\";\nimport { StringIndexType, StringIndexTypeResponse } from \"./generated/models\";\nimport { logger } from \"./logger\";\n\nexport interface IdObject {\n  id: string;\n}\n\n/**\n * Given a sorted array of input objects (with a unique ID) and an unsorted array of results,\n * return a sorted array of results.\n *\n * @ignore\n * @param sortedArray An array of entries sorted by `id`\n * @param unsortedArray An array of entries that contain `id` but are not sorted\n */\nexport function sortResponseIdObjects<T extends IdObject, U extends IdObject>(\n  sortedArray: T[],\n  unsortedArray: U[]\n): U[] {\n  const unsortedMap = new Map<string, U>();\n  for (const item of unsortedArray) {\n    unsortedMap.set(item.id, item);\n  }\n\n  if (unsortedArray.length !== sortedArray.length) {\n    const ordinal = unsortedArray.length > sortedArray.length ? \"more\" : \"fewer\";\n    logger.warning(\n      `The service returned ${ordinal} responses than inputs. Some errors may be treated as fatal.`\n    );\n  }\n\n  const result: U[] = [];\n  for (const sortedItem of sortedArray) {\n    const item = unsortedMap.get(sortedItem.id);\n    if (item) {\n      result.push(item);\n    }\n  }\n  return result;\n}\n\nexport interface OpinionIndex {\n  document: number;\n  sentence: number;\n  opinion: number;\n}\n\nexport function findOpinionIndex(pointer: string): OpinionIndex {\n  const regex = new RegExp(/#\\/documents\\/(\\d+)\\/sentences\\/(\\d+)\\/opinions\\/(\\d+)/);\n  const res = regex.exec(pointer);\n  if (res !== null) {\n    const opinionIndex: OpinionIndex = {\n      document: parseInt(res[1]),\n      sentence: parseInt(res[2]),\n      opinion: parseInt(res[3])\n    };\n    return opinionIndex;\n  } else {\n    throw new Error(`Pointer \"${pointer}\" is not a valid opinion pointer`);\n  }\n}\n\nconst jsEncodingUnit = \"Utf16CodeUnit\";\n\nexport function addStrEncodingParam<T>(options: T): T & { stringIndexType: StringIndexType } {\n  return { ...options, stringIndexType: jsEncodingUnit };\n}\n\nexport function addEncodingParamToTask<X>(\n  task: X & { stringIndexType?: StringIndexTypeResponse }\n): X & { stringIndexType?: StringIndexTypeResponse } {\n  task.stringIndexType = jsEncodingUnit;\n  return task;\n}\n\nexport function AddParamsToTask<X>(task: X): { parameters?: X } {\n  return { parameters: task };\n}\n\nexport interface PageParam {\n  top: number;\n  skip: number;\n}\n\nexport function nextLinkToTopAndSkip(nextLink: string): PageParam {\n  const url = new URL(nextLink);\n  const searchParams = new URLSearchParams(url.searchParams);\n  let top: number;\n  if (searchParams.has(\"$top\")) {\n    top = parseInt(searchParams.get(\"$top\")!);\n  } else {\n    throw new Error(`nextLink URL does not have the $top param: ${nextLink}`);\n  }\n  let skip: number;\n  if (searchParams.has(\"$skip\")) {\n    skip = parseInt(searchParams.get(\"$skip\")!);\n  } else {\n    throw new Error(`nextLink URL does not have the $skip param: ${nextLink}`);\n  }\n  return {\n    skip: skip,\n    top: top\n  };\n}\n\nexport function getJobID(operationLocation: string): string {\n  const lastSlashIndex = operationLocation.lastIndexOf(\"/\");\n  return operationLocation.substring(lastSlashIndex + 1);\n}\n\n/**\n * parses incoming errors from the service and if the inner error code is\n * InvalidDocumentBatch, it exposes that as the statusCode instead.\n * @param error the incoming error\n */\nexport function handleInvalidDocumentBatch(error: any): any {\n  const innerCode = error.response?.parsedBody?.error?.innererror?.code;\n  const innerMessage = error.response?.parsedBody?.error?.innererror?.message;\n  return innerCode === \"InvalidDocumentBatch\"\n    ? new RestError(innerMessage, innerCode, error.statusCode)\n    : error;\n}\n"]}