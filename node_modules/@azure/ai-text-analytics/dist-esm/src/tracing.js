// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { getTracer } from "@azure/core-tracing";
import { SpanKind } from "@opentelemetry/api";
/**
 * Creates a span using the global tracer.
 * @ignore
 * @param name The name of the operation being performed.
 * @param tracingOptions The options for the underlying http request.
 */
export function createSpan(operationName, operationOptions) {
    const tracer = getTracer();
    const tracingOptions = operationOptions.tracingOptions || {};
    const spanOptions = Object.assign(Object.assign({}, tracingOptions.spanOptions), { kind: SpanKind.INTERNAL });
    const span = tracer.startSpan(`Azure.CognitiveServices.TextAnalytics.${operationName}`, spanOptions);
    span.setAttribute("az.namespace", "Microsoft.CognitiveServices");
    let newSpanOptions = tracingOptions.spanOptions || {};
    if (span.isRecording()) {
        newSpanOptions = Object.assign(Object.assign({}, tracingOptions.spanOptions), { parent: span.context(), attributes: Object.assign(Object.assign({}, spanOptions.attributes), { "az.namespace": "Microsoft.CognitiveServices" }) });
    }
    const newTracingOptions = Object.assign(Object.assign({}, tracingOptions), { spanOptions: newSpanOptions });
    const newOperationOptions = Object.assign(Object.assign({}, operationOptions), { tracingOptions: newTracingOptions });
    return {
        span,
        updatedOptions: newOperationOptions
    };
}
//# sourceMappingURL=tracing.js.map