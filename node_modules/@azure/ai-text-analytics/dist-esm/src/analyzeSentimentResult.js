// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { makeTextAnalyticsSuccessResult, makeTextAnalyticsErrorResult } from "./textAnalyticsResult";
import { findOpinionIndex } from "./util";
export function makeAnalyzeSentimentResult(document) {
    const { id, sentiment, confidenceScores, sentenceSentiments: sentences, warnings, statistics } = document;
    return Object.assign(Object.assign({}, makeTextAnalyticsSuccessResult(id, warnings, statistics)), { sentiment,
        confidenceScores, sentences: sentences.map((sentence) => convertGeneratedSentenceSentiment(sentence, document)) });
}
export function makeAnalyzeSentimentErrorResult(id, error) {
    return makeTextAnalyticsErrorResult(id, error);
}
/**
 * Converts a sentence sentiment object returned by the service to another that
 * is user-friendly.
 *
 * @param sentence - The sentence sentiment object to be converted.
 * @param response - The entire response returned by the service.
 * @returns The user-friendly sentence sentiment object.
 */
function convertGeneratedSentenceSentiment(sentence, document) {
    return {
        confidenceScores: sentence.confidenceScores,
        sentiment: sentence.sentiment,
        text: sentence.text,
        offset: sentence.offset,
        minedOpinions: sentence.aspects
            ? sentence.aspects.map((aspect) => ({
                aspect: {
                    confidenceScores: aspect.confidenceScores,
                    sentiment: aspect.sentiment,
                    text: aspect.text,
                    offset: aspect.offset
                },
                opinions: aspect.relations
                    .filter((relation) => relation.relationType === "opinion")
                    .map((relation) => convertAspectRelationToOpinionSentiment(relation, document))
            }))
            : []
    };
}
/**
 * Converts an aspect relation object returned by the service to an opinion
 * sentiment object where JSON pointers in the former are realized in the
 * latter.
 *
 * @param aspectRelation - The aspect relation object to be converted.
 * @param response - The entire response returned by the service.
 * @returns The user-friendly opinion sentiment object.
 */
function convertAspectRelationToOpinionSentiment(aspectRelation, document) {
    var _a, _b;
    const opinionPtr = aspectRelation.ref;
    const opinionIndex = findOpinionIndex(opinionPtr);
    const opinion = (_b = (_a = document.sentenceSentiments) === null || _a === void 0 ? void 0 : _a[opinionIndex.sentence].opinions) === null || _b === void 0 ? void 0 : _b[opinionIndex.opinion];
    if (opinion !== undefined) {
        return opinion;
    }
    else {
        throw new Error(`Pointer "${opinionPtr}" is not a valid opinion pointer`);
    }
}
//# sourceMappingURL=analyzeSentimentResult.js.map