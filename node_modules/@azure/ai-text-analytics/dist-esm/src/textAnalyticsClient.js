// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { __awaiter, __rest } from "tslib";
import { createPipelineFromOptions, isTokenCredential, bearerTokenAuthenticationPolicy, operationOptionsToRequestOptionsBase } from "@azure/core-http";
import { SDK_VERSION } from "./constants";
import { GeneratedClient } from "./generated/generatedClient";
import { logger } from "./logger";
import { makeDetectLanguageResultArray } from "./detectLanguageResultArray";
import { makeRecognizeCategorizedEntitiesResultArray } from "./recognizeCategorizedEntitiesResultArray";
import { makeAnalyzeSentimentResultArray } from "./analyzeSentimentResultArray";
import { makeExtractKeyPhrasesResultArray } from "./extractKeyPhrasesResultArray";
import { makeRecognizePiiEntitiesResultArray } from "./recognizePiiEntitiesResultArray";
import { makeRecognizeLinkedEntitiesResultArray } from "./recognizeLinkedEntitiesResultArray";
import { createSpan } from "./tracing";
import { CanonicalCode } from "@opentelemetry/api";
import { createTextAnalyticsAzureKeyCredentialPolicy } from "./azureKeyCredentialPolicy";
import { addEncodingParamToTask, AddParamsToTask, addStrEncodingParam, handleInvalidDocumentBatch } from "./util";
import { BeginAnalyzeHealthcarePoller } from "./lro/health/poller";
import { BeginAnalyzePoller } from "./lro/analyze/poller";
const DEFAULT_COGNITIVE_SCOPE = "https://cognitiveservices.azure.com/.default";
/**
 * The types of PII domains the user can choose from.
 */
export var PiiEntityDomainType;
(function (PiiEntityDomainType) {
    /**
     * See https://aka.ms/tanerpii for more information.
     */
    PiiEntityDomainType["PROTECTED_HEALTH_INFORMATION"] = "PHI";
})(PiiEntityDomainType || (PiiEntityDomainType = {}));
/**
 * Client class for interacting with Azure Text Analytics.
 */
export class TextAnalyticsClient {
    /**
     * Creates an instance of TextAnalyticsClient.
     *
     * Example usage:
     * ```ts
     * import { TextAnalyticsClient, AzureKeyCredential } from "@azure/ai-text-analytics";
     *
     * const client = new TextAnalyticsClient(
     *    "<service endpoint>",
     *    new AzureKeyCredential("<api key>")
     * );
     * ```
     * @param {string} endpointUrl The URL to the TextAnalytics endpoint
     * @param {TokenCredential | KeyCredential} credential Used to authenticate requests to the service.
     * @param {TextAnalyticsClientOptions} [options] Used to configure the TextAnalytics client.
     */
    constructor(endpointUrl, credential, options = {}) {
        this.endpointUrl = endpointUrl;
        const { defaultCountryHint = "us", defaultLanguage = "en" } = options, pipelineOptions = __rest(options, ["defaultCountryHint", "defaultLanguage"]);
        this.defaultCountryHint = defaultCountryHint;
        this.defaultLanguage = defaultLanguage;
        const libInfo = `azsdk-js-ai-textanalytics/${SDK_VERSION}`;
        if (!pipelineOptions.userAgentOptions) {
            pipelineOptions.userAgentOptions = {};
        }
        if (pipelineOptions.userAgentOptions.userAgentPrefix) {
            pipelineOptions.userAgentOptions.userAgentPrefix = `${pipelineOptions.userAgentOptions.userAgentPrefix} ${libInfo}`;
        }
        else {
            pipelineOptions.userAgentOptions.userAgentPrefix = libInfo;
        }
        const authPolicy = isTokenCredential(credential)
            ? bearerTokenAuthenticationPolicy(credential, DEFAULT_COGNITIVE_SCOPE)
            : createTextAnalyticsAzureKeyCredentialPolicy(credential);
        const internalPipelineOptions = Object.assign(Object.assign({}, pipelineOptions), {
            loggingOptions: {
                logger: logger.info,
                allowedHeaderNames: ["x-ms-correlation-request-id", "x-ms-request-id"]
            }
        });
        const pipeline = createPipelineFromOptions(internalPipelineOptions, authPolicy);
        this.client = new GeneratedClient(this.endpointUrl, pipeline);
    }
    detectLanguage(documents, countryHintOrOptions, options) {
        return __awaiter(this, void 0, void 0, function* () {
            let realOptions;
            let realInputs;
            if (!Array.isArray(documents) || documents.length === 0) {
                throw new Error("'documents' must be a non-empty array");
            }
            if (isStringArray(documents)) {
                const countryHint = countryHintOrOptions || this.defaultCountryHint;
                realInputs = convertToDetectLanguageInput(documents, countryHint);
                realOptions = options || {};
            }
            else {
                // Replace "none" hints with ""
                realInputs = documents.map((input) => (Object.assign(Object.assign({}, input), { countryHint: input.countryHint === "none" ? "" : input.countryHint })));
                realOptions = countryHintOrOptions || {};
            }
            const { span, updatedOptions: finalOptions } = createSpan("TextAnalyticsClient-detectLanguages", realOptions);
            try {
                const result = yield this.client.languages({
                    documents: realInputs
                }, operationOptionsToRequestOptionsBase(finalOptions));
                return makeDetectLanguageResultArray(realInputs, result.documents, result.errors, result.modelVersion, result.statistics);
            }
            catch (e) {
                span.setStatus({
                    code: CanonicalCode.UNKNOWN,
                    message: e.message
                });
                throw e;
            }
            finally {
                span.end();
            }
        });
    }
    recognizeEntities(documents, languageOrOptions, 
    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options
    options) {
        return __awaiter(this, void 0, void 0, function* () {
            let realOptions;
            let realInputs;
            if (!Array.isArray(documents) || documents.length === 0) {
                throw new Error("'documents' must be a non-empty array");
            }
            if (isStringArray(documents)) {
                const language = languageOrOptions || this.defaultLanguage;
                realInputs = convertToTextDocumentInput(documents, language);
                realOptions = options || {};
            }
            else {
                realInputs = documents;
                realOptions = languageOrOptions || {};
            }
            const { span, updatedOptions: finalOptions } = createSpan("TextAnalyticsClient-recognizeEntities", realOptions);
            try {
                const result = yield this.client.entitiesRecognitionGeneral({
                    documents: realInputs
                }, operationOptionsToRequestOptionsBase(addStrEncodingParam(finalOptions)));
                return makeRecognizeCategorizedEntitiesResultArray(realInputs, result.documents, result.errors, result.modelVersion, result.statistics);
            }
            catch (e) {
                /**
                 * This special logic handles REST exception with code
                 * InvalidDocumentBatch and is needed to maintain backward compatability
                 * with sdk v5.0.0 and earlier. In general, REST exceptions are thrown as
                 * is and include both outer and inner exception codes. However, the
                 * earlier versions were throwing an exception that included the inner
                 * code only.
                 */
                const backwardCompatibleException = handleInvalidDocumentBatch(e);
                span.setStatus({
                    code: CanonicalCode.UNKNOWN,
                    message: backwardCompatibleException.message
                });
                throw backwardCompatibleException;
            }
            finally {
                span.end();
            }
        });
    }
    analyzeSentiment(documents, languageOrOptions, options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            let realOptions;
            let realInputs;
            if (!Array.isArray(documents) || documents.length === 0) {
                throw new Error("'documents' must be a non-empty array");
            }
            if (isStringArray(documents)) {
                const language = languageOrOptions || this.defaultLanguage;
                realInputs = convertToTextDocumentInput(documents, language);
                realOptions = {
                    includeStatistics: options === null || options === void 0 ? void 0 : options.includeStatistics,
                    modelVersion: options === null || options === void 0 ? void 0 : options.modelVersion,
                    opinionMining: options === null || options === void 0 ? void 0 : options.includeOpinionMining
                };
            }
            else {
                realInputs = documents;
                realOptions = {
                    includeStatistics: (_a = languageOrOptions) === null || _a === void 0 ? void 0 : _a.includeStatistics,
                    modelVersion: (_b = languageOrOptions) === null || _b === void 0 ? void 0 : _b.modelVersion,
                    opinionMining: (_c = languageOrOptions) === null || _c === void 0 ? void 0 : _c.includeOpinionMining
                };
            }
            const { span, updatedOptions: finalOptions } = createSpan("TextAnalyticsClient-analyzeSentiment", realOptions);
            try {
                const result = yield this.client.sentiment({
                    documents: realInputs
                }, operationOptionsToRequestOptionsBase(addStrEncodingParam(finalOptions)));
                return makeAnalyzeSentimentResultArray(realInputs, result);
            }
            catch (e) {
                span.setStatus({
                    code: CanonicalCode.UNKNOWN,
                    message: e.message
                });
                throw e;
            }
            finally {
                span.end();
            }
        });
    }
    extractKeyPhrases(documents, languageOrOptions, options) {
        return __awaiter(this, void 0, void 0, function* () {
            let realOptions;
            let realInputs;
            if (!Array.isArray(documents) || documents.length === 0) {
                throw new Error("'documents' must be a non-empty array");
            }
            if (isStringArray(documents)) {
                const language = languageOrOptions || this.defaultLanguage;
                realInputs = convertToTextDocumentInput(documents, language);
                realOptions = options || {};
            }
            else {
                realInputs = documents;
                realOptions = languageOrOptions || {};
            }
            const { span, updatedOptions: finalOptions } = createSpan("TextAnalyticsClient-extractKeyPhrases", realOptions);
            try {
                const result = yield this.client.keyPhrases({
                    documents: realInputs
                }, operationOptionsToRequestOptionsBase(finalOptions));
                return makeExtractKeyPhrasesResultArray(realInputs, result.documents, result.errors, result.modelVersion, result.statistics);
            }
            catch (e) {
                span.setStatus({
                    code: CanonicalCode.UNKNOWN,
                    message: e.message
                });
                throw e;
            }
            finally {
                span.end();
            }
        });
    }
    recognizePiiEntities(inputs, languageOrOptions, options) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            let realOptions;
            let realInputs;
            if (isStringArray(inputs)) {
                const language = languageOrOptions || this.defaultLanguage;
                realInputs = convertToTextDocumentInput(inputs, language);
                realOptions = options || {};
                realOptions.domain = options === null || options === void 0 ? void 0 : options.domainFilter;
            }
            else {
                realInputs = inputs;
                realOptions = languageOrOptions || {};
                realOptions.domain = (_a = languageOrOptions) === null || _a === void 0 ? void 0 : _a.domainFilter;
            }
            const { span, updatedOptions: finalOptions } = createSpan("TextAnalyticsClient-recognizePiiEntities", realOptions);
            try {
                const result = yield this.client.entitiesRecognitionPii({
                    documents: realInputs
                }, operationOptionsToRequestOptionsBase(addStrEncodingParam(finalOptions)));
                return makeRecognizePiiEntitiesResultArray(realInputs, result);
            }
            catch (e) {
                span.setStatus({
                    code: CanonicalCode.UNKNOWN,
                    message: e.message
                });
                throw e;
            }
            finally {
                span.end();
            }
        });
    }
    recognizeLinkedEntities(documents, languageOrOptions, options) {
        return __awaiter(this, void 0, void 0, function* () {
            let realOptions;
            let realInputs;
            if (!Array.isArray(documents) || documents.length === 0) {
                throw new Error("'documents' must be a non-empty array");
            }
            if (isStringArray(documents)) {
                const language = languageOrOptions || this.defaultLanguage;
                realInputs = convertToTextDocumentInput(documents, language);
                realOptions = options || {};
            }
            else {
                realInputs = documents;
                realOptions = languageOrOptions || {};
            }
            const { span, updatedOptions: finalOptions } = createSpan("TextAnalyticsClient-recognizeLinkedEntities", realOptions);
            try {
                const result = yield this.client.entitiesLinking({
                    documents: realInputs
                }, operationOptionsToRequestOptionsBase(addStrEncodingParam(finalOptions)));
                return makeRecognizeLinkedEntitiesResultArray(realInputs, result.documents, result.errors, result.modelVersion, result.statistics);
            }
            catch (e) {
                span.setStatus({
                    code: CanonicalCode.UNKNOWN,
                    message: e.message
                });
                throw e;
            }
            finally {
                span.end();
            }
        });
    }
    beginAnalyzeHealthcare(documents, languageOrOptions, options) {
        return __awaiter(this, void 0, void 0, function* () {
            let realOptions;
            let realInputs;
            if (isStringArray(documents)) {
                const language = languageOrOptions || this.defaultLanguage;
                realInputs = convertToTextDocumentInput(documents, language);
                realOptions = options || {};
            }
            else {
                realInputs = documents;
                realOptions = languageOrOptions || {};
            }
            const poller = new BeginAnalyzeHealthcarePoller(Object.assign({ client: this.client, documents: realInputs, analysisOptions: realOptions.health }, realOptions.polling));
            yield poller.poll();
            return poller;
        });
    }
    beginAnalyze(documents, tasks, languageOrOptions, options) {
        return __awaiter(this, void 0, void 0, function* () {
            let realOptions;
            let realInputs;
            if (!Array.isArray(documents) || documents.length === 0) {
                throw new Error("'documents' must be a non-empty array");
            }
            if (isStringArray(documents)) {
                const language = languageOrOptions || this.defaultLanguage;
                realInputs = convertToTextDocumentInput(documents, language);
                realOptions = options || {};
            }
            else {
                realInputs = documents;
                realOptions = languageOrOptions || {};
            }
            const compiledTasks = addEncodingParamToAnalyzeInput(tasks);
            const poller = new BeginAnalyzePoller(Object.assign({ client: this.client, documents: realInputs, tasks: compiledTasks, analysisOptions: realOptions.analyze }, realOptions.polling));
            yield poller.poll();
            return poller;
        });
    }
}
function addEncodingParamToAnalyzeInput(tasks) {
    var _a, _b, _c;
    return {
        entityRecognitionPiiTasks: (_a = tasks.entityRecognitionPiiTasks) === null || _a === void 0 ? void 0 : _a.map(addEncodingParamToTask).map(AddParamsToTask),
        entityRecognitionTasks: (_b = tasks.entityRecognitionTasks) === null || _b === void 0 ? void 0 : _b.map(addEncodingParamToTask).map(AddParamsToTask),
        keyPhraseExtractionTasks: (_c = tasks.keyPhraseExtractionTasks) === null || _c === void 0 ? void 0 : _c.map(AddParamsToTask)
    };
}
function isStringArray(documents) {
    return typeof documents[0] === "string";
}
function convertToDetectLanguageInput(inputs, countryHint) {
    if (countryHint === "none") {
        countryHint = "";
    }
    return inputs.map((text, index) => {
        return {
            id: String(index),
            countryHint,
            text
        };
    });
}
function convertToTextDocumentInput(inputs, language) {
    return inputs.map((text, index) => {
        return {
            id: String(index),
            language,
            text
        };
    });
}
//# sourceMappingURL=textAnalyticsClient.js.map