import { AzureKeyCredential } from '@azure/core-auth';
import { KeyCredential } from '@azure/core-auth';
import { OperationOptions } from '@azure/core-http';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { PipelineOptions } from '@azure/core-http';
import { PollerLike } from '@azure/core-lro';
import { PollOperationState } from '@azure/core-lro';
import { TokenCredential } from '@azure/core-auth';

/**
 * Options for configuring analyze jobs.
 */
export declare interface AnalyzeJobOptions extends OperationOptions {
    /**
     * If set to true, response will contain input and document level statistics.
     */
    includeStatistics?: boolean;
}

/**
 * Result type of the Analyze Long-Running-Operation (LRO)
 */
export declare type AnalyzePollerLike = PollerLike<BeginAnalyzeOperationState, PaginatedAnalyzeResults>;

/**
 * The results of a successful analyze job.
 */
export declare interface AnalyzeResult {
    /**
     * Array of the results for each categorized entities recognition task.
     */
    entitiesRecognitionResults?: RecognizeCategorizedEntitiesResultArray[];
    /**
     * Array of the results for each Pii entities recognition task.
     */
    piiEntitiesRecognitionResults?: RecognizePiiEntitiesResultArray[];
    /**
     * Array of the results for each key phrases extraction task.
     */
    keyPhrasesExtractionResults?: ExtractKeyPhrasesResultArray[];
}

/**
 * An error result from the analyze sentiment operation on a single document.
 */
export declare type AnalyzeSentimentErrorResult = TextAnalyticsErrorResult;

/**
 * Options for the analyze sentiment operation.
 */
export declare interface AnalyzeSentimentOptions extends TextAnalyticsOperationOptions {
    /**
     * Whether to mine the opinions of a sentence and conduct more  granular
     * analysis around the aspects of a product or service (also known as
     * aspect-based sentiment analysis). If set to true, the returned
     * `SentenceSentiment` objects will have property `mined_opinions` containing
     * the result of this analysis.
     * More information about the feature can be found here: https://docs.microsoft.com/azure/cognitive-services/text-analytics/how-tos/text-analytics-how-to-sentiment-analysis?tabs=version-3-1#opinion-mining
     */
    includeOpinionMining?: boolean;
}

/**
 * The result of the analyze sentiment operation on a single document.
 */
export declare type AnalyzeSentimentResult = AnalyzeSentimentSuccessResult | AnalyzeSentimentErrorResult;

/**
 * Array of `AnalyzeSentimentResult` objects corresponding to a batch of input documents, and
 * annotated with information about the batch operation.
 */
export declare interface AnalyzeSentimentResultArray extends Array<AnalyzeSentimentResult> {
    /**
     * Statistics about the input document batch and how it was processed
     * by the service. This property will have a value when includeStatistics is set to true
     * in the client call.
     */
    statistics?: TextDocumentBatchStatistics;
    /**
     * The version of the text analytics model used by this operation on this
     * batch of input documents.
     */
    modelVersion: string;
}

/**
 *  The result of the analyze sentiment operation on a single document,
 *  containing the predicted sentiment for each sentence as well as for the full document.
 */
export declare interface AnalyzeSentimentSuccessResult extends TextAnalyticsSuccessResult {
    /**
     * Predicted sentiment for document. Possible values
     * include: 'positive', 'neutral', 'negative', 'mixed'
     */
    sentiment: DocumentSentimentLabel;
    /**
     * Document level sentiment confidence scores between 0 and 1 for each sentiment class.
     */
    confidenceScores: SentimentConfidenceScores;
    /**
     * The predicted sentiment for each sentence in the corresponding document.
     */
    sentences: SentenceSentiment[];
}

/**
 * Represents the confidence scores across all sentiment classes: positive, neutral, negative.
 */
export declare interface AspectConfidenceScoreLabel {
    positive: number;
    negative: number;
}

/**
 * AspectSentiment contains the related opinions, predicted sentiment,
 * confidence scores and other information about an aspect of a product.
 * An aspect of a product/service is a key component of that product/service.
 * For example in "The food at Hotel Foo is good", "food" is an aspect of
 * "Hotel Foo".
 */
export declare interface AspectSentiment {
    /**
     * The sentiment confidence score between 0 and 1 for the aspect for
     * 'positive' and 'negative' labels.
     */
    confidenceScores: AspectConfidenceScoreLabel;
    /**
     * The predicted Sentiment for the aspect. Possible values include 'positive',
     * 'mixed', and 'negative'.
     */
    sentiment: TokenSentimentValue;
    /**
     * The aspect text.
     */
    text: string;
    /**
     * The aspect text offset from the start of the sentence.
     */
    offset: number;
}
export { AzureKeyCredential }

/**
 * The status of a health operation
 */
export declare type BeginAnalyzeHealthcareOperationState = PollOperationState<PaginatedHealthcareEntities>;

/**
 * Options for the begin analyze healthcare operation.
 */
export declare interface BeginAnalyzeHealthcareOptions {
    /**
     * Options related to polling from the service.
     */
    polling?: PollingOptions;
    /**
     * Options related to the healthcare job.
     */
    health?: HealthcareJobOptions;
}

/**
 * The status of an analyze operation
 */
export declare type BeginAnalyzeOperationState = PollOperationState<PaginatedAnalyzeResults>;

/**
 * Options for the begin analyze operation.
 */
export declare interface BeginAnalyzeOptions {
    /**
     * Options related to polling from the service.
     */
    polling?: PollingOptions;
    /**
     * Options related to the analyze job.
     */
    analyze?: AnalyzeJobOptions;
}

/**
 * An entity from text analysis with information about its categorical
 * classification.
 */
export declare interface CategorizedEntity extends Entity {
}

/**
 * Information about the language of a document as identified by the Text Analytics service.
 */
export declare interface DetectedLanguage {
    /**
     * Long name of a detected language (e.g. English, French).
     */
    name: string;
    /**
     * A two letter representation of the detected language according to the ISO 639-1 standard (e.g. en, fr).
     */
    iso6391Name: string;
    /**
     * A confidence score between 0 and 1. Scores close to 1 indicate 100% certainty that the identified language is true.
     */
    confidenceScore: number;
}

/**
 * An error result from the detect languge operation on a single document.
 */
export declare type DetectLanguageErrorResult = TextAnalyticsErrorResult;

/**
 * An input to the language detection operation. This object specifies a unique document id, as well as the full text of a document and a hint indicating the document's country of origin to assist the text analytics predictive model in detecting the document's language.
 */
export declare interface DetectLanguageInput {
    /**
     * Unique, non-empty document identifier.
     */
    id: string;
    text: string;
    countryHint?: string;
}

/**
 * Options for the detect languages operation.
 */
export declare type DetectLanguageOptions = TextAnalyticsOperationOptions;

/**
 * The result of the detect language operation on a single document.
 */
export declare type DetectLanguageResult = DetectLanguageSuccessResult | DetectLanguageErrorResult;

/**
 * Array of `DetectLanguageResult` objects corresponding to a batch of input documents, and
 * annotated with information about the batch operation.
 */
export declare interface DetectLanguageResultArray extends Array<DetectLanguageResult> {
    /**
     * Statistics about the input document batch and how it was processed
     * by the service. This property will have a value when includeStatistics is set to true
     * in the client call.
     */
    statistics?: TextDocumentBatchStatistics;
    /**
     * The version of the text analytics model used by this operation on this
     * batch of input documents.
     */
    modelVersion: string;
}

/**
 * The result of the detect language operation on a single document,
 * containing a prediction of what language the document is written in.
 */
export declare interface DetectLanguageSuccessResult extends TextAnalyticsSuccessResult {
    /**
     * The top detected language by confidence score.
     */
    readonly primaryLanguage: DetectedLanguage;
}

/**
 * Defines values for DocumentSentimentLabel.
 */
export declare type DocumentSentimentLabel = "positive" | "neutral" | "negative" | "mixed";

/**
 * Options for an entities recognition task.
 */
export declare type EntitiesTask = {
    /**
     * The version of the text analytics model used by this operation on this
     * batch of input documents.
     */
    modelVersion?: string;
};

/**
 * A word or phrase identified as an entity that is categorized within a taxonomy of types. The set of categories recognized by the Text Analytics service is described at https://docs.microsoft.com/azure/cognitive-services/Text-Analytics/named-entity-types .
 */
export declare interface Entity {
    /**
     * Entity text as appears in the request.
     */
    text: string;
    /**
     * Entity type.
     */
    category: string;
    /**
     * (Optional) Entity sub type.
     */
    subCategory?: string;
    /**
     * Start position for the entity text. Use of different 'stringIndexType' values can affect the offset returned.
     */
    offset: number;
    /**
     * Confidence score between 0 and 1 of the extracted entity.
     */
    confidenceScore: number;
}

/**
 * An Error Code returned from the Text Analytics service. Possible
 * values include:
 *
 * For more information about the error, see the `message` property of the associated error.
 */
export declare type ErrorCode = ErrorCodeValue | InnerErrorCodeValue;

/**
 * Defines values for ErrorCodeValue.
 */
export declare type ErrorCodeValue = "InvalidRequest" | "InvalidArgument" | "InternalServerError" | "ServiceUnavailable" | "NotFound";

/**
 * An error result from the extract key phrases operation on a single document.
 */
export declare type ExtractKeyPhrasesErrorResult = TextAnalyticsErrorResult;

/**
 * Options for the extract key phrases operation.
 */
export declare type ExtractKeyPhrasesOptions = TextAnalyticsOperationOptions;

/**
 * The result of the extract key phrases operation on a single document.
 */
export declare type ExtractKeyPhrasesResult = ExtractKeyPhrasesSuccessResult | ExtractKeyPhrasesErrorResult;

/**
 * Array of `ExtractKeyPhrasesResult` objects corresponding to a batch of input documents, and
 * annotated with information about the batch operation.
 */
export declare interface ExtractKeyPhrasesResultArray extends Array<ExtractKeyPhrasesResult> {
    /**
     * Statistics about the input document batch and how it was processed
     * by the service. This property will have a value when includeStatistics is set to true
     * in the client call.
     */
    statistics?: TextDocumentBatchStatistics;
    /**
     * The version of the text analytics model used by this operation on this
     * batch of input documents.
     */
    modelVersion: string;
}

/**
 * The result of the extract key phrases operation on a single document,
 * containing a collection of the key phrases identified in that document.
 */
export declare interface ExtractKeyPhrasesSuccessResult extends TextAnalyticsSuccessResult {
    /**
     * A list of representative words or phrases. The number of key phrases returned is proportional
     * to the number of words in the input document.
     */
    keyPhrases: string[];
}

/**
 * Array of {@link HealthcareResult}
 */
export declare interface HealthcareEntitiesArray extends Array<HealthcareResult> {
}

export declare type HealthcareEntity = Entity & {
    isNegated: boolean;
    /**
     * Entity references in known data sources.
     */
    links?: HealthcareEntityLink[];
};

export declare interface HealthcareEntityLink {
    /**
     * Entity Catalog. Examples include: UMLS, CHV, MSH, etc.
     */
    dataSource: string;
    /**
     * Entity id in the given source catalog.
     */
    id: string;
}

/**
 * An error result from the healthcare operation on a single document.
 */
export declare type HealthcareErrorResult = TextAnalyticsErrorResult;

/**
 * Options for configuring analyze healthcare jobs.
 */
export declare interface HealthcareJobOptions extends TextAnalyticsOperationOptions {
}

export declare interface HealthcareRelation {
    /**
     * Type of relation. Examples include: `DosageOfMedication` or 'FrequencyOfMedication', etc.
     */
    relationType: string;
    /**
     * If true the relation between the entities is bidirectional, otherwise directionality is source to target.
     */
    bidirectional: boolean;
    /**
     * Reference link to the source entity.
     */
    source: string;
    /**
     * Reference link to the target entity.
     */
    target: string;
}

/**
 * The result of the healthcare operation on a single document.
 */
export declare type HealthcareResult = HealthcareSuccessResult | HealthcareErrorResult;

/**
 * The results of a successful healthcare job for a single document.
 */
export declare interface HealthcareSuccessResult extends TextAnalyticsSuccessResult {
    /**
     * Healthcare entities.
     */
    entities: HealthcareEntity[];
    /**
     * Healthcare entity relations.
     */
    relations: HealthcareRelation[];
}

/**
 * Result type of the Health Long-Running-Operation (LRO)
 */
export declare type HealthPollerLike = PollerLike<BeginAnalyzeHealthcareOperationState, PaginatedHealthcareEntities>;

/**
 * Defines values for InnerErrorCodeValue.
 */
export declare type InnerErrorCodeValue = "InvalidParameterValue" | "InvalidRequestBodyFormat" | "EmptyRequest" | "MissingInputRecords" | "InvalidDocument" | "ModelVersionIncorrect" | "InvalidDocumentBatch" | "UnsupportedLanguageCode" | "InvalidCountryHint" | string;

/**
 * Description of collection of tasks for the analyze API to perform on input documents
 */
export declare interface JobManifestTasks {
    /**
     * A collection of descriptions of entities recognition tasks.
     */
    entityRecognitionTasks?: EntitiesTask[];
    /**
     * A collection of descriptions of Pii entities recognition tasks.
     */
    entityRecognitionPiiTasks?: PiiTask[];
    /**
     * A collection of descriptions of key phrases recognition tasks.
     */
    keyPhraseExtractionTasks?: KeyPhrasesTask[];
}

/**
 * Options for a key phrases recognition task.
 */
export declare interface KeyPhrasesTask {
    /**
     * The version of the text analytics model used by this operation on this
     * batch of input documents.
     */
    modelVersion?: string;
}

/**
 * A word or phrase identified as a well-known entity within a database, including its formal (disambiguated) name and a link to the entity information within the source database.
 */
export declare interface LinkedEntity {
    /**
     * Entity Linking formal name.
     */
    name: string;
    /**
     * List of instances this entity appears in the text.
     */
    matches: Match[];
    /**
     * Language used in the data source.
     */
    language: string;
    /**
     * Unique identifier of the recognized entity from the data source.
     */
    dataSourceEntityId?: string;
    /**
     * URL for the entity's page from the data source.
     */
    url: string;
    /**
     * Data source used to extract entity linking, such as Wiki/Bing etc.
     */
    dataSource: string;
    /**
     * Bing Entity Search API unique identifier of the recognized entity.
     */
    bingEntitySearchApiId?: string;
}

/**
 * Details about the specific substring in a document that refers to a linked entity identified by the Text Analytics model.
 */
export declare interface Match {
    /**
     * If a well-known item is recognized, a decimal number denoting the confidence level between 0 and 1 will be returned.
     */
    confidenceScore: number;
    /**
     * Entity text as appears in the request.
     */
    text: string;
    /**
     * Start position for the entity match text.
     */
    offset: number;
}

/**
 * A mined opinion object represents an opinion we've extracted from a sentence.
 * It consists of both an aspect that these opinions are about, and the actual
 * opinions themselves.
 */
export declare interface MinedOpinion {
    /**
     * The aspect of a product/service that this opinion is about.
     */
    aspect: AspectSentiment;
    /**
     * The actual opinions of the aspect.
     */
    opinions: OpinionSentiment[];
}

/**
 * OpinionSentiment contains the predicted sentiment, confidence scores and
 * other information about an opinion of an aspect. For example, in the sentence
 * "The food is good", the opinion of the aspect 'food' is 'good'.
 */
export declare interface OpinionSentiment extends SentenceOpinion {
}

/**
 * The results of an analyze job represented as a paginated iterator that
 * iterates over the results of the requested tasks.
 */
export declare type PagedAsyncIterableAnalyzeResults = PagedAsyncIterableIterator<AnalyzeResult, AnalyzeResult>;

/**
 * The results of a healthcare job represented as a paginated iterator that can
 * either iterate over the results on a document-by-document basis or, by
 * byPage(), can iterate over pages of documents.
 */
export declare type PagedAsyncIterableHealthEntities = PagedAsyncIterableIterator<HealthcareResult, HealthcareEntitiesArray>;

/**
 * The results of an analyze job represented as a paginated iterator that
 * iterates over the results of the requested tasks.
 */
export declare interface PaginatedAnalyzeResults extends PagedAsyncIterableAnalyzeResults {
    /**
     * Statistics about the input document batch and how it was processed
     * by the service. This property will have a value when includeStatistics is set to true
     * in the client call.
     */
    statistics?: TextDocumentBatchStatistics;
}

/**
 * The results of a healthcare job represented as a paginated iterator that can
 * either iterate over the results on a document-by-document basis or, by
 * byPage(), can iterate over pages of documents.
 */
export declare interface PaginatedHealthcareEntities extends PagedAsyncIterableHealthEntities {
    /**
     * Statistics about the input document batch and how it was processed
     * by the service. This property will have a value when includeStatistics is set to true
     * in the client call.
     */
    statistics?: TextDocumentBatchStatistics;
    /**
     * The version of the text analytics model used by this operation on this
     * batch of input documents.
     */
    modelVersion: string;
}

/**
 * An entity from PII recognition with information about the kind of PII
 * encountered.
 */
export declare interface PiiEntity extends Entity {
}

/**
 * The types of PII domains the user can choose from.
 */
export declare enum PiiEntityDomainType {
    /**
     * See https://aka.ms/tanerpii for more information.
     */
    PROTECTED_HEALTH_INFORMATION = "PHI"
}

/**
 * Options for a Pii entities recognition task.
 */
export declare type PiiTask = {
    /**
     * Filters entities to ones only included in the specified domain (e.g., if
     * set to 'PHI', entities in the Protected Healthcare Information domain will
     * only be returned). See https://aka.ms/tanerpii for more information.
     */
    domain?: PiiTaskParametersDomain;
    /**
     * The version of the text analytics model used by this operation on this
     * batch of input documents.
     */
    modelVersion?: string;
};

/**
 * Defines values for PiiTaskParametersDomain.
 */
export declare type PiiTaskParametersDomain = "phi" | "none" | string;

/**
 * Options for configuring a polling operation.
 */
export declare interface PollingOptions {
    /**
     * Delay to wait until next poll, in milliseconds.
     */
    updateIntervalInMs?: number;
    /**
     * A serialized poller which can be used to resume an existing paused Long-Running-Operation.
     */
    resumeFrom?: string;
}

/**
 * An error result from the recognize entities operation on a single document.
 */
export declare type RecognizeCategorizedEntitiesErrorResult = TextAnalyticsErrorResult;

/**
 * Options for the recognize entities operation.
 */
export declare type RecognizeCategorizedEntitiesOptions = TextAnalyticsOperationOptions;

/**
 * The result of the recognize entities operation on a single document.
 */
export declare type RecognizeCategorizedEntitiesResult = RecognizeCategorizedEntitiesSuccessResult | RecognizeCategorizedEntitiesErrorResult;

/**
 * Array of `RecognizeCategorizedEntitiesResult` objects corresponding to a batch of input documents, and
 * annotated with information about the batch operation.
 */
export declare interface RecognizeCategorizedEntitiesResultArray extends Array<RecognizeCategorizedEntitiesResult> {
    /**
     * Statistics about the input document batch and how it was processed
     * by the service. This property will have a value when includeStatistics is set to true
     * in the client call.
     */
    statistics?: TextDocumentBatchStatistics;
    /**
     * The version of the text analytics model used by this operation on this
     * batch of input documents.
     */
    modelVersion: string;
}

/**
 * The result of the recognize entities operation on a single document, containing the collection of
 * `Entity` objects identified in that document.
 */
export declare interface RecognizeCategorizedEntitiesSuccessResult extends TextAnalyticsSuccessResult {
    /**
     * The collection of entities identified in the input document.
     */
    readonly entities: CategorizedEntity[];
}

/**
 * An error result from the recognize linked entities operation on a single document.
 */
export declare type RecognizeLinkedEntitiesErrorResult = TextAnalyticsErrorResult;

/**
 * Options for the recognize linked entities operation.
 */
export declare type RecognizeLinkedEntitiesOptions = TextAnalyticsOperationOptions;

/**
 * The result of the recognize linked entities operation on a single document.
 */
export declare type RecognizeLinkedEntitiesResult = RecognizeLinkedEntitiesSuccessResult | RecognizeLinkedEntitiesErrorResult;

/**
 * Array of `RecognizeLinkedEntitiesResult` objects corresponding to a batch of input documents, and
 * annotated with information about the batch operation.
 */
export declare interface RecognizeLinkedEntitiesResultArray extends Array<RecognizeLinkedEntitiesResult> {
    /**
     * Statistics about the input document batch and how it was processed
     * by the service. This property will have a value when includeStatistics is set to true
     * in the client call.
     */
    statistics?: TextDocumentBatchStatistics;
    /**
     * The version of the text analytics model used by this operation on this
     * batch of input documents.
     */
    modelVersion: string;
}

/**
 * The result of the recognize linked entities operation on a single document,
 * containing a collection of the `LinkedEntity` objects identified in that document.
 */
export declare interface RecognizeLinkedEntitiesSuccessResult extends TextAnalyticsSuccessResult {
    /**
     * The collection of entities identified in the input document.
     */
    readonly entities: LinkedEntity[];
}

/**
 * An error result from the recognize entities operation on a single document.
 */
export declare type RecognizePiiEntitiesErrorResult = TextAnalyticsErrorResult;

/**
 * Options for the recognize PII entities operation.
 */
export declare interface RecognizePiiEntitiesOptions extends TextAnalyticsOperationOptions {
    /**
     * Filters entities to ones only included in the specified domain (e.g., if
     * set to 'PHI', entities in the Protected Healthcare Information domain will
     * only be returned). See https://aka.ms/tanerpii for more information.
     */
    domainFilter?: PiiEntityDomainType;
}

/**
 * The result of the recognize entities operation on a single document.
 */
export declare type RecognizePiiEntitiesResult = RecognizePiiEntitiesSuccessResult | RecognizePiiEntitiesErrorResult;

/**
 * Collection of `RecognizePiiEntitiesResult` objects corresponding to a batch of input documents, and
 * annotated with information about the batch operation.
 */
export declare interface RecognizePiiEntitiesResultArray extends Array<RecognizePiiEntitiesResult> {
    /**
     * Statistics about the input document batch and how it was processed
     * by the service. This property will have a value when includeStatistics is set to true
     * in the client call.
     */
    statistics?: TextDocumentBatchStatistics;
    /**
     * The version of the text analytics model used by this operation on this
     * batch of input documents.
     */
    modelVersion: string;
}

/**
 * The result of the recognize entities operation on a single document, containing the collection of
 * `Entity` objects identified in that document.
 */
export declare interface RecognizePiiEntitiesSuccessResult extends TextAnalyticsSuccessResult {
    /**
     * The collection of entities identified in the input document.
     */
    readonly entities: PiiEntity[];
    /**
     * The text redacted.
     */
    redactedText: string;
}

export declare interface SentenceOpinion {
    /**
     * Opinion level sentiment for the aspect in the sentence.
     */
    sentiment: TokenSentimentValue;
    /**
     * Opinion level sentiment confidence scores for the aspect in the sentence.
     */
    confidenceScores: AspectConfidenceScoreLabel;
    /**
     * The opinion offset from the start of the sentence.
     */
    offset: number;
    /**
     * The aspect text detected.
     */
    text: string;
    /**
     * The indicator representing if the opinion is negated.
     */
    isNegated: boolean;
}

/**
 * The predicted sentiment for a given span of text. For more information regarding text sentiment, see https://docs.microsoft.com/azure/cognitive-services/Text-Analytics/how-tos/text-analytics-how-to-sentiment-analysis.
 */
export declare interface SentenceSentiment {
    /**
     * The sentence text.
     */
    text: string;
    /**
     * The predicted Sentiment for the sentence.
     */
    sentiment: SentenceSentimentLabel;
    /**
     * The sentiment confidence score between 0 and 1 for the sentence for all classes.
     */
    confidenceScores: SentimentConfidenceScores;
    /**
     * The sentence text offset from the start of the document.
     */
    offset: number;
    /**
     * The list of opinions mined from this sentence. For example in "The food is
     * good, but the service is bad", we would mind these two opinions "food is
     * good", "service is bad". Only returned if `show_opinion_mining` is set to
     * True in the call to `analyze_sentiment`.
     */
    minedOpinions: MinedOpinion[];
}

/**
 * Defines values for SentenceSentimentLabel.
 */
export declare type SentenceSentimentLabel = "positive" | "neutral" | "negative";

/**
 * Represents the confidence scores between 0 and 1 across all sentiment classes: positive, neutral, negative.
 */
export declare interface SentimentConfidenceScores {
    positive: number;
    neutral: number;
    negative: number;
}

/**
 * Client class for interacting with Azure Text Analytics.
 */
export declare class TextAnalyticsClient {
    /**
     * The URL to the TextAnalytics endpoint
     */
    readonly endpointUrl: string;
    /**
     * The default country hint to use. Defaults to "us".
     */
    defaultCountryHint: string;
    /**
     * The default language to use. Defaults to "en".
     */
    defaultLanguage: string;
    /* Excluded from this release type: client */
    /**
     * Creates an instance of TextAnalyticsClient.
     *
     * Example usage:
     * ```ts
     * import { TextAnalyticsClient, AzureKeyCredential } from "@azure/ai-text-analytics";
     *
     * const client = new TextAnalyticsClient(
     *    "<service endpoint>",
     *    new AzureKeyCredential("<api key>")
     * );
     * ```
     * @param {string} endpointUrl The URL to the TextAnalytics endpoint
     * @param {TokenCredential | KeyCredential} credential Used to authenticate requests to the service.
     * @param {TextAnalyticsClientOptions} [options] Used to configure the TextAnalytics client.
     */
    constructor(endpointUrl: string, credential: TokenCredential | KeyCredential, options?: TextAnalyticsClientOptions);
    /**
     * Runs a predictive model to determine the language that the passed-in
     * input strings are written in, and returns, for each one, the detected
     * language as well as a score indicating the model's confidence that the
     * inferred language is correct.  Scores close to 1 indicate high certainty in
     * the result.  120 languages are supported.
     * @param documents A collection of input strings to analyze.
     * @param countryHint Indicates the country of origin for all of
     *   the input strings to assist the text analytics model in predicting
     *   the language they are written in.  If unspecified, this value will be
     *   set to the default country hint in `TextAnalyticsClientOptions`.
     *   If set to an empty string, or the string "none", the service will apply a
     *   model where the country is explicitly unset.
     *   The same country hint is applied to all strings in the input collection.
     * @param options Optional parameters for the operation.
     */
    detectLanguage(documents: string[], countryHint?: string, options?: DetectLanguageOptions): Promise<DetectLanguageResultArray>;
    /**
     * Runs a predictive model to determine the language that the passed-in
     * input document are written in, and returns, for each one, the detected
     * language as well as a score indicating the model's confidence that the
     * inferred language is correct.  Scores close to 1 indicate high certainty in
     * the result.  120 languages are supported.
     * @param documents A collection of input documents to analyze.
     * @param options Optional parameters for the operation.
     */
    detectLanguage(documents: DetectLanguageInput[], options?: DetectLanguageOptions): Promise<DetectLanguageResultArray>;
    /**
     * Runs a predictive model to identify a collection of named entities
     * in the passed-in input strings, and categorize those entities into types
     * such as person, location, or organization.  For more information on
     * available categories, see
     * https://docs.microsoft.com/azure/cognitive-services/Text-Analytics/named-entity-types.
     * For a list of languages supported by this operation, see
     * https://docs.microsoft.com/azure/cognitive-services/text-analytics/language-support.
     * @param documents The input strings to analyze.
     * @param language The language that all the input strings are
          written in. If unspecified, this value will be set to the default
          language in `TextAnalyticsClientOptions`.
          If set to an empty string, the service will apply a model
          where the lanuage is explicitly set to "None".
     * @param options Optional parameters for the operation.
     */
    recognizeEntities(documents: string[], language?: string, options?: RecognizeCategorizedEntitiesOptions): Promise<RecognizeCategorizedEntitiesResultArray>;
    /**
     * Runs a predictive model to identify a collection of named entities
     * in the passed-in input documents, and categorize those entities into types
     * such as person, location, or organization.  For more information on
     * available categories, see
     * https://docs.microsoft.com/azure/cognitive-services/Text-Analytics/named-entity-types.
     * For a list of languages supported by this operation, see
     * https://docs.microsoft.com/azure/cognitive-services/text-analytics/language-support.
     * @param documents The input documents to analyze.
     * @param options Optional parameters for the operation.
     */
    recognizeEntities(documents: TextDocumentInput[], options?: RecognizeCategorizedEntitiesOptions): Promise<RecognizeCategorizedEntitiesResultArray>;
    /**
     * Runs a predictive model to identify the positive, negative, neutral, or mixed
     * sentiment contained in the input strings, as well as scores indicating
     * the model's confidence in each of the predicted sentiments.
     * For a list of languages supported by this operation, see
     * https://docs.microsoft.com/azure/cognitive-services/text-analytics/language-support.
     * @param documents The input strings to analyze.
     * @param language The language that all the input strings are
          written in. If unspecified, this value will be set to the default
          language in `TextAnalyticsClientOptions`.
          If set to an empty string, the service will apply a model
          where the lanuage is explicitly set to "None".
     * @param options Optional parameters for the operation.
     */
    analyzeSentiment(documents: string[], language?: string, options?: AnalyzeSentimentOptions): Promise<AnalyzeSentimentResultArray>;
    /**
     * Runs a predictive model to identify the positive, negative or neutral, or mixed
     * sentiment contained in the input documents, as well as scores indicating
     * the model's confidence in each of the predicted sentiments.
     * For a list of languages supported by this operation, see
     * https://docs.microsoft.com/azure/cognitive-services/text-analytics/language-support.
     * @param documents The input documents to analyze.
     * @param options Optional parameters for the operation.
     */
    analyzeSentiment(documents: TextDocumentInput[], options?: AnalyzeSentimentOptions): Promise<AnalyzeSentimentResultArray>;
    /**
     * Runs a model to identify a collection of significant phrases
     * found in the passed-in input strings.
     * For a list of languages supported by this operation, see
     * https://docs.microsoft.com/azure/cognitive-services/text-analytics/language-support.
     * @param documents The input strings to analyze.
     * @param language The language that all the input strings are
          written in. If unspecified, this value will be set to the default
          language in `TextAnalyticsClientOptions`.
          If set to an empty string, the service will apply a model
          where the lanuage is explicitly set to "None".
     * @param options Optional parameters for the operation.
     */
    extractKeyPhrases(documents: string[], language?: string, options?: ExtractKeyPhrasesOptions): Promise<ExtractKeyPhrasesResultArray>;
    /**
     * Runs a model to identify a collection of significant phrases
     * found in the passed-in input documents.
     * For a list of languages supported by this operation, see
     * https://docs.microsoft.com/azure/cognitive-services/text-analytics/language-support.
     * @param documents The input documents to analyze.
     * @param options Optional parameters for the operation.
     */
    extractKeyPhrases(documents: TextDocumentInput[], options?: ExtractKeyPhrasesOptions): Promise<ExtractKeyPhrasesResultArray>;
    /**
     * Runs a predictive model to identify a collection of entities containing
     * personally identifiable information found in the passed-in input strings,
     * and categorize those entities into types such as US social security
     * number, drivers license number, or credit card number.
     * For a list of languages supported by this operation, see
     * https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/language-support.
     * @param inputs The input strings to analyze.
     * @param language The language that all the input strings are
          written in. If unspecified, this value will be set to the default
          language in `TextAnalyticsClientOptions`.
          If set to an empty string, the service will apply a model
          where the lanuage is explicitly set to "None".
     * @param options Optional parameters for the operation.
     */
    recognizePiiEntities(inputs: string[], language?: string, options?: RecognizePiiEntitiesOptions): Promise<RecognizePiiEntitiesResultArray>;
    /**
     * Runs a predictive model to identify a collection of entities containing
     * personally identifiable information found in the passed-in input documents,
     * and categorize those entities into types such as US social security
     * number, drivers license number, or credit card number.
     * For a list of languages supported by this operation, see
     * https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/language-support.
     * @param inputs The input documents to analyze.
     * @param options Optional parameters for the operation.
     */
    recognizePiiEntities(inputs: TextDocumentInput[], options?: RecognizePiiEntitiesOptions): Promise<RecognizePiiEntitiesResultArray>;
    /**
     * Runs a predictive model to identify a collection of entities
     * found in the passed-in input strings, and include information linking the
     * entities to their corresponding entries in a well-known knowledge base.
     * For a list of languages supported by this operation, see
     * https://docs.microsoft.com/azure/cognitive-services/text-analytics/language-support.
     * @param documents The input strings to analyze.
     * @param language The language that all the input strings are
          written in. If unspecified, this value will be set to the default
          language in `TextAnalyticsClientOptions`.
          If set to an empty string, the service will apply a model
          where the lanuage is explicitly set to "None".
     * @param options Optional parameters for the operation.
     */
    recognizeLinkedEntities(documents: string[], language?: string, options?: RecognizeLinkedEntitiesOptions): Promise<RecognizeLinkedEntitiesResultArray>;
    /**
     * Runs a predictive model to identify a collection of entities
     * found in the passed-in input documents, and include information linking the
     * entities to their corresponding entries in a well-known knowledge base.
     * For a list of languages supported by this operation, see
     * https://docs.microsoft.com/azure/cognitive-services/text-analytics/language-support.
     * @param documents The input documents to analyze.
     * @param options Optional parameters for the operation.
     */
    recognizeLinkedEntities(documents: TextDocumentInput[], options?: RecognizeLinkedEntitiesOptions): Promise<RecognizeLinkedEntitiesResultArray>;
    /**
     * Start a healthcare analysis job to recognize healthcare related entities (drugs, conditions,
     * symptoms, etc) and their relations.
     * @param documents Collection of documents to analyze.
     * @param language The language that all the input strings are
          written in. If unspecified, this value will be set to the default
          language in `TextAnalyticsClientOptions`.
          If set to an empty string, the service will apply a model
          where the lanuage is explicitly set to "None".
     * @param options The options parameters.
     */
    beginAnalyzeHealthcare(documents: string[], language?: string, options?: BeginAnalyzeHealthcareOptions): Promise<HealthPollerLike>;
    /**
     * Start a healthcare analysis job to recognize healthcare related entities (drugs, conditions,
     * symptoms, etc) and their relations.
     * @param documents Collection of documents to analyze.
     * @param options The options parameters.
     */
    beginAnalyzeHealthcare(documents: TextDocumentInput[], options?: BeginAnalyzeHealthcareOptions): Promise<HealthPollerLike>;
    /**
     * Submit a collection of text documents for analysis. Specify one or more unique tasks to be executed.
     * @param documents Collection of documents to analyze
     * @param tasks Tasks to execute.
     * @param language The language that all the input strings are
          written in. If unspecified, this value will be set to the default
          language in `TextAnalyticsClientOptions`.
          If set to an empty string, the service will apply a model
          where the lanuage is explicitly set to "None".
     * @param options The options parameters.
     */
    beginAnalyze(documents: string[], tasks: JobManifestTasks, language?: string, options?: BeginAnalyzeOptions): Promise<AnalyzePollerLike>;
    /**
     * Submit a collection of text documents for analysis. Specify one or more unique tasks to be executed.
     * @param documents Collection of documents to analyze
     * @param tasks Tasks to execute.
     * @param options The options parameters.
     */
    beginAnalyze(documents: TextDocumentInput[], tasks: JobManifestTasks, options?: BeginAnalyzeOptions): Promise<AnalyzePollerLike>;
}

/**
 * Client options used to configure TextAnalytics API requests.
 */
export declare interface TextAnalyticsClientOptions extends PipelineOptions {
    /**
     * The default country hint to use. Defaults to "us".
     */
    defaultCountryHint?: string;
    /**
     * The default language to use. Defaults to "en".
     */
    defaultLanguage?: string;
}

/**
 * Type describing an error from the Text Analytics service
 */
export declare interface TextAnalyticsError {
    /**
     * A code describing the kind of error produced
     */
    readonly code: ErrorCode;
    /**
     * A message from the service explaining the error
     */
    readonly message: string;
    /**
     * The target of the particular error (for example, the name of an invalid parameter)
     */
    readonly target?: string;
}

/**
 * Base type for error results of text analytics operations corresponding to a
 * single document.
 */
export declare interface TextAnalyticsErrorResult {
    /**
     * Unique, non-empty document identifier.
     */
    readonly id: string;
    /**
     * The Error for this document result.
     */
    readonly error: TextAnalyticsError;
}

/**
 * Options common to all text analytics operations.
 */
export declare interface TextAnalyticsOperationOptions extends OperationOptions {
    /**
     * This value indicates which model will be used for scoring. If a model-version is
     * not specified, the API should default to the latest, non-preview version.
     * For supported model versions, see operation-specific documentation, for example:
     * https://docs.microsoft.com/azure/cognitive-services/text-analytics/how-tos/text-analytics-how-to-sentiment-analysis#model-versioning
     */
    modelVersion?: string;
    /**
     * If set to true, response will contain input and document level statistics.
     */
    includeStatistics?: boolean;
}

/**
 * The result of a text analytics operation on a single input document.
 */
export declare type TextAnalyticsResult = TextAnalyticsSuccessResult | TextAnalyticsErrorResult;

/**
 * Base type for results of text analytics operations corresponding to a single
 * input document.
 */
export declare interface TextAnalyticsSuccessResult {
    /**
     * Unique, non-empty document identifier.
     */
    readonly id: string;
    /**
     * Statistics about the input document and how it was processed
     * by the service. This property will have a value when includeStatistics is set to true
     * in the client call.
     */
    readonly statistics?: TextDocumentStatistics;
    /**
     * An array of warning data corresponding to this document.
     *
     * If no warnings were returned, this array will be empty.
     */
    readonly warnings: TextAnalyticsWarning[];
    /**
     * Discriminant to determine if that this is an error result.
     */
    readonly error?: undefined;
}

/**
 * Represents a warning encountered while processing a document.
 */
export declare interface TextAnalyticsWarning {
    /**
     * Error code.
     */
    code: WarningCode;
    /**
     * Warning message.
     */
    message: string;
}

/**
 * if includeStatistics=true was specified in the request this field will contain information about the request payload.
 */
export declare interface TextDocumentBatchStatistics {
    /**
     * Number of documents submitted in the request.
     */
    documentCount: number;
    /**
     * Number of valid documents. This excludes empty, over-size limit or non-supported languages documents.
     */
    validDocumentCount: number;
    /**
     * Number of invalid documents. This includes empty, over-size limit or non-supported languages documents.
     */
    erroneousDocumentCount: number;
    /**
     * Number of transactions for the request.
     */
    transactionCount: number;
}

/**
 * An object representing an individual text document to be analyzed by the Text Analytics service. The document contains a unique document ID, the full text of the document, and the language of the document's text.
 */
export declare interface TextDocumentInput {
    /**
     * A unique, non-empty document identifier.
     */
    id: string;
    /**
     * The input text to process.
     */
    text: string;
    /**
     * (Optional) This is the 2 letter ISO 639-1 representation of a language. For example, use "en" for English; "es" for Spanish etc. If not set, use "en" for English as default.
     */
    language?: string;
}

/**
 * if includeStatistics=true was specified in the request this field will contain information about the document payload.
 */
export declare interface TextDocumentStatistics {
    /**
     * Number of text elements recognized in the document.
     */
    characterCount: number;
    /**
     * Number of transactions for the document.
     */
    transactionCount: number;
}

/**
 * Defines values for TokenSentimentValue.
 */
export declare type TokenSentimentValue = "positive" | "mixed" | "negative";

/**
 * Defines values for WarningCode.
 */
export declare type WarningCode = "LongWordsInDocument" | "DocumentTruncated" | string;

export { }
